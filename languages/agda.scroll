title Agda

import settings.scroll
htmlTitle Agda - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/agda.pldb

* Agda is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2007 by Ulf Norell and Catarina Coquand.
 link ../lists/languages.html?filter=2007 2007
 link ../lists/creators.html#Ulf_Norell Ulf Norell
 link ../lists/creators.html#Catarina_Coquand Catarina Coquand
 

kpiTable
 #172 <span title="TotalRank: 475 Jobs: 101 Users: 608 Facts: 140 Links: 234">on PLDB</span>
 15 Years Old
 731 <span title="Crude user estimate from a linear model.">Users</span>
 7 <span title="Books about or leveraging Agda">Books</span>
 14 <span title="Academic publications about or leveraging Agda">Papers</span>
 2k <span title="Agda repos on GitHub.">Repos</span>

* Try now: <a href="https://tio.run/#agda">TIO</a>

* Agda is a dependently typed functional programming language originally developed by Ulf Norell at Chalmers University of Technology with implementation described in his PhD thesis. The current version of Agda was originally known as Agda 2. The original Agda system was developed at Chalmers by Catarina Coquand in 1999. <a href="https://en.wikipedia.org/wiki/Agda_(programming_language)">Read more on Wikipedia...</a>

- the <a href="http://wiki.portal.chalmers.se/agda">Agda website</a>
- the <a href="https://en.wikipedia.org/wiki/Agda_(programming_language)">Agda Wikipedia page</a>
- the <a href="https://agda.readthedocs.io/en/v2.6.2.2/">Agda docs</a>
- There are at least 2,120 Agda repos on <a href="https://github.com/search?q=language:Agda">GitHub</a>
- Agda first developed in <a href="../lists/originCommunities.html#Chalmers_University_of_Technology">Chalmers University of Technology</a>
- file extensions for Agda include agda and lagda
- The  Google BigQuery Public Dataset GitHub snapshot shows 143 users using Agda in 207 repos on <a href="https://api.github.com/search/repositories?q=language:Agda">GitHub</a>
- Explore Agda snippets on <a href="http://www.rosettacode.org/wiki/Category:Agda">Rosetta Code</a>
- Agda is listed on <a href="https://hopl.info/showlanguage.prx?exp=7860">HOPL</a>
- <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/haskell.py">syntax highlighting</a> for Agda
- GitHub supports <a href="https://github.com/mokus0/Agda.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Agda
- See also: (7 related languages)<a href="coq.html">Coq</a>, <a href="epigram.html">Epigram</a>, <a href="haskell.html">Haskell</a>, <a href="idris.html">Idris</a>, <a href="emacs-editor.html">Emacs</a>, <a href="unicode.html">Unicode</a>, <a href="javascript.html">JavaScript</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/agda">Improve our Agda file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/a/Agda.agda'>hello-world</a>:
code
 module agda where
 open import IO
 
 main = run (putStrLn &quot;Hello World&quot;)
 

exampleCodeHeader Example from <a href='https://github.com/mokus0/Agda.tmbundle'>Linguist</a>:
code
 module NatCat where
 
 open import Relation.Binary.PropositionalEquality
 
 -- If you can show that a relation only ever has one inhabitant
 -- you get the category laws for free
 module
   EasyCategory
   (obj : Set)
   (_⟶_ : obj → obj → Set)
   (_∘_ : ∀ {x y z} → x ⟶ y → y ⟶ z → x ⟶ z)
   (id : ∀ x → x ⟶ x)
   (single-inhabitant : (x y : obj) (r s : x ⟶ y) → r ≡ s)
   where
 
   idʳ : ∀ x y (r : x ⟶ y) → r ∘ id y ≡ r
   idʳ x y r = single-inhabitant x y (r ∘ id y) r 
 
   idˡ : ∀ x y (r : x ⟶ y) → id x ∘ r ≡ r
   idˡ x y r = single-inhabitant x y (id x ∘ r) r
 
   ∘-assoc : ∀ w x y z (r : w ⟶ x) (s : x ⟶ y) (t : y ⟶ z) → (r ∘ s) ∘ t ≡ r ∘ (s ∘ t)
   ∘-assoc w x y z r s t = single-inhabitant w z ((r ∘ s) ∘ t) (r ∘ (s ∘ t))
 
 open import Data.Nat
 
 same : (x y : ℕ) (r s : x ≤ y) → r ≡ s
 same .0 y z≤n z≤n = refl
 same .(suc m) .(suc n) (s≤s {m} {n} r) (s≤s s) = cong s≤s (same m n r s)
 
 ≤-trans : ∀ x y z → x ≤ y → y ≤ z → x ≤ z
 ≤-trans .0 y z z≤n s = z≤n
 ≤-trans .(suc m) .(suc n) .(suc n₁) (s≤s {m} {n} r) (s≤s {.n} {n₁} s) = s≤s (≤-trans m n n₁ r s)
 
 ≤-refl : ∀ x → x ≤ x
 ≤-refl zero = z≤n
 ≤-refl (suc x) = s≤s (≤-refl x)
 
 module Nat-EasyCategory = EasyCategory ℕ _≤_ (λ {x}{y}{z} → ≤-trans x y z) ≤-refl same
 

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Agda_(programming_language)'>Wikipedia</a>:
code
 data _≤_ : ℕ → ℕ → Set where
    z≤n : {n : ℕ} → zero ≤ n
    s≤s : {n m : ℕ} → n ≤ m → suc n ≤ suc m

foldBreak
## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
   -- \d+
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
   -- \d+[eE][+-]?\d+
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
   -- 0[xX][\da-fA-F]+
  Token 
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token putStrLn
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   -- A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   -- A comment
  Token --
 row
  Feature Typed Holes
  FeatureLink ../languages/typed-holes-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 

foldBreak
## Books about Agda on goodreads
pipeTable
 title|titleLink|author|year|reviews|ratings|rating
 Verified Functional Programming in Agda|https://www.goodreads.com/search?q=Verified Functional Programming in Agda Aaron Stump|Aaron Stump||0|1|4.00
 Verified Functional Programming in Agda|https://www.goodreads.com/search?q=Verified Functional Programming in Agda Aaron Stump|Aaron Stump||0|0|0.0
 Programming Language Foundations in Agda|https://www.goodreads.com/search?q=Programming Language Foundations in Agda Philip Wadler|Philip Wadler||0|0|0.0

foldBreak
## Books about Agda from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Verified Functional Programming in Agda (ACM Books)|https://isbndb.com/book/9781970001242|Stump, Aaron|2016|ACM Books
 Verified Functional Programming in Agda (ACM Books)|https://isbndb.com/book/9781970001273|Stump, Aaron|2016|ACM Books
 Verified Functional Programming in Agda|https://isbndb.com/book/9781970001266|Aaron Stump|20160201|Morgan & Claypool Publishers
 Verified Functional Programming in Agda|https://isbndb.com/book/9781970001259|Aaron Stump|20160201|Morgan & Claypool Publishers

foldBreak
## Publications about Agda from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 A Brief Overview of Agda - A Functional Language with Dependent Types|https://www.semanticscholar.org/paper/5b8b75c3049b78461e1f1eab598f4cc22ff898aa|A. Bove and P. Dybjer and U. Norell|2009|248|22
 On the bright side of type classes: instance arguments in Agda|https://www.semanticscholar.org/paper/dd8bfacec46cd0fe6c0255ebec2d8f4f55fa9fc0|D. Devriese and F. Piessens|2011|62|2
 Programming Language Foundations in Agda|https://www.semanticscholar.org/paper/559263fb7522805cb768a7ae0c4736d1972d9202|P. Wadler|2018|31|1
 Verified Functional Programming in Agda|https://www.semanticscholar.org/paper/a5c2444d3c977260dbbfc7c2eceea9bda2614e71|Aaron Stump|2016|27|1
 Integrating an Automated Theorem Prover into Agda|https://www.semanticscholar.org/paper/a3359b29ba67f6f950d2cdd1471d2a3b2e099c14|S. Foster and G. Struth|2011|15|0
 Pi-Ware: Hardware Description and Verification in Agda|https://www.semanticscholar.org/paper/80a17295f94f6e5019b0846f56b62ef65153595e|J. P. P. Flor and W. Swierstra and Y. Sijsling|2015|11|1
 Auto in Agda - Programming Proof Search Using Reflection|https://www.semanticscholar.org/paper/85f3bb9d1a14d5007674fe4917eeb279f1686a7f|Pepijn Kokke and W. Swierstra|2015|11|2
 Programming language foundations in Agda|https://www.semanticscholar.org/paper/bbfcb282284fae3c08db573efd84a0b280eb6f67|Wen Kokke and Jeremy G. Siek and P. Wadler|2020|6|0
 Embedding a logical theory of constructions in Agda|https://www.semanticscholar.org/paper/4eb11e41eea071024c3720cfa63002a097760efd|A. Bove and P. Dybjer and Andrés Sicard-Ramírez|2009|5|0
 Dependently Typed Web Client Applications - FRP in Agda in HTML5|https://www.semanticscholar.org/paper/6e588b21361d0f1d4a015e235f43397ce588c096|A. Jeffrey|2013|4|0
 Case of (Quite) Painless Dependently Typed Programming: Fully Certified Merge Sort in Agda|https://www.semanticscholar.org/paper/ed2ecf1f4f3382c500d4979444107b49b00b0337|Ernesto Copello and Á. Tasistro and Brunone Bianchi|2014|2|0
 Formalizing Constructive Quantifier Elimination in Agda|https://www.semanticscholar.org/paper/aa33c00f9b0175cb04208e3efa98e711ad4fd13c|J. Pope|2018|1|0
 Programming assurance cases in Agda|https://www.semanticscholar.org/paper/f84dc6e52242df661da7bb499169393c05743b3b|M. Takeyama|2011|1|0
 An approach to translating Haskell programs to Agda and reasoning about them|https://www.semanticscholar.org/paper/4f55424ebcf710cd8a46b9fad9c27f6803375835|H. Carr and Christa Jenkins and Mark Moir and Victor Cacciari Miraldo and Lisandra Silva|2022|1|0

keyboardNav limbo.html java-server-pages.html
