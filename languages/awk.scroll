title awk

import settings.scroll
htmlTitle awk - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/awk.pldb

* awk, aka Aho, Weinberger, Kernighan, is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 1977 by Alfred Aho and Peter J. Weinberger and Brian Kernighan.
 link ../lists/languages.html?filter=1977 1977
 link ../lists/creators.html#Alfred_Aho Alfred Aho
 link ../lists/creators.html#Peter_J._Weinberger Peter J. Weinberger
 link ../lists/creators.html#Brian_Kernighan Brian Kernighan
 

kpiTable
 #62 <span title="TotalRank: 222 Jobs: 90 Users: 210 Facts: 42 Links: 90">on PLDB</span>
 45 Years Old
 4.7k <span title="Crude user estimate from a linear model.">Users</span>
 26 <span title="Books about or leveraging awk">Books</span>
 8 <span title="Academic publications about or leveraging awk">Papers</span>
 3k <span title="awk repos on GitHub.">Repos</span>

* Try now: <a href="https://riju.codes/awk">Riju</a> · <a href="https://tio.run/#awk">TIO</a>

* AWK is a programming language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems. The AWK language is a data-driven scripting language consisting of a set of actions to be taken against streams of textual data – either run directly on files or used as part of a pipeline – for purposes of extracting or transforming text, such as producing formatted reports. <a href="https://en.wikipedia.org/wiki/AWK">Read more on Wikipedia...</a>

- the <a href="http://www.cs.princeton.edu/~bwk/btl.mirror/">awk website</a>
- the <a href="https://en.wikipedia.org/wiki/AWK">awk Wikipedia page</a>
- the <a href="https://www.gnu.org/software/gawk/manual/gawk.html">awk docs</a>
- There are at least 2,552 awk repos on <a href="https://github.com/search?q=language:Awk">GitHub</a>
- awk first developed in <a href="../lists/originCommunities.html#Bell_Labs">Bell Labs</a>
- file extensions for awk include awk, auk, gawk, mawk and nawk
- The  Google BigQuery Public Dataset GitHub snapshot shows 14k users using awk in 21k repos on <a href="https://api.github.com/search/repositories?q=language:Awk">GitHub</a>
- There are 1,929 members in the <a href="https://reddit.com/r/awk">awk subreddit</a>
- There are 14 <a href="https://projecteuler.net/language=AWK">Project Euler</a> users using awk
- Explore awk snippets on <a href="http://www.rosettacode.org/wiki/Category:AWK">Rosetta Code</a>
- awk is listed on <a href="https://hopl.info/showlanguage.prx?exp=1844">HOPL</a>
- awk ranks #37 in the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
- There is an <a href="https://packages.ubuntu.com/jammy/gawk">Ubuntu package</a> for awk
- <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/textedit.py">syntax highlighting</a> for awk
- GitHub supports <a href="https://github.com/github-linguist/awk-sublime" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for awk
- awk appears in the <a href="https://github.com/mame/quine-relay">Quine Relay</a> project
- Indeed.com has 7 matches for <a href="https://www.indeed.com/jobs?q=awk engineer">"awk engineer"</a>.
- See also: (14 related languages)<a href="c.html">C</a>, <a href="snobol.html">SNOBOL</a>, <a href="bourne-shell.html">Bourne shell</a>, <a href="tcl.html">Tcl</a>, <a href="ampl.html">AMPL</a>, <a href="perl.html">Perl</a>, <a href="lua.html">Lua</a>, <a href="regex.html">Regular Expressions</a>, <a href="unix.html">Unix</a>, <a href="sed.html">sed</a>, <a href="freebsd.html">FreeBSD</a>, <a href="solaris.html">Solaris</a>, <a href="java.html">Java</a>, <a href="isbn.html">ISBN</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/awk">Improve our awk file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://riju.codes/awk'>Riju</a>:
code
 BEGIN { print &quot;Hello, world!&quot; }
 

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/a/AWK.awk'>hello-world</a>:
code
 # awk -f awk.awk
 BEGIN { print &quot;Hello World&quot; }
 

exampleCodeHeader Example from <a href='http://helloworldcollection.de/#Aho%2C'>the Hello World Collection</a>:
code
 # Hello world in AWK
 
 BEGIN {
   print &quot;Hello World!&quot;
 }

exampleCodeHeader Example from <a href='https://github.com/github-linguist/awk-sublime'>Linguist</a>:
code
 #!/bin/awk -f
 
 BEGIN {
   # It is not possible to define output file names here because
   # FILENAME is not define in the BEGIN section
   n = &quot;&quot;;
   printf &quot;Generating data files ...&quot;;
   network_max_bandwidth_in_byte = 10000000;
   network_max_packet_per_second = 1000000;
   last3 = 0;
   last4 = 0;
   last5 = 0;
   last6 = 0;
 }
 {
   if ($1 ~ /Average/)
     { # Skip the Average values
       n = &quot;&quot;;
       next;
     }
 
   if ($2 ~ /all/)
     { # This is the cpu info
       print $3 &gt; FILENAME&quot;.cpu.user.dat&quot;;
 #	  print $4 &gt; FILENAME&quot;.cpu.nice.dat&quot;;
       print $5 &gt; FILENAME&quot;.cpu.system.dat&quot;;
 #     print $6 &gt; FILENAME&quot;.cpu.iowait.dat&quot;;
       print $7 &gt; FILENAME&quot;.cpu.idle.dat&quot;;
       print 100-$7 &gt; FILENAME&quot;.cpu.busy.dat&quot;;
     }
   if ($2 ~ /eth0/)
     { # This is the eth0 network info
       if ($3 &gt; network_max_packet_per_second)
 	print last3 &gt; FILENAME&quot;.net.rxpck.dat&quot;; # Total number of packets received per second.
       else
 	{
 	  last3 = $3;
 	  print $3 &gt; FILENAME&quot;.net.rxpck.dat&quot;; # Total number of packets received per second.
 	}
       if ($4 &gt; network_max_packet_per_second)
 	print last4 &gt; FILENAME&quot;.net.txpck.dat&quot;; # Total number of packets transmitted per second.
       else
 	{
 	  last4 = $4;
 	  print $4 &gt; FILENAME&quot;.net.txpck.dat&quot;; # Total number of packets transmitted per second.
 	}
       if ($5 &gt; network_max_bandwidth_in_byte)
 	print last5 &gt; FILENAME&quot;.net.rxbyt.dat&quot;; # Total number of bytes received per second.
       else
 	{
 	  last5 = $5;
 	  print $5 &gt; FILENAME&quot;.net.rxbyt.dat&quot;; # Total number of bytes received per second.
 	}
       if ($6 &gt; network_max_bandwidth_in_byte)
 	print last6 &gt; FILENAME&quot;.net.txbyt.dat&quot;; # Total number of bytes transmitted per second.
       else
 	{
 	  last6 = $6;
 	  print $6 &gt; FILENAME&quot;.net.txbyt.dat&quot;; # Total number of bytes transmitted per second.
 	}
 #     print $7 &gt; FILENAME&quot;.net.rxcmp.dat&quot;; # Number of compressed packets received per second (for cslip etc.).
 #     print $8 &gt; FILENAME&quot;.net.txcmp.dat&quot;; # Number of compressed packets transmitted per second.
 #     print $9 &gt; FILENAME&quot;.net.rxmcst.dat&quot;; # Number of multicast packets received per second.
     }
 
   # Detect which is the next info to be parsed
   if ($2 ~ /proc|cswch|tps|kbmemfree|totsck/)
     {
       n = $2;
     }
 
   # Only get lines with numbers (real data !)
   if ($2 ~ /[0-9]/)
     {
       if (n == &quot;proc/s&quot;)
 	{ # This is the proc/s info
 	  print $2 &gt; FILENAME&quot;.proc.dat&quot;;
 #	  n = &quot;&quot;;
 	}
       if (n == &quot;cswch/s&quot;)
 	{ # This is the context switches per second info
 	  print $2 &gt; FILENAME&quot;.ctxsw.dat&quot;;
 #	  n = &quot;&quot;;
 	}
       if (n == &quot;tps&quot;)
 	{ # This is the disk info
 	  print $2 &gt; FILENAME&quot;.disk.tps.dat&quot;; # total transfers per second
 	  print $3 &gt; FILENAME&quot;.disk.rtps.dat&quot;; # read requests per second
 	  print $4 &gt; FILENAME&quot;.disk.wtps.dat&quot;; # write requests per second
 	  print $5 &gt; FILENAME&quot;.disk.brdps.dat&quot;; # block reads per second
 	  print $6 &gt; FILENAME&quot;.disk.bwrps.dat&quot;; # block writes per second
 #	  n = &quot;&quot;;
 	}
       if (n == &quot;kbmemfree&quot;)
 	{ # This is the mem info
 	  print $2 &gt; FILENAME&quot;.mem.kbmemfree.dat&quot;; # Amount of free memory available in kilobytes.
 	  print $3 &gt; FILENAME&quot;.mem.kbmemused.dat&quot;; # Amount of used memory in kilobytes. This does not take into account memory used by the kernel itself.
 	  print $4 &gt; FILENAME&quot;.mem.memused.dat&quot;; # Percentage of used memory.
 #         It appears the kbmemshrd has been removed from the sysstat output - ntolia
 #	  print $X &gt; FILENAME&quot;.mem.kbmemshrd.dat&quot;; # Amount of memory shared by the system in kilobytes.  Always zero with 2.4 kernels.
 #	  print $5 &gt; FILENAME&quot;.mem.kbbuffers.dat&quot;; # Amount of memory used as buffers by the kernel in kilobytes.
 	  print $6 &gt; FILENAME&quot;.mem.kbcached.dat&quot;; # Amount of memory used to cache data by the kernel in kilobytes.
 #	  print $7 &gt; FILENAME&quot;.mem.kbswpfree.dat&quot;; # Amount of free swap space in kilobytes.
 #	  print $8 &gt; FILENAME&quot;.mem.kbswpused.dat&quot;; # Amount of used swap space in kilobytes.
 	  print $9 &gt; FILENAME&quot;.mem.swpused.dat&quot;; # Percentage of used swap space.
 #	  n = &quot;&quot;;
  	}
       if (n == &quot;totsck&quot;)
 	{ # This is the socket info
 	  print $2 &gt; FILENAME&quot;.sock.totsck.dat&quot;; # Total number of used sockets.
 	  print $3 &gt; FILENAME&quot;.sock.tcpsck.dat&quot;; # Number of TCP sockets currently in use.
 #	  print $4 &gt; FILENAME&quot;.sock.udpsck.dat&quot;; # Number of UDP sockets currently in use.
 #	  print $5 &gt; FILENAME&quot;.sock.rawsck.dat&quot;; # Number of RAW sockets currently in use.
 #	  print $6 &gt; FILENAME&quot;.sock.ip-frag.dat&quot;; # Number of IP fragments currently in use.
 #	  n = &quot;&quot;;
  	}
     }
 }
 END {
   print &quot; &#39;&quot; FILENAME &quot;&#39; done.&quot;;
 }
 

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/AWK'>Wikipedia</a>:
code
 BEGIN {
     pattern = ARGV[1]
     for (i = 1; i &lt; ARGC; i++) # remove first argument
         ARGV[i] = ARGV[i + 1]
     ARGC--
     if (ARGC == 1) { # the pattern was the only thing, so force read from standard input (used by book)
         ARGC = 2
         ARGV[1] = &quot;-&quot;
     }
 }
 $0 ~ pattern { print FILENAME &quot;:&quot; $0 }

foldBreak
## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
   # [0-9]+
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
   # [0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
   # 0x[0-9a-fA-F]+
  Token 
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token print
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   # A comment
  Token #
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 

foldBreak
## Books about awk on goodreads
pipeTable
 title|titleLink|author|year|reviews|ratings|rating
 The AWK Programming Language|https://www.goodreads.com/search?q=The AWK Programming Language Alfred V. Aho|Alfred V. Aho|1988|11|142|4.25
 Effective awk Programming: Text Processing and Pattern Matching|https://www.goodreads.com/search?q=Effective awk Programming: Text Processing and Pattern Matching Arnold Robbins|Arnold Robbins|1997|2|37|3.97
 GAWK: Effective Awk Programming|https://www.goodreads.com/search?q=GAWK: Effective Awk Programming Arnold D. Robbins|Arnold D. Robbins|1996|0|1|4.00
 AWK Programming: Questions and Answers|https://www.goodreads.com/search?q=AWK Programming: Questions and Answers George Duckett|George Duckett|2014|0|0|0.0
 awk Programmer's Toolbox: Advanced awk and Unix Shell Scripting Examples and Techniques|https://www.goodreads.com/search?q=awk Programmer's Toolbox: Advanced awk and Unix Shell Scripting Examples and Techniques Steve Myers|Steve Myers|2013|0|1|5.00
 Awk Programming (2 Days)|https://www.goodreads.com/search?q=Awk Programming (2 Days) Sim McNally|Sim McNally||0|0|0.0

foldBreak
## Books about awk from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 sed & awk|https://isbndb.com/book/9781565922259|Dougherty, Dale and Robbins, Arnold|1997|O'Reilly Media
 The AWK Programming Language|https://isbndb.com/book/9780201079814|Aho, Alfred V. and Kernighan, Brian W. and Weinberger, Peter J.|1988|Pearson
 Effective awk Programming (3rd Edition)|https://isbndb.com/book/9780596000707|Robbins, Arnold|2001|O'Reilly Media
 Effective awk Programming: Universal Text Processing and Pattern Matching|https://isbndb.com/book/9781491904619|Robbins, Arnold|2015|O'Reilly Media
 Learning AWK Programming: A fast, and simple cutting-edge utility for text-processing on the Unix-like environment|https://isbndb.com/book/9781788397087|Kalkhanda, Shiwang|2018|Packt Publishing
 Learning AWK Programming: A fast, and simple cutting-edge utility for text-processing on the Unix-like environment|https://isbndb.com/book/9781788391030|Kalkhanda, Shiwang|2018-03-26T00:00:01Z|Packt Publishing
 Hands-On Korn Shell and AWK Scripting: Learn Unix and Linux Programming Through Advanced Scripting Examples|https://isbndb.com/book/9781492724049|Williams, Brian|2013|CreateSpace Independent Publishing Platform
 sed & awk|https://isbndb.com/book/9781449396602|Dale Dougherty; Arnold Robbins|19970301|O'Reilly Media, Inc.
 Effective Awk Programming|https://isbndb.com/book/9781578310005|Arnold Robbins|1997|O'reilly Media
 sed & awk|https://isbndb.com/book/9781449301880|Dale Dougherty; Arnold Robbins|19970301|O'Reilly Media, Inc.
 Effective awk Programming|https://isbndb.com/book/9781491904961|Arnold Robbins|20150303|O'Reilly Media, Inc.
 Effective Awk Programming: A User's Guide For Gnu Awk, Edition 1.0.3|https://isbndb.com/book/9780595100347|Arnold D. Robbins|2000|Iuniverse Inc
 Effective awk Programming|https://isbndb.com/book/9781491904978|Arnold Robbins|20150303|O'Reilly Media, Inc.
 Awk Programming (2 Days)|https://isbndb.com/book/9781562439811|Sim Mcnally|2000|D D C Pub
 Gawk: Effective Awk Programming|https://isbndb.com/book/9781447550839|Arnold Robbins|2011|Lulu.com
 sed and awk Pocket Reference|https://isbndb.com/book/9780596529024|Arnold Robbins|20020612|O'Reilly Media, Inc.
 sed and awk Pocket Reference|https://isbndb.com/book/9780596552022|Arnold Robbins|20020612|O'Reilly Media, Inc.
 Effective Awk Programming: A User's Guide For Gnuawk|https://isbndb.com/book/9780916151881|Arnold D. Robbins|1996|Specialized Systems Consultants
 Unix Command Line And Awk Scripting: Harnessing The Power Of Unix And Linux Programming Environments|https://isbndb.com/book/9781492724315|Dmitri Petrovic|2013|Createspace Independent Publishing Platform
 Advanced Unix Shell Scripting: How To Reduce Your Labor And Increase Your Effectiveness Through Mastery Of Unix Shell Scripting And Awk Programming|https://isbndb.com/book/9781484076385|Praveen Puri|2013|Createspace Independent Publishing Platform

foldBreak
## Publications about awk from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 The awk programming language|https://www.semanticscholar.org/paper/eae275046b909dec7a062a35862376c750e60463|A. Aho and B. Kernighan and P. Weinberger|1988|464|23
 Awk — a pattern scanning and processing language|https://www.semanticscholar.org/paper/00ff20695a0b6734a0812593b2373cb929b50b8f|A. Aho and B. Kernighan and P. Weinberger|1979|155|7
 AWK and GNU Octave Programming Languages Integrated with Generic Mapping Tools for Geomorphological Analysis|https://www.semanticscholar.org/paper/a33b25d841b65b2b636e26300d6df6af1a86d29f|Polina Lemenkova|2019|41|0
 A walk through AWK|https://www.semanticscholar.org/paper/7824109be5cdea9d5743cb9a4995a161030fc99e|L. Levy|1983|34|0
 A debugger and assertion checker for the Awk programming language|https://www.semanticscholar.org/paper/c3e0c030141740f5949525feeb173bd81f7f3236|M. Auguston and S. Banerjee and M. Mamnani and G. Nabi and J. Reinfelds and U. Sarkans and I. Strnad|1996|6|0
 From AWK to Google: Peter Weinberger Talks Search|https://www.semanticscholar.org/paper/808ab018a01eac1ba2a8e60fccc6f1d58ed7f787|L. McLaughlin|2005|1|0
 AWK — A Prototyping Language|https://www.semanticscholar.org/paper/3dc3122a21edf010a1f44872b9cc730916f5171d|L. Levy|1987|1|0
 The awk programming language [Book Review]|https://www.semanticscholar.org/paper/9e42b6a3b8e7a39465cb7172391139d07a42e7ca|Brian and Kemighan and P. Weinberger|1989|1|0

keyboardNav crystal.html delphi.html
