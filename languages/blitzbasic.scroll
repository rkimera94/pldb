title BlitzBasic

import settings.scroll
htmlTitle BlitzBasic - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/blitzbasic.pldb

paragraph
 BlitzBasic is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2000">2000</a>.

kpiTable
 #170 <span title="TotalRank: 474 Jobs: 101 Users: 736 Facts: 102 Links: 271">on PLDB</span>
 22 Years Old
 475 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging BlitzBasic">Books</span>
 0 <span title="Academic publications about or leveraging BlitzBasic">Papers</span>
 595 <span title="BlitzBasic repos on GitHub.">Repos</span>







paragraph
 Blitz BASIC refers to the programming language dialect that was interpreted by the first Blitz compilers, devised by New Zealand-based developer Mark Sibly. Being derived from BASIC, Blitz syntax was designed to be easy to pick up for beginners first learning to program.  The languages are game-programming oriented but are often found general-purpose enough to be used for most types of application. <a href="https://en.wikipedia.org/wiki/Blitz_BASIC">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Blitz_BASIC">BlitzBasic Wikipedia page</a>
 - the <a href="https://daemonbite.com/files/linked/BB21Manual.pdf">BlitzBasic docs</a>
 - There are at least 595 BlitzBasic repos on <a href="https://github.com/search?q=language:BlitzBasic">GitHub</a>
 - BlitzBasic first developed in <a href="../lists/originCommunities.html#Blitz_Research">Blitz Research</a>
 - file extensions for BlitzBasic include bb and decls
 - The  Google BigQuery Public Dataset GitHub snapshot shows 417 users using BlitzBasic in 492 repos on <a href="https://api.github.com/search/repositories?q=language:BlitzBasic">GitHub</a>
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/basic.py">syntax highlighting</a> for BlitzBasic
 - GitHub supports <a href="https://github.com/textmate/blitzmax.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for BlitzBasic
 - See also: (10 related languages)<a href="basic.html">BASIC</a>, <a href="linux.html">Linux</a>, <a href="monkey.html">Monkey</a>, <a href="opengl.html">OpenGL</a>, <a href="ascii.html">ASCII</a>, <a href="lua.html">Lua</a>, <a href="unicode.html">Unicode</a>, <a href="csharp.html">C#</a>, <a href="purebasic.html">PureBasic</a>, <a href="ios.html">iOS</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/blitzbasic">Improve our BlitzBasic file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/textmate/blitzmax.tmbundle'>Linguist</a>:
code
 
 Local i, start, result
 
 Local s.Sum3Obj = New Sum3Obj
 
 For i = 1 To 100000
 	s = New Sum3Obj
 	result = Handle Before s
 	Delete s
 Next
 
 start = MilliSecs()
 For i = 1 To 1000000
 	result = Sum3_(MakeSum3Obj(i, i, i))
 Next
 start = MilliSecs() - start
 Print start
 
 start = MilliSecs()
 For i = 1 To 1000000
 	result = Sum3(i, i, i)
 Next
 start = MilliSecs() - start
 Print start
 
 WaitKey
 End
 
 
 Function Sum3(a, b, c)
 	Return a + b + c
 End Function
 
 
 Type Sum3Obj
 	Field isActive
 	Field a, b, c
 End Type
 
 Function MakeSum3Obj(a, b, c)
 	Local s.Sum3Obj = Last Sum3Obj
 	If s\isActive Then s = New Sum3Obj
 	s\isActive = True
 	s\a = a
 	s\b = b
 	s\c = c
 	
 	Restore label
 	Read foo
 	
 	Return Handle(s)
 End Function
 
 .label
 Data (10 + 2), 12, 14
 :
 Function Sum3_(a_)
 	Local a.Sum3Obj = Object.Sum3Obj a_
 	Local return_ =  a\a + a\b + a\c
 	Insert a Before First Sum3Obj :: a\isActive = False
 	Return return_
 End Function
 
 
 ;~IDEal Editor Parameters:
 ;~C#Blitz3D

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Blitz_BASIC'>Wikipedia</a>:
code
 AppTitle = &quot;Binary Clock&quot;
  Graphics 145,85
 
  secondtimer = CreateTimer(2)
  
  Repeat
          Hour = CurrentTime()[..2].ToInt()
          Minute = CurrentTime()[4..6].ToInt()
          Second = CurrentTime()[6..].ToInt()
 
          If Hour &gt;= 12 Then PM = 1
          If Hour &gt; 12 Then Hour = Hour - 12
          If Hour = 0 Then Hour = 12
 
          &#39;should do this otherwise the PM dot will be
          &#39;Left up once the clock rolls past midnight!
          Cls
 
          SetColor(0,255,0) &#39;make the text green For the PM part
          If PM  = 1 Then DrawText &quot;PM&quot;,5,5
          &#39;set the text colour back To white For the rest
          SetColor(255,255,255)
 
          For bit=0 Until 6
                  xpos=20*(6-bit)
                  binaryMask=2^bit
                  &#39;do hours
                  If (bit&lt;4)
                          If (hour &amp; binaryMask)
                                  DrawText &quot;1&quot;,xpos,5
                          Else
                                  DrawText &quot;0&quot;,xpos,5
                          EndIf
                  EndIf
 
                  &#39;do the minutes
                  If (minute &amp; binaryMask)
                          DrawText &quot;1&quot;, xpos,25
                  Else
                          DrawText &quot;0&quot;, xpos,25
                  EndIf
 
                  &#39;do the seconds
                  If (second &amp; binaryMask)
                          DrawText &quot;1&quot;,xpos,45
                  Else
                          DrawText &quot;0&quot;,xpos,45
                  EndIf
          Next
 
          &#39;make the text red For the decimal time
          SetColor(255,0,0)
          DrawText &quot;Decimal: &quot; + CurrentTime(),5,65
          &#39;set the text back To white For the rest
          SetColor(255,255,255)
 
  	 Flip
 
          &#39;will wait half a second
          WaitTimer(secondTimer)
  	 If KeyHit(KEY_ESCAPE) Then Exit
  Forever





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Binary Literals
  FeatureLink ../languages/binary-numbers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Booleans
  FeatureLink ../languages/booleans-feature.html
  Supported ✓
  Example
  Token True False













keyboardNav jison.html limbo.html
