title Bluespec

import settings.scroll
htmlTitle Bluespec - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/bluespec.pldb

paragraph
 Bluespec is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2000">2000</a>.

kpiTable
 #402 <span title="TotalRank: 850 Jobs: 62 Users: 847 Facts: 123 Links: 665">on PLDB</span>
 22 Years Old
 345 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Bluespec">Books</span>
 0 <span title="Academic publications about or leveraging Bluespec">Papers</span>
 275 <span title="Bluespec repos on GitHub.">Repos</span>







paragraph
 Bluespec, Inc. is a semiconductor tool design company co-founded by Prof. Arvind of MIT in June 2003. <a href="https://en.wikipedia.org/wiki/Bluespec">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Bluespec">Bluespec Wikipedia page</a>
 - There are at least 275 Bluespec repos on <a href="https://github.com/search?q=language:Bluespec">GitHub</a>
 - Bluespec first developed in <a href="../lists/originCommunities.html#Bluespec,_Inc">Bluespec, Inc</a>
 - file extensions for Bluespec include bsv
 - The  Google BigQuery Public Dataset GitHub snapshot shows 32 users using Bluespec in 51 repos on <a href="https://api.github.com/search/repositories?q=language:Bluespec">GitHub</a>
 - GitHub supports <a href="https://github.com/thotypous/sublime-bsv" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Bluespec
 - See also: <a href="haskell.html">Haskell</a>, <a href="systemverilog.html">SystemVerilog</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/bluespec">Improve our Bluespec file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/thotypous/sublime-bsv'>Linguist</a>:
code
 package TbTL;
 
 import TL::*;
 
 interface Lamp;
    method Bool changed;
    method Action show_offs;
    method Action show_ons;
    method Action reset;
 endinterface
 
 module mkLamp#(String name, Bool lamp)(Lamp);
    Reg#(Bool) prev &lt;- mkReg(False);
 
    method changed = (prev != lamp);
 
    method Action show_offs;
       if (prev &amp;&amp; !lamp)
       $write (name + &quot; off, &quot;);
    endmethod
 
    method Action show_ons;
       if (!prev &amp;&amp; lamp)
       $write (name + &quot; on, &quot;);
    endmethod
 
    method Action reset;
       prev &lt;= lamp;
    endmethod
 endmodule
 
 
 (* synthesize *)
 module mkTest();
    let dut &lt;- sysTL;
 
    Reg#(Bit#(16)) ctr &lt;- mkReg(0);
 
    Reg#(Bool) carN &lt;- mkReg(False);
    Reg#(Bool) carS &lt;- mkReg(False);
    Reg#(Bool) carE &lt;- mkReg(False);
    Reg#(Bool) carW &lt;- mkReg(False);
 
    Lamp lamps[12];
 
    lamps[0] &lt;- mkLamp(&quot;0:  NS  red  &quot;, dut.lampRedNS);
    lamps[1] &lt;- mkLamp(&quot;1:  NS  amber&quot;, dut.lampAmberNS);
    lamps[2] &lt;- mkLamp(&quot;2:  NS  green&quot;, dut.lampGreenNS);
    lamps[3] &lt;- mkLamp(&quot;3:  E   red  &quot;, dut.lampRedE);
    lamps[4] &lt;- mkLamp(&quot;4:  E   amber&quot;, dut.lampAmberE);
    lamps[5] &lt;- mkLamp(&quot;5:  E   green&quot;, dut.lampGreenE);
    lamps[6] &lt;- mkLamp(&quot;6:  W   red  &quot;, dut.lampRedW);
    lamps[7] &lt;- mkLamp(&quot;7:  W   amber&quot;, dut.lampAmberW);
    lamps[8] &lt;- mkLamp(&quot;8:  W   green&quot;, dut.lampGreenW);
 
    lamps[9]  &lt;- mkLamp(&quot;9:  Ped red  &quot;, dut.lampRedPed);
    lamps[10] &lt;- mkLamp(&quot;10: Ped amber&quot;, dut.lampAmberPed);
    lamps[11] &lt;- mkLamp(&quot;11: Ped green&quot;, dut.lampGreenPed);
 
    rule start (ctr == 0);
       $dumpvars;
    endrule
 
    rule detect_cars;
       dut.set_car_state_N(carN);
       dut.set_car_state_S(carS);
       dut.set_car_state_E(carE);
       dut.set_car_state_W(carW);
    endrule
 
    rule go;
       ctr &lt;= ctr + 1;
       if (ctr == 5000) carN &lt;= True;
       if (ctr == 6500) carN &lt;= False;
       if (ctr == 12_000) dut.ped_button_push;
    endrule
 
    rule stop (ctr &gt; 32768);
       $display(&quot;TESTS FINISHED&quot;);
       $finish(0);
    endrule
 
    function do_offs(l) = l.show_offs;
       function do_ons(l) = l.show_ons;
       function do_reset(l) = l.reset;
 
       function do_it(f);
          action
          for (Integer i=0; i&lt;12; i=i+1)
             f(lamps[i]);
          endaction
       endfunction
 
       function any_changes();
          Bool b = False;
          for (Integer i=0; i&lt;12; i=i+1)
              b = b || lamps[i].changed;
          return b;
       endfunction
 
       rule show (any_changes());
       do_it(do_offs);
       do_it(do_ons);
       do_it(do_reset);
       $display(&quot;(at time %d)&quot;, $time);
    endrule
 endmodule
 
 endpackage
 





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Booleans
  FeatureLink ../languages/booleans-feature.html
  Supported ✓
  Example
  Token True False
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   (* A comment
   *)
  Token 
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   (* A comment
   *)
  Token (* *)
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav commodore-basic.html true-basic.html
