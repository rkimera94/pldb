title Brainfuck

import settings.scroll
htmlTitle Brainfuck - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/brainfuck.pldb

paragraph
 Brainfuck is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1993">1993</a> by <a href="../lists/creators.html#Urban_Müller">Urban Müller</a>.

kpiTable
 #146 <span title="TotalRank: 426 Jobs: 101 Users: 149 Facts: 181 Links: 176">on PLDB</span>
 29 Years Old
 6.5k <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Brainfuck">Books</span>
 0 <span title="Academic publications about or leveraging Brainfuck">Papers</span>
 2k <span title="Brainfuck repos on GitHub.">Repos</span>

paragraph
 Try now: <a href="https://riju.codes/brainf">Riju</a> · <a href="https://tio.run/#brainfuck">TIO</a> · <a href="https://repl.it/languages/brainfuck">Replit</a>





paragraph
 Brainfuck is an esoteric programming language created in 1993 by Urban Müller, and notable for its extreme minimalism. The language consists of only eight simple commands and an instruction pointer. While it is fully Turing-complete, it is not intended for practical use, but to challenge and amuse programmers. <a href="https://en.wikipedia.org/wiki/Brainfuck">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Brainfuck">Brainfuck Wikipedia page</a>
 - There are at least 1,631 Brainfuck repos on <a href="https://github.com/search?q=language:Brainfuck">GitHub</a>
 - Brainfuck first developed in <a href="../lists/originCommunities.html#Sentience_Politics">Sentience Politics</a>
 - file extensions for Brainfuck include b and bf
 - The  Google BigQuery Public Dataset GitHub snapshot shows 790 users using Brainfuck in 832 repos on <a href="https://api.github.com/search/repositories?q=language:Brainfuck">GitHub</a>
 - There is an <a href="https://packages.ubuntu.com/jammy/bf">Ubuntu package</a> for Brainfuck
 - Here is an <a href="antlr.html">ANTLR</a> <a href="https://github.com/antlr/grammars-v4/tree/master/brainfuck">grammar</a> for Brainfuck
 - There is a <a href="codemirror.html">CodeMirror</a> <a href="https://github.com/codemirror/codemirror5/tree/master/mode/brainfuck">package</a> for syntax highlighting Brainfuck
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/esoteric.py">syntax highlighting</a> for Brainfuck
 - GitHub supports <a href="https://github.com/Drako/SublimeBrainfuck" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Brainfuck
 - Brainfuck appears in the <a href="https://github.com/mame/quine-relay">Quine Relay</a> project
 - There is 1 <a href="jupyter-notebook.html">Jupyter</a> <a href="https://github.com/robbielynch/ibrainfuck">Kernel</a> for Brainfuck
 - See also: (2 related languages)<a href="ascii.html">ASCII</a>, <a href="c.html">C</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/brainfuck">Improve our Brainfuck file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://riju.codes/brainf'>Riju</a>:
code
 ++++++++
 [
     &gt;++++
     [
         &gt;++
         &gt;+++
         &gt;+++
         &gt;+
         &lt;&lt;&lt;&lt;-
     ]
     &gt;+
     &gt;+
     &gt;-
     &gt;&gt;+
     [&lt;]
 
     &lt;-
 ]
 
 &gt;&gt;.
 &gt;---.
 +++++++..+++.
 &gt;&gt;.
 &lt;-.
 &lt;.
 +++.------.--------.
 &gt;&gt;+.
 &gt;++.
 

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/b/Brainfuck.bf'>hello-world</a>:
code
 -[-------&gt;+&lt;]&gt;-.-[-&gt;+++++&lt;]&gt;++.+++++++..+++.[---&gt;+&lt;]&gt;-----.---[-&gt;+++&lt;]&gt;.-[---&gt;+&lt;]&gt;---.+++.------.--------.

exampleCodeHeader Example from <a href='http://helloworldcollection.de/#Brainfuck'>the Hello World Collection</a>:
code
 Hello World in Brainfuck
 
 ++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++
 ..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.

exampleCodeHeader Example from <a href='https://github.com/Drako/SublimeBrainfuck'>Linguist</a>:
code
 // Hello World
 
 ++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Brainfuck'>Wikipedia</a>:
code
 -,+[                         Read first character and start outer character reading loop
     -[                       Skip forward if character is 0
         &gt;&gt;++++[&gt;++++++++&lt;-]  Set up divisor (32) for division loop
                                (MEMORY LAYOUT: dividend copy remainder divisor quotient zero zero)
         &lt;+&lt;-[                Set up dividend (x minus 1) and enter division loop
             &gt;+&gt;+&gt;-[&gt;&gt;&gt;]      Increase copy and remainder / reduce divisor / Normal case: skip forward
             &lt;[[&gt;+&lt;-]&gt;&gt;+&gt;]    Special case: move remainder back to divisor and increase quotient
             &lt;&lt;&lt;&lt;&lt;-           Decrement dividend
         ]                    End division loop
     ]&gt;&gt;&gt;[-]+                 End skip loop; zero former divisor and reuse space for a flag
     &gt;--[-[&lt;-&gt;+++[-]]]&lt;[         Zero that flag unless quotient was 2 or 3; zero quotient; check flag
         ++++++++++++&lt;[       If flag then set up divisor (13) for second division loop
                                (MEMORY LAYOUT: zero copy dividend divisor remainder quotient zero zero)
             &gt;-[&gt;+&gt;&gt;]         Reduce divisor; Normal case: increase remainder
             &gt;[+[&lt;+&gt;-]&gt;+&gt;&gt;]   Special case: increase remainder / move it back to divisor / increase quotient
             &lt;&lt;&lt;&lt;&lt;-           Decrease dividend
         ]                    End division loop
         &gt;&gt;[&lt;+&gt;-]             Add remainder back to divisor to get a useful 13
         &gt;[                   Skip forward if quotient was 0
             -[               Decrement quotient and skip forward if quotient was 1
                 -&lt;&lt;[-]&gt;&gt;     Zero quotient and divisor if quotient was 2
             ]&lt;&lt;[&lt;&lt;-&gt;&gt;-]&gt;&gt;    Zero divisor and subtract 13 from copy if quotient was 1
         ]&lt;&lt;[&lt;&lt;+&gt;&gt;-]          Zero divisor and add 13 to copy if quotient was 0
     ]                        End outer skip loop (jump to here if ((character minus 1)/32) was not 2 or 3)
     &lt;[-]                     Clear remainder from first division if second division was skipped
     &lt;.[-]                    Output ROT13ed character from copy and clear it
     &lt;-,+                     Read next character
 ]                            End character reading loop



















keyboardNav standard-ml.html pl-sql.html
