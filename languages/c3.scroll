title c3

import settings.scroll
htmlTitle c3 - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/c3.pldb

paragraph
 c3 is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2019">2019</a> by <a href="../lists/creators.html#Christoffer_Lerno">Christoffer Lerno</a>.

kpiTable
 #948 <span title="TotalRank: 1498 Jobs: 101 Users: 2016 Facts: 445 Links: 952">on PLDB</span>
 3 Years Old
 29 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging c3">Books</span>
 0 <span title="Academic publications about or leveraging c3">Papers</span>







paragraph
 C3 is a systems language based on C. It intends tries to be a short step up from C rather than to replace it with a new paradigm or completely new syntax. C3 is built on top of the C2 lang project by Bas van den Berg. It goes substantially further in regards to error handling, macros, generics and strings. Although it might have some breaking changes, it can – at least currently – be considered a superset of C2.

list
 - the <a href="http://www.c3-lang.org/">c3 website</a>
 - c3 is developed on <a href="https://github.com/c3lang/c3docs">GitHub</a> and has 6 stars
 - c3 first developed in <a href="../lists/originCommunities.html#The_C3_Language_Project">The C3 Language Project</a>
 - <a href="http://www.c3-lang.org/">c3-lang.org</a> was registered in 2019
 - Read more about c3 on the web: <a href="https://www.reddit.com/r/ProgrammingLanguages/comments/ex7hpp/february_2020_monthly_what_are_you_working_on/fgdpuki/">1</a>,<a href="https://news.ycombinator.com/item?id=32005678">2</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/c3">Improve our c3 file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 module stack &lt;Type&gt;;
 // Above: the parameterized type is applied to the entire module.
 import std::mem;
 
 struct Stack
 {
     usize capacity;
     usize size;
     Type* elems;
 }
 
 // The type methods offers dot syntax calls,
 // so this function can either be called 
 // Stack.push(&amp;my_stack, ...) or
 // my_stack.push(...)
 fn void Stack.push(Stack* this, Type element)
 {
     if (this.capacity == this.size)
     {
         this.capacity *= 2;
         this.elems = mem::realloc(this.elems, $sizeof(Type) * this.capacity);
     }
     this.elems[this.size++] = element;
 }
 
 fn Type Stack.pop(Stack* this)
 {
     assert(this.size &gt; 0);
     return this.elems[--this.size];
 }
 
 fn bool Stack.empty(Stack* this)
 {
     return !this.size;
 }





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav opal.html bee.html
