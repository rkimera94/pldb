title CGOL

import settings.scroll
htmlTitle CGOL - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/cgol.pldb

paragraph
 CGOL is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1973">1973</a> by <a href="../lists/creators.html#Vaughan_Ronald_Pratt">Vaughan Ronald Pratt</a>.

kpiTable
 #1896 <span title="TotalRank: 2364 Jobs: 69 Users: 1719 Facts: 1343 Links: 952">on PLDB</span>
 49 Years Old
 55 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging CGOL">Books</span>
 0 <span title="Academic publications about or leveraging CGOL">Papers</span>







paragraph
 CGOL (pronounced "see goll") is an alternative syntax featuring an extensible algebraic notation for the Lisp programming language. It was designed for MACLISP by Vaughan Pratt and subsequently ported to Common Lisp.The notation of CGOL is a traditional infix notation, in the style of ALGOL, rather than Lisp's traditional, uniformly-parenthesized prefix notation syntax. The CGOL parser is based on Pratt's design for top-down operator precedence parsing, sometimes informally referred to as a "Pratt parser". <a href="https://en.wikipedia.org/wiki/CGOL">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/CGOL">CGOL Wikipedia page</a>
 - CGOL first developed in <a href="../lists/originCommunities.html#University_of_California,_Berkeley">University of California, Berkeley</a>
 - CGOL is listed on <a href="https://hopl.info/showlanguage.prx?exp=750">HOPL</a>
 - Read more about CGOL on the web: <a href="https://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/lisp/code/syntax/cgol/0.html">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/cgol">Improve our CGOL file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 for i in 1 to n do
   for k in 1 to n do
     (ac := 0;
      for j in 1 to n do
         ac := ac + a(i,j)*b(j,k);
      c(i,k) := ac)



















keyboardNav obj-programming-language.html zeno.html
