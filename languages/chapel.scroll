title Chapel

import settings.scroll
htmlTitle Chapel - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/chapel.pldb

paragraph
 Chapel is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2004">2004</a> by <a href="../lists/creators.html#David_Callahan">David Callahan</a> and <a href="../lists/creators.html#Hans_Zima">Hans Zima</a> and <a href="../lists/creators.html#Brad_Chamberlain">Brad Chamberlain</a> and <a href="../lists/creators.html#John_Plevyak">John Plevyak</a>.

kpiTable
 #110 <span title="TotalRank: 317 Jobs: 101 Users: 85 Facts: 160 Links: 131">on PLDB</span>
 18 Years Old
 16.2k <span title="Crude user estimate from a linear model.">Users</span>
 2 <span title="Books about or leveraging Chapel">Books</span>
 19 <span title="Academic publications about or leveraging Chapel">Papers</span>
 212 <span title="Chapel repos on GitHub.">Repos</span>

paragraph
 Try now: <a href="https://tio.run/#chapel">TIO</a>





paragraph
 Chapel, the Cascade High Productivity Language, is a parallel programming language developed by Cray. It is being developed as part of the Cray Cascade project, a participant in DARPA's High Productivity Computing Systems (HPCS) program, which had the goal of increasing supercomputer productivity by the year 2010. It is being developed as an open source project, under version 2 of the Apache license.. <a href="https://en.wikipedia.org/wiki/Chapel_(programming_language)">Read more on Wikipedia...</a>

list
 - the <a href="https://chapel-lang.org/">Chapel website</a>
 - the <a href="https://en.wikipedia.org/wiki/Chapel_(programming_language)">Chapel Wikipedia page</a>
 - Chapel is developed on <a href="https://github.com/chapel-lang/chapel">GitHub</a> and has 1,454 stars
 - There are at least 212 Chapel repos on <a href="https://github.com/search?q=language:Chapel">GitHub</a>
 - Chapel first developed in <a href="../lists/originCommunities.html#Cray">Cray</a>
 - file extensions for Chapel include chpl
 - Chapel is written in <a href="chapel.html">Chapel</a>
 - the Chapel team is on <a href="https://twitter.com/ChapelLanguage">Twitter</a>
 - The  Google BigQuery Public Dataset GitHub snapshot shows 50 users using Chapel in 55 repos on <a href="https://api.github.com/search/repositories?q=language:Chapel">GitHub</a>
 - There are 12,989 members in the <a href="https://reddit.com/r/chapel">Chapel subreddit</a>
 - There are 11 <a href="https://projecteuler.net/language=Chapel">Project Euler</a> users using Chapel
 - Explore Chapel snippets on <a href="http://www.rosettacode.org/wiki/Category:Chapel">Rosetta Code</a>
 - Chapel is listed on <a href="https://hopl.info/showlanguage.prx?exp=8171">HOPL</a>
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/chapel.py">syntax highlighting</a> for Chapel
 - GitHub supports <a href="https://github.com/chapel-lang/chapel-tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Chapel
 - <a href="https://chapel-lang.org/">chapel-lang.org</a> was registered in 2014
 - See also: (9 related languages)<a href="ada.html">Ada</a>, <a href="csharp.html">C#</a>, <a href="c.html">C</a>, <a href="fortran.html">Fortran</a>, <a href="java.html">Java</a>, <a href="fortress.html">Fortress</a>, <a href="unified-parallel-c.html">UPC</a>, <a href="x10.html">X10</a>, <a href="isbn.html">ISBN</a>
 - Read more about Chapel on the web: <a href="https://ieeexplore.ieee.org/document/1299190">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/chapel">Improve our Chapel file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/c/Chapel.chpl'>hello-world</a>:
code
 writeln(&quot;Hello World&quot;);
 

exampleCodeHeader Example from <a href='https://github.com/chapel-lang/chapel-tmbundle'>Linguist</a>:
code
 writeln(&quot;Hello, world!&quot;);    // print &#39;Hello, world!&#39; to the console
 



subsection <a href="../lists/keywords.html?filter=chapel">Keywords</a> in Chapel
paragraph
 _ align atomic begin break by class cobegin coforall config const continue delete dmapped do domain else enum export extern for forall if in index inline inout iter label let local module new nil on otherwise out param proc record reduce ref return scan select serial single sparse subdomain sync then type union use var when where while yield zip

foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Binary Literals
  FeatureLink ../languages/binary-numbers-feature.html
  Supported ✓
  Example
   // 0[bB][01]+
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
   // [0-9]+
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
   // (\d*\.\d+)([eE][+-]?[0-9]+)?i?
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
   // 0[xX][0-9a-fA-F]+
  Token 
 row
  Feature Octals
  FeatureLink ../languages/octals-feature.html
  Supported ✓
  Example
   // 0[oO][0-7]+
  Token 
 row
  Feature Conditionals
  FeatureLink ../languages/conditionals-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Constants
  FeatureLink ../languages/constants-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Classes
  FeatureLink ../languages/classes-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature While Loops
  FeatureLink ../languages/while-loops-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   /* A comment
   */
  Token /* */
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token writeln
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 





foldBreak
subsection Books about Chapel from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Languages And Compilers For Parallel Computing: 11th International Workshop, Lcpc'98, Chapel Hill, Nc, Usa, August 7-9, 1998, Proceedings (lecture Notes In Computer Science)|https://isbndb.com/book/9783540664260|Chatterjee and J.f.|2008|Springer
 The Hydra Protocol: A Jim Chapel Mission (Jim Chapel Missions)|https://isbndb.com/book/9780062248800|Wellington, David|2014|William Morrow


foldBreak
subsection Publications about Chapel from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Parallel Programmability and the Chapel Language|https://www.semanticscholar.org/paper/24f093129e03eb7e8911d9556d70d90153e81584|B. Chamberlain and D. Callahan and H. Zima|2007|948|67
 Performance Portability with the Chapel Language|https://www.semanticscholar.org/paper/96973447980a120734a8b1368b566eb159b87b70|A. Sidelnik and Saeed Maleki and B. Chamberlain and M. Garzarán and D. Padua|2012|46|2
 Global Data Re-allocation via Communication Aggregation in Chapel|https://www.semanticscholar.org/paper/aba4addd7f8317e721eba2cffcd124a1dd55f38b|Alberto Sanz and R. Asenjo and Juan López and R. Larrosa and A. Navarro and V. Litvinov and Sung-Eun Choi and B. Chamberlain|2012|21|3
 Iterators in Chapel|https://www.semanticscholar.org/paper/f9d65fcdcb1bf8fa7b1de7c6e1b8398132f2d37c|Mackale Joyner and B. Chamberlain and Steven J. Deitz|2006|17|1
 An Empirical Performance Study of Chapel Programming Language|https://www.semanticscholar.org/paper/66b83390781ac875d253f48c219db3d0939493c1|N. Dun and K. Taura|2012|13|1
 Automated Verification of Chapel Programs Using Model Checking and Symbolic Execution|https://www.semanticscholar.org/paper/ab3d61bcf5bab68d67814c101e13e68777008f18|Timothy K. Zirkel and Stephen F. Siegel and Timothy McClory|2013|11|1
 Comparative Performance and Optimization of Chapel in Modern Manycore Architectures|https://www.semanticscholar.org/paper/2013fa22a8f0dd21d543b1198696e85cb38a7548|Engin Kayraklioglu and Wo Chang and T. El-Ghazawi|2017|9|1
 Affine Loop Optimization Based on Modulo Unrolling in Chapel|https://www.semanticscholar.org/paper/4cd64ddd973fcec98e20062ac2b1fd5ee8e47794|Aroon Sharma and Darren Smith and Joshua Koehler and R. Barua and Michael P. Ferguson|2014|8|0
 PGAS Access Overhead Characterization in Chapel|https://www.semanticscholar.org/paper/cdc0d2b153f15c52367e319ddb34acbbf4b57e1b|Engin Kayraklioglu and O. Serres and Ahmad Anbar and Hashem Elezabi and T. El-Ghazawi|2016|7|0
 Development of Parallel CFD Applications with the Chapel Programming Language|https://www.semanticscholar.org/paper/0db7434a6fb2dfb0bfb674b9865d5bdafcff07c2|M. Parenteau and S. Bourgault-Cote and Frédéric Plante and Engin Kayraklioglu and E. Laurendeau|2020|7|0
 Data Centric Performance Measurement Techniques for Chapel Programs|https://www.semanticscholar.org/paper/2342215a29e15e7d2c9ac9eb63ca5db4a87cac3a|Hui Zhang and J. Hollingsworth|2017|6|0
 Assessing Memory Access Performance of Chapel through Synthetic Benchmarks|https://www.semanticscholar.org/paper/797dfc31a180c9b3de24b3f587292e201c7f7e42|Engin Kayraklioglu and T. El-Ghazawi|2015|3|0
 Scheduling Chapel Tasks with Qthreads on Manycore: A Tale of Two Schedulers|https://www.semanticscholar.org/paper/10858d712705556b133407d1434352c42d0cfba6|N. Evans and Stephen L. Olivier and R. Barrett and George Stelle|2017|3|0
 Towards a GraphBLAS Library in Chapel|https://www.semanticscholar.org/paper/79ad275569d313354c203623eb321817542de819|A. Azad and A. Buluç|2017|3|0
 Transparently Resilient Task Parallelism for Chapel|https://www.semanticscholar.org/paper/2edf5b50f4845936aab09ecfa806219cd14437b7|Konstantina Panagiotopoulou and Hans-Wolfgang Loidl|2016|2|0
 Translating Chapel to Use FREERIDE: A Case Study in Using an HPC Language for Data-Intensive Computing|https://www.semanticscholar.org/paper/2d2a24c4a338f0d65d74e6b283c026ab093ff857|Bin Ren and G. Agrawal and B. Chamberlain and Steven J. Deitz|2011|2|0
 Graph Algorithms in PGAS: Chapel and UPC++|https://www.semanticscholar.org/paper/cf83d871185279c6b4108126b5710fc1cfd70376|Louis Jenkins and J. Firoz and Marcin Zalewski and C. Joslyn and Mark Raugas|2019|2|0
 Towards High Productivity and Performance for Irregular Applications in Chapel|https://www.semanticscholar.org/paper/8b1fb263b1e8b7ae3edf81ac2b2d3a13d18be553|Thomas B. Rolinger and Joseph Craft and Christopher D. Krieger and A. Sussman|2021|2|0
 ChplBlamer: A Data-centric and Code-centric Combined Profiler for Multi-locale Chapel Programs|https://www.semanticscholar.org/paper/4fe4bc6f6332e63b653b1f4ffe73efedec7bdc6c|Hui Zhang and J. Hollingsworth|2018|1|0






keyboardNav sqlite.html haxe.html
