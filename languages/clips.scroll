title CLIPS

import settings.scroll
htmlTitle CLIPS - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/clips.pldb

paragraph
 CLIPS, aka C Language Integrated Production System, is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1985">1985</a>.

kpiTable
 #242 <span title="TotalRank: 561 Jobs: 62 Users: 625 Facts: 13 Links: 486">on PLDB</span>
 37 Years Old
 651 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging CLIPS">Books</span>
 3 <span title="Academic publications about or leveraging CLIPS">Papers</span>
 2k <span title="CLIPS repos on GitHub.">Repos</span>

paragraph
 Try now: <a href="https://tio.run/#clips">TIO</a>





paragraph
 CLIPS is a public domain software tool for building expert systems.  The name is an acronym for "C Language Integrated Production System." The syntax and name was inspired by Charles Forgy's OPS ("Official Production System," although there was nothing really official about it). The first versions of CLIPS were developed starting in 1985 at NASA-Johnson Space Center (as an alternative for existing system ART*Inference) until the mid-1990s when the development group's responsibilities ceased to focus on expert system technology. <a href="https://en.wikipedia.org/wiki/CLIPS">Read more on Wikipedia...</a>

list
 - the <a href="http://www.clipsrules.net/">CLIPS website</a>
 - the <a href="https://en.wikipedia.org/wiki/CLIPS">CLIPS Wikipedia page</a>
 - There are at least 1,638 CLIPS repos on <a href="https://github.com/search?q=language:CLIPS">GitHub</a>
 - CLIPS first developed in <a href="../lists/originCommunities.html#NASA">NASA</a>
 - file extensions for CLIPS include clp
 - The  Google BigQuery Public Dataset GitHub snapshot shows 901 users using CLIPS in 991 repos on <a href="https://api.github.com/search/repositories?q=language:CLIPS">GitHub</a>
 - Explore CLIPS snippets on <a href="http://www.rosettacode.org/wiki/Category:CLIPS">Rosetta Code</a>
 - CLIPS is listed on <a href="https://hopl.info/showlanguage.prx?exp=1759">HOPL</a>
 - GitHub supports <a href="https://github.com/psicomante/CLIPS-sublime" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for CLIPS
 - <a href="http://www.clipsrules.net/">clipsrules.net</a> was registered in 2016
 - See also: <a href="ops5.html">OPS5</a>, <a href="c.html">C</a>, <a href="lisp.html">Lisp</a>, <a href="java.html">Java</a>, <a href="isbn.html">ISBN</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/clips">Improve our CLIPS file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
  (deftemplate car_problem
      (slot name)
      (slot status))
 
  (deffacts trouble_shooting
      (car_problem (name ignition_key) (status on))
      (car_problem (name engine) (status wont_start))
      (car_problem (name headlights) (status work)))
 
  (defrule rule1
      (car_problem (name ignition_key) (status on))
      (car_problem (name engine) (status wont_start))
       =&gt;
      (assert (car_problem (name starter) (status faulty))))

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/c/CLIPS.clips'>hello-world</a>:
code
 (defrule hw
     (f ?x)
 =&gt;
     (printout t ?x crlf))
 
 (assert (f &quot;Hello World&quot;))
 
 (run)
 

exampleCodeHeader Example from <a href='https://github.com/psicomante/CLIPS-sublime'>Linguist</a>:
code
 ;;; http://www.angusj.com/sudoku/hints
 ;;; http://www.scanraid.com/BasicStrategies.htm
 ;;; http://www.sudokuoftheday.com/pages/techniques-overview
 ;;; http://www.sudokuonline.us/sudoku_solving_techniques
 ;;; http://www.sadmansoftware.com/sudoku/techniques.htm
 ;;; http://www.krazydad.com/blog/2005/09/29/an-index-of-sudoku-strategies/
 
 ;;; #######################
 ;;; DEFTEMPLATES &amp; DEFFACTS
 ;;; #######################
 
 (deftemplate possible
    (slot row)
    (slot column)
    (slot value)
    (slot group)
    (slot id))
    
 (deftemplate impossible
    (slot id)
    (slot value)
    (slot priority)
    (slot reason))
    
 (deftemplate technique-employed
    (slot reason)
    (slot priority))
 
 (deftemplate technique
    (slot name)
    (slot priority))
    
 (deffacts startup
    (phase grid-values))
 
 (deftemplate size-value
    (slot size)
    (slot value))
    
 (deffacts values
    (size-value (size 1) (value 1))
    (size-value (size 2) (value 2))
    (size-value (size 2) (value 3))
    (size-value (size 2) (value 4))
    (size-value (size 3) (value 5))
    (size-value (size 3) (value 6))
    (size-value (size 3) (value 7))
    (size-value (size 3) (value 8))
    (size-value (size 3) (value 9))
    (size-value (size 4) (value 10))
    (size-value (size 4) (value 11))
    (size-value (size 4) (value 12))
    (size-value (size 4) (value 13))
    (size-value (size 4) (value 14))
    (size-value (size 4) (value 15))
    (size-value (size 4) (value 16))
    (size-value (size 5) (value 17))
    (size-value (size 5) (value 18))
    (size-value (size 5) (value 19))
    (size-value (size 5) (value 20))
    (size-value (size 5) (value 21))
    (size-value (size 5) (value 22))
    (size-value (size 5) (value 23))
    (size-value (size 5) (value 24))
    (size-value (size 5) (value 25)))
    
 ;;; ###########
 ;;; SETUP RULES
 ;;; ###########
 
 ;;; ***********
 ;;; stress-test
 ;;; ***********
 
 (defrule stress-test
    
    (declare (salience 10))
    
    (phase match)
    
    (stress-test)
    
    (priority ?last)
    
    (not (priority ?p&amp;:(&gt; ?p ?last)))
    
    (technique (priority ?next&amp;:(&gt; ?next ?last)))
    
    (not (technique (priority ?p&amp;:(&gt; ?p ?last)&amp;:(&lt; ?p ?next))))
    
    =&gt;
    
    (assert (priority ?next)))
    
 ;;; *****************
 ;;; enable-techniques
 ;;; *****************
 
 (defrule enable-techniques
 
    (declare (salience 10))
    
    (phase match)
    
    (size ?)
    
    (not (possible (value any)))
    
    =&gt;
    
    (assert (priority 1)))
 
 ;;; **********
 ;;; expand-any
 ;;; **********
 
 (defrule expand-any
 
    (declare (salience 10))
 
    (phase expand-any)
    
    ?f &lt;- (possible (row ?r) (column ?c) (value any) (group ?g) (id ?id))
   
    (not (possible (value any) (id ?id2&amp;:(&lt; ?id2 ?id))))
    
    (size ?s)
    
    (size-value (size ?as&amp;:(&lt;= ?as ?s)) (value ?v))
    
    (not (possible (row ?r) (column ?c) (value ?v)))
   
    (not (and (size-value (value ?v2&amp;:(&lt; ?v2 ?v)))
                
              (not (possible (row ?r) (column ?c) (value ?v2)))))
    
    =&gt;
    
    (assert (possible (row ?r) (column ?c) (value ?v) (group ?g) (id ?id))))
    
 ;;; *****************
 ;;; position-expanded
 ;;; *****************
 
 (defrule position-expanded
 
    (declare (salience 10))
 
    (phase expand-any)
    
    ?f &lt;- (possible (row ?r) (column ?c) (value any) (group ?g) (id ?id))
      
    (size ?s)
    
    (not (and (size-value (size ?as&amp;:(&lt;= ?as ?s)) (value ?v))
    
              (not (possible (row ?r) (column ?c) (value ?v)))))
 
    =&gt;
    
    (retract ?f))
    
 ;;; ###########
 ;;; PHASE RULES
 ;;; ###########
 
 ;;; ***************
 ;;; expand-any-done
 ;;; ***************
 
 (defrule expand-any-done
 
    (declare (salience 10))
 
    ?f &lt;- (phase expand-any)
 
    (not (possible (value any)))
    
    =&gt;
    
    (retract ?f)
    
    (assert (phase initial-output))
    (assert (print-position 1 1)))
    
 ;;; ***********
 ;;; begin-match
 ;;; ***********
 
 (defrule begin-match
 
    (declare (salience -20))
    
    ?f &lt;- (phase initial-output)
       
    =&gt;
    
    (retract ?f)
    
    (assert (phase match)))
 
 ;;; *****************
 ;;; begin-elimination
 ;;; *****************
 
 (defrule begin-elimination
 
    (declare (salience -20))
    
    ?f &lt;- (phase match)
    
    (not (not (impossible)))
    
    =&gt;
    
    (retract ?f)
    
    (assert (phase elimination)))
 
 ;;; *************
 ;;; next-priority
 ;;; *************
 
 (defrule next-priority
 
    (declare (salience -20))
    
    (phase match)
    
    (not (impossible))
    
    (priority ?last)
    
    (not (priority ?p&amp;:(&gt; ?p ?last)))
    
    (technique (priority ?next&amp;:(&gt; ?next ?last)))
    
    (not (technique (priority ?p&amp;:(&gt; ?p ?last)&amp;:(&lt; ?p ?next))))
    
    =&gt;
    
    (assert (priority ?next)))
 
 ;;; ************
 ;;; begin-output
 ;;; ************
 
 (defrule begin-output
 
    (declare (salience -20))
    
    ?f &lt;- (phase match)
    
    (not (impossible))
    
    (priority ?last)
    
    (not (priority ?p&amp;:(&gt; ?p ?last)))
 
    (not (technique (priority ?next&amp;:(&gt; ?next ?last))))
    
    =&gt;
    
    (retract ?f)
    
    (assert (phase final-output))
    (assert (print-position 1 1)))
 
    
 
   
     
    
    
    
    
    
    
    
    
    
 

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/CLIPS'>Wikipedia</a>:
code
 (deftemplate car_problem
      (slot name)
      (slot status))
 
  (deffacts trouble_shooting
      (car_problem (name ignition_key) (status on))
      (car_problem (name engine) (status wont_start))
      (car_problem (name headlights) (status work)))
 
  (defrule rule1
      (car_problem (name ignition_key) (status on))
      (car_problem (name engine) (status wont_start))
       =&gt;
      (assert (car_problem (name starter) (status faulty))))





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   ; A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   ; A comment
  Token ;
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 







foldBreak
subsection Publications about CLIPS from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Internet of Smart Things - IoST: Using Blockchain and CLIPS to Make Things Autonomous|https://www.semanticscholar.org/paper/5e32390ddfd8658f8453c86e3bd51936bb7a0f67|Mayra Samaniego and R. Deters|2017|63|4
 Recommendation of Instructional Video Clips for HTML Learners Based on the ID3 Algorithm|https://www.semanticscholar.org/paper/1bd14d790a2abaa69d9a7114cf864d970516f63b|Ting-Chia Hsu and Kai-Zhong Zhou|2017|1|0
 Research on Fault Diagnosis Expert System of On-board Radio of a Certain Armored Vehicle Based on CLIPS|https://www.semanticscholar.org/paper/46a02d369c374e0420ae13f4fa0a17e838318f78|Changhong Gong and Xiao Ming and Lingxiang Xia|2020|1|0






keyboardNav snobol.html apollo-guidance-computer.html
