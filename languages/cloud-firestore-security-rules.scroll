title Cloud Firestore Security Rules

import settings.scroll
htmlTitle Cloud Firestore Security Rules - Object object

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/cloud-firestore-security-rules.pldb

paragraph
 Cloud Firestore Security Rules is an <a href="../lists/languages.html?filter=application">object object</a> created in <a href="../lists/languages.html?filter=2017">2017</a>.

kpiTable
 #772 on PLDB
 5 Years Old
 200 <span title="Crude user estimate from a linear model.">Users</span>







paragraph
 

list
 - Cloud Firestore Security Rules first developed in <a href="../lists/originCommunities.html#Google">Google</a>
 - GitHub supports <a href="https://github.com/jaysquared/atom-firestore-grammar" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Cloud Firestore Security Rules
 - Read more about Cloud Firestore Security Rules on the web: <a href="https://firebase.google.com/docs/reference/rules/rules">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/cloud-firestore-security-rules">Improve our Cloud Firestore Security Rules file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/jaysquared/atom-firestore-grammar'>Linguist</a>:
code
 service cloud.firestore {
   match /databases/{database}/documents {
     match /activities/{activity} {
 
       allow create: if isSignedIn()
                     &amp;&amp; isOwner(incomingData().authorId)
                     &amp;&amp; isValidActivity(incomingData())
                     &amp;&amp; hasAllowedActivityFieldsForCreate(incomingData());
 
       allow read, delete: if isSignedIn()
                           &amp;&amp; isOwner(existingData().authorId);
 
       allow update: if isSignedIn()
                     &amp;&amp; isOwner(existingData().authorId)
                     &amp;&amp; isValidActivity(incomingData())
                     &amp;&amp; hasAllowedActivityFieldsForUpdate(incomingData());
 
     }
     match /skills/{skill} {
 
       allow create: if isSignedIn()
                     &amp;&amp; isOwner(incomingData().authorId)
                     &amp;&amp; isValidSkill(incomingData())
                     &amp;&amp; hasAllowedSkillFieldsForCreate(incomingData());
 
       allow read, delete: if isSignedIn()
                           &amp;&amp; isOwner(existingData().authorId);
 
       allow update: if isSignedIn()
                     &amp;&amp; isOwner(existingData().authorId)
                     &amp;&amp; isValidSkill(incomingData())
                     &amp;&amp; hasAllowedSkillFieldsForUpdate(incomingData());
 
     }
     match /activities-skills/{activitySkill} {
 
       allow create: if isSignedIn()
                     &amp;&amp; isOwner(incomingData().authorId)
                     &amp;&amp; isValidActivitySkill(incomingData())
                     &amp;&amp; hasAllowedActivitySkillFieldsForCreate(incomingData());
 
       allow read, delete: if isSignedIn()
                           &amp;&amp; isOwner(existingData().authorId);
 
       allow update: if isSignedIn()
                     &amp;&amp; isOwner(existingData().authorId)
                     &amp;&amp; isValidActivitySkill(incomingData())
                     &amp;&amp; hasAllowedActivitySkillFieldsForUpdate(incomingData());
 
     }
      /// Functions ///
     function isSignedIn() {
       return request.auth != null;
     }
     function isOwner(userId) {
       return request.auth.uid == userId;
     }
     function existingData() {
       return resource.data;
     }
     function incomingData() {
       return request.resource.data;
     }
     function isValidActivity(activity) {
       return activity.title is string
       	&amp;&amp; activity.title.size() &gt; 3
         &amp;&amp; activity.title.size() &lt; 250
         &amp;&amp; activity.summary is string
         &amp;&amp; (activity.audienceCountMin is int || activity.audienceCountMin == null)
         &amp;&amp; (activity.audienceCountMax is int || activity.audienceCountMax == null)
         &amp;&amp; (activity.audienceAgeMin is int || activity.audienceAgeMin == null)
         &amp;&amp; (activity.audienceAgeMax is int || activity.audienceAgeMax == null)
         &amp;&amp; activity.lastUpdateDate.date() is timestamp;
     }
     function hasAllowedActivityFieldsForUpdate(activity) {
       return activity.keys().size() == 9 &amp;&amp; activity.keys().hasAll([&#39;authorId&#39;, &#39;title&#39;, &#39;summary&#39;, &#39;audienceCountMin&#39;, &#39;audienceCountMax&#39;, &#39;audienceAgeMin&#39;, &#39;audienceAgeMax&#39;, &#39;lastUpdateDate&#39;]);
     }
     function hasAllowedActivityFieldsForCreate(activity) {
       return activity.keys().size() == 8 &amp;&amp; activity.keys().hasAll([&#39;authorId&#39;, &#39;title&#39;, &#39;summary&#39;, &#39;audienceCountMin&#39;, &#39;audienceCountMax&#39;, &#39;audienceAgeMin&#39;, &#39;audienceAgeMax&#39;, &#39;lastUpdateDate&#39;]);
     }
 
     function isValidSkill(skill) {
       return skill.title is string
         &amp;&amp; skill.title.size() &gt; 3
         &amp;&amp; skill.title.size() &lt; 250
         &amp;&amp; skill.summary is string
         &amp;&amp; skill.lastUpdateDate.date() is timestamp;
     }
     function hasAllowedSkillFieldsForUpdate(skill) {
       return skill.keys().size() == 5 &amp;&amp; skill.keys().hasAll([&#39;authorId&#39;, &#39;title&#39;, &#39;summary&#39;, &#39;lastUpdateDate&#39;]);
     }
     function hasAllowedSkillFieldsForCreate(skill) {
       return skill.keys().size() == 4 &amp;&amp; skill.keys().hasAll([&#39;authorId&#39;, &#39;title&#39;, &#39;summary&#39;, &#39;lastUpdateDate&#39;]);
     }
     function isValidActivitySkill(activitySkill) {
       return activitySkill.skillId is string
         &amp;&amp; activitySkill.activityId is string;
     }
     function hasAllowedActivitySkillFieldsForUpdate(activitySkill) {
       return activitySkill.keys().size() == 4 &amp;&amp; activitySkill.keys().hasAll([&#39;authorId&#39;, &#39;skillId&#39;, &#39;activityId&#39;]);
     }
     function hasAllowedActivitySkillFieldsForCreate(activitySkill) {
       return activitySkill.keys().size() == 3 &amp;&amp; activitySkill.keys().hasAll([&#39;authorId&#39;, &#39;skillId&#39;, &#39;activityId&#39;]);
     }
   }
 }



















keyboardNav docopt.html xsv-app.html
