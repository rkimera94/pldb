title Constructors

import settings.scroll
htmlTitle Constructors - Language feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/constructor-feature.pldb

* Constructors is a <a href="../lists/features.html">language feature</a>.
 link ../lists/languages.html?filter=0 0

 

* In class-based object-oriented programming, a constructor (abbreviation: ctor) is a special type of subroutine called to create an object. It prepares the new object for use, often accepting arguments that the constructor uses to set required member variables.

- the <a href="https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)">Constructors Wikipedia page</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/constructor-feature">Improve our Constructors file</a>

html
 <br>

* Languages *with* Constructors include <a href="java.html">Java</a>, <a href="javascript.html">JavaScript</a>, <a href="python.html">Python</a>, <a href="cpp.html">C++</a>, <a href="php.html">PHP</a>, <a href="matlab.html">MATLAB</a>, <a href="csharp.html">C#</a>, <a href="objective-c.html">Objective-C</a>, <a href="visual-basic.net.html">Visual Basic .NET</a>, <a href="object-pascal.html">Object Pascal</a>, <a href="action.html">Action!</a>, <a href="cfml.html">CFML</a>, <a href="dale.html">Dale</a>

exampleCodeHeader Example from <a href="javascript.html">JavaScript</a>:

code
 class Person {
  constructor(name) {
    this._name = name
  }
 }
 new Person(&quot;Jane&quot;)

exampleCodeHeader Example from <a href="cpp.html">C++</a>:

code
 class Foobar {
  public:
   Foobar(double r = 1.0,
          double alpha = 0.0)  // Constructor, parameters with default values.
       : x_(r * cos(alpha))    // &lt;- Initializer list
   {
     y_ = r * sin(alpha);  // &lt;- Normal assignment
   }
 
  private:
   double x_;
   double y_;
 };
 Foobar a,
        b(3),
        c(5, M_PI/4);

exampleCodeHeader Example from <a href="csharp.html">C#</a>:

code
 public class MyClass
 {
     private int a;
     private string b;
 
     // Constructor
     public MyClass() : this(42, &quot;string&quot;)
     {
     }
 
     // Overloading a constructor
     public MyClass(int a, string b)
     {
         this.a = a;
         this.b = b;
     }
 }
 // Code somewhere
 // Instantiating an object with the constructor above
 MyClass c = new MyClass(42, &quot;string&quot;);

exampleCodeHeader Example from <a href="cfml.html">CFML</a>:

code
 component {
    // properties
    property name=&quot;cheeseName&quot;;
  
    // constructor
    function Cheese init( required string cheeseName ) {
       variables.cheeseName = arguments.cheeseName;
       return this;
    }
 }

keyboardNav constants-feature.html dependent-types-feature.html
