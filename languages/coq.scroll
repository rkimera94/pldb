title Coq

import settings.scroll
htmlTitle Coq - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/coq.pldb

paragraph
 Coq is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1989">1989</a>.

kpiTable
 #178 <span title="TotalRank: 490 Jobs: 101 Users: 243 Facts: 183 Links: 206">on PLDB</span>
 33 Years Old
 3.6k <span title="Crude user estimate from a linear model.">Users</span>
 3 <span title="Books about or leveraging Coq">Books</span>
 27 <span title="Academic publications about or leveraging Coq">Papers</span>
 5k <span title="Coq repos on GitHub.">Repos</span>







paragraph
 In computer science, Coq is an interactive theorem prover. It allows the expression of mathematical assertions, mechanically checks proofs of these assertions, helps to find formal proofs, and extracts a certified program from the constructive proof of its formal specification. Coq works within the theory of the calculus of inductive constructions, a derivative of the calculus of constructions. <a href="https://en.wikipedia.org/wiki/Coq">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Coq">Coq Wikipedia page</a>
 - the <a href="https://coq.inria.fr/documentation">Coq docs</a>
 - There are at least 5,206 Coq repos on <a href="https://github.com/search?q=language:Coq">GitHub</a>
 - Coq first developed in <a href="../lists/originCommunities.html#The_Coq_development_team">The Coq development team</a>
 - file extensions for Coq include coq and v
 - The  Google BigQuery Public Dataset GitHub snapshot shows 793 users using Coq in 1k repos on <a href="https://api.github.com/search/repositories?q=language:Coq">GitHub</a>
 - There are 2,066 members in the <a href="https://reddit.com/r/Coq">Coq subreddit</a>
 - Explore Coq snippets on <a href="http://www.rosettacode.org/wiki/Category:Coq">Rosetta Code</a>
 - Coq is listed on <a href="https://hopl.info/showlanguage.prx?exp=6970">HOPL</a>
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/theorem.py">syntax highlighting</a> for Coq
 - GitHub supports <a href="https://github.com/mkolosick/Sublime-Coq" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Coq
 - See also: (5 related languages)<a href="ocaml.html">OCaml</a>, <a href="agda.html">Agda</a>, <a href="idris.html">Idris</a>, <a href="c.html">C</a>, <a href="isabelle.html">Isabelle</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/coq">Improve our Coq file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/mkolosick/Sublime-Coq'>Linguist</a>:
code
 Require Import FunctionNinjas.All.
 Require Import ListString.All.
 Require Import Computation.
 
 Import C.Notations.
 
 Definition error (message : LString.t) : C.t :=
   do_call! Command.ShowError message in
   ret.
 
 Definition main : C.t :=
   call! card_is_valid := Command.AskCard in
   if card_is_valid then
     call! pin := Command.AskPIN in
     match pin with
     | None =&gt; error @@ LString.s &quot;No PIN given.&quot;
     | Some pin =&gt;
       call! pin_is_valid := Command.CheckPIN pin in
       if pin_is_valid then
         call! ask_amount := Command.AskAmount in
         match ask_amount with
         | None =&gt; error @@ LString.s &quot;No amount given.&quot;
         | Some amount =&gt;
           call! amount_is_valid := Command.CheckAmount amount in
           if amount_is_valid then
             call! card_is_given := Command.GiveCard in
             if card_is_given then
               call! amount_is_given := Command.GiveAmount amount in
               if amount_is_given then
                 ret
               else
                 error @@ LString.s &quot;Cannot give you the amount. Please contact your bank.&quot;
             else
               error @@ LString.s &quot;Cannot give you back the card. Please contact your bank.&quot;
           else
             error @@ LString.s &quot;Invalid amount.&quot;
         end
       else
         error @@ LString.s &quot;Invalid PIN.&quot;
     end
   else
     error @@ LString.s &quot;Invalid card.&quot;.
 





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Binary Literals
  FeatureLink ../languages/binary-numbers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Octals
  FeatureLink ../languages/octals-feature.html
  Supported ✓
  Example
  Token 





foldBreak
subsection Books about Coq from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Certified Programming with Dependent Types: A Pragmatic Introduction to the Coq Proof Assistant (The MIT Press)|https://isbndb.com/book/9780262026659|Chlipala, Adam|2013-12-06T00:00:01Z|The MIT Press
 Certified Programming with Dependent Types: A Pragmatic Introduction to the Coq Proof Assistant|https://isbndb.com/book/9780262545747|Chlipala, Adam|2022|MIT Press
 Computer Arithmetic and Formal Proofs: Verifying Floating-point Algorithms with the Coq System (Computer Engineering)|https://isbndb.com/book/9780081011706|Boldo, Sylvie and Melquiond, Guillaume|2017|ISTE Press - Elsevier


foldBreak
subsection Publications about Coq from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Extending Coq with Imperative Features and Its Application to SAT Verification|https://www.semanticscholar.org/paper/62a54d650f4e872c333164a03a02809bb5033c8b|Michaël Armand and B. Grégoire and A. Spiwack and Laurent Théry|2010|76|6
 Strongly Typed Term Representations in Coq|https://www.semanticscholar.org/paper/addf7c769cc3b08ed853e76605c266ab51010fdb|Nick Benton and C. Hur and A. Kennedy and Conor McBride|2012|74|3
 Canonical Structures for the Working Coq User|https://www.semanticscholar.org/paper/1f151ce64779eb673b5b06a4211480968e211452|A. Mahboubi and E. Tassi|2013|55|0
 Œuf: minimizing the Coq extraction TCB|https://www.semanticscholar.org/paper/ef537a2cd3b2a2d28e8ec07195265a61a9ad4c26|Eric Mullen and Stuart Pernsteiner and James R. Wilcox and Zachary Tatlock and D. Grossman|2018|35|1
 Weak Call-by-Value Lambda Calculus as a Model of Computation in Coq|https://www.semanticscholar.org/paper/adba80bbf7c50743fda436ef1919baff64fb1bf7|Y. Forster and G. Smolka|2017|34|3
 Verification of PLC Properties Based on Formal Semantics in Coq|https://www.semanticscholar.org/paper/d30c9e9c8749b7e5e408804ae4ce9a446ea1c725|J. Blech and Sidi Ould Biha|2011|32|1
 Verifying Object-Oriented Programs with Higher-Order Separation Logic in Coq|https://www.semanticscholar.org/paper/b6d3405002dcd052327c7052e83753a407477a59|J. Bengtson and J. B. Jensen and Filip Sieczkowski and L. Birkedal|2011|31|3
 Aliasing Restrictions of C11 Formalized in Coq|https://www.semanticscholar.org/paper/7ecd6f0e29de44baa17072f68225349c90c39871|R. Krebbers|2013|27|1
 Mtac2: typed tactics for backward reasoning in Coq|https://www.semanticscholar.org/paper/d6b3a74639659f59cf6e36a653669fee84dd1aef|Jan-Oliver Kaiser and Beta Ziliani and R. Krebbers and Y. Régis-Gianas and Derek Dreyer|2018|24|1
 An Introduction to Programming and Proving with Dependent Types in Coq|https://www.semanticscholar.org/paper/6ca05b1d04e65c1c34eb0565ec44ce47605efed3|A. Chlipala|2010|21|0
 ConCert: a smart contract certification framework in Coq|https://www.semanticscholar.org/paper/4d656733e7205530d78a8887d429b41f9c789be0|D. Annenkov and Bas Spitters|2019|21|2
 Calculating Parallel Programs in Coq Using List Homomorphisms|https://www.semanticscholar.org/paper/adb8b0667728336d881a19f6c7defe51deb1c642|F. Loulergue and Wadoud Bousdira and J. Tesson|2017|16|1
 Verified programming of Turing machines in Coq|https://www.semanticscholar.org/paper/5ad36475e45e3f17be1d5cd5a77154cfba2a6994|Y. Forster and F. Kunze and Maximilian Wuttke|2020|16|0
 A Formalization of the C99 Standard in HOL, Isabelle and Coq|https://www.semanticscholar.org/paper/4f5516f1cc9d97769e44abc5ea6250e050174839|R. Krebbers and F. Wiedijk|2011|14|0
 Computational Verification of Network Programs in Coq|https://www.semanticscholar.org/paper/0549085a388b2772b3eedb8a62c3efd5654d4a1c|Gordon Stewart|2013|13|1
 A unification algorithm for Coq featuring universe polymorphism and overloading|https://www.semanticscholar.org/paper/61664cd31fa465ababe6c1ce8e0d10d2a15bb0b9|Beta Ziliani and Matthieu Sozeau|2015|12|0
 Bringing Coq into the World of GCM Distributed Applications|https://www.semanticscholar.org/paper/0e8ec78725517d4cbfc667b04a8f6f16bed1c9e9|Nuno Gaspar and L. Henrio and E. Madelaine|2014|11|1
 A Hybrid Formal Verification System in Coq for Ensuring the Reliability and Security of Ethereum-Based Service Smart Contracts|https://www.semanticscholar.org/paper/29f39232b4fdd69f22c9212d41bdc2e14690a22c|Zheng Yang and Hang Lei and Weizhong Qian|2019|11|0
 30 years of research and development around Coq|https://www.semanticscholar.org/paper/b46004f9d17e3720845c833fbb05c012c9134df3|G. Huet and Hugo Herbelin|2014|10|0
 Call-by-Value Lambda Calculus as a Model of Computation in Coq|https://www.semanticscholar.org/paper/95dba68b129ba0a617ca4f328420f8f9259af4b0|Y. Forster and G. Smolka|2018|7|0
 An operational foundation for the tactic language of Coq|https://www.semanticscholar.org/paper/b32892ebcba24dc35ca26bfce86f45fd216888ef|Wojciech Jedynak and Malgorzata Biernacka and Dariusz Biernacki|2013|7|0
 Translating Higher-Order Specifications to Coq Libraries Supporting Hybrid Proofs|https://www.semanticscholar.org/paper/037ea8aa6131e318d4c9732a8f6f3c251f3301c6|Nada Habli and A. Felty|2013|3|0
 Coq à la carte: a practical approach to modular syntax with binders|https://www.semanticscholar.org/paper/3a0e6a70d01db87f52ba81100d4ade869aac6a9a|Y. Forster and Kathrin Stark|2020|3|0
 Towards a Framework for Building Formally Verified Supercompilers in Coq|https://www.semanticscholar.org/paper/e56ffb2a1acae3e4d6a9bafd206d33068cfb562f|D. Krustev|2012|1|0
 Programming with Effects in Coq|https://www.semanticscholar.org/paper/c890394f4a24dafbaae3546839efb5bc3ba15106|J. G. Morrisett|2008|1|0
 Type- Theoretical Foundations of the Derivation System in Coq|https://www.semanticscholar.org/paper/c22ba6504f78cedede886be7bee43165da9f58fa|Vasyl Lenko and V. Pasichnyk and N. Kunanets and Y. Shcherbyna|2018|1|0
 Interactive typed tactic programming in the Coq proof assistant|https://www.semanticscholar.org/paper/4b34dede898a0e7108beb16f1e0aba20bd16d4f5|Beta Ziliani|2015|1|0






keyboardNav frege.html coldfusion.html
