title Croc

import settings.scroll
htmlTitle Croc - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/croc.pldb

paragraph
 Croc is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2006">2006</a> by <a href="../lists/creators.html#Jarrett_Billingsley">Jarrett Billingsley</a>.

kpiTable
 #404 <span title="TotalRank: 893 Jobs: 101 Users: 1148 Facts: 127 Links: 665">on PLDB</span>
 16 Years Old
 194 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Croc">Books</span>
 0 <span title="Academic publications about or leveraging Croc">Papers</span>







paragraph
 The MiniD (has been renamed Croc) programming language is a small, lightweight, extension language in the vein of Lua or Squirrel, but designed to be used mainly with the D programming language.  It supports both object-oriented and imperative programming paradigms, as well as some simple functional aspects. Distributed under the licence of zlib/libpng, MiniD is free software.. <a href="https://web.archive.org/web/20190311032913/https://en.wikipedia.org/wiki/MiniD">Read more on Wikipedia...</a>

list
 - the <a href="https://web.archive.org/web/20120625151120/http://jfbillingsley.com/croc/">Croc website</a>
 - the <a href="https://web.archive.org/web/20190311032913/https://en.wikipedia.org/wiki/MiniD">Croc Wikipedia page</a>
 - Croc is developed on <a href="https://github.com/JarrettBillingsley/Croc">GitHub</a> and has 74 stars
 - Croc first developed in <a href="../lists/originCommunities.html#http://www.dsource.org/projects/minid">http://www.dsource.org/projects/minid</a>
 - file extensions for Croc include croc
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/d.py">syntax highlighting</a> for Croc
 - See also: (8 related languages)<a href="d.html">D</a>, <a href="lua.html">Lua</a>, <a href="squirrel.html">Squirrel</a>, <a href="python.html">Python</a>, <a href="io.html">Io</a>, <a href="ecmascript.html">ECMAScript</a>, <a href="c.html">C</a>, <a href="minid.html">MiniD</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/croc">Improve our Croc file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 module samples.interfaces
 
 class Method
 {
     _name
     _numParams
 
     this(name: string, numParams: int)
     {
         :_name = name
         :_numParams = numParams
     }
 
     function name() =
         :_name
 
     function implements(f: function) =
         f.numParams() == :_numParams
 
     function toString() =
         &quot;{} ({} params)&quot;.format(:_name, :_numParams)
 }
 
 class Interface
 {
     _name
     _methods
     _implementors
 
     this(name: string, methods: array)
     {
         if(!methods.all(\m -&gt; m as Method))
             throw TypeError(&quot;All methods must be Methods&quot;)
 
         :_name = name
         :_methods = methods.dup()
         :_implementors = {}
     }
 
     function implement(T: class)
     {
         foreach(m; :_methods)
         {
             local name = m.name()
 
             if(!hasMethod(T, name) || !m.implements(T.(name)))
                 throw TypeError(&quot;Class {} does not implement method &#39;{}&#39; from {}&quot;.format(nameOf(T), m, :_name))
         }
 
         :_implementors[T] = true
     }
 
     function opCall(val: instance)
     {
         if(superOf(val) not in :_implementors)
             :implement(superOf(val))
 
         return true
     }
 }
 
 function implements(T: class, vararg)
 {
     for(i; 0 .. #vararg)
     {
         local p = vararg[i]
 
         if(!(p as Interface))
             throw TypeError(&quot;All varargs must be Interfaces&quot;)
 
         p.implement(T)
     }
 
     return T
 }
 
 local IStream = Interface(&quot;IStream&quot;,
 [
     Method(&quot;read&quot;, 3)
     Method(&quot;write&quot;, 3)
     Method(&quot;seek&quot;, 2)
 ])
 
 class DerpStream
 {
     function read(m, offset, size) {}
     function write(m, offset, size) {}
     function seek(offset, whence) {}
 }
 
 function streamSomething(s: @IStream)
 {
     s.read()
     writeln(&quot;yay!&quot;)
 }
 
 function main()
 {
     local d = DerpStream()
     streamSomething(d)
 }

exampleCodeHeader Example from <a href='https://web.archive.org/web/20190311032913/https://en.wikipedia.org/wiki/MiniD'>Wikipedia</a>:
code
 function first(x: array|string) = x[0]
 
  writeln(first([1, 2, 3])) // prints 1
  writeln(first(&quot;hello&quot;))   // prints h
  writeln(first(45))        // error, invalid parameter type &#39;int&#39;





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Binary Literals
  FeatureLink ../languages/binary-numbers-feature.html
  Supported ✓
  Example
   // 0[bB][01][01_]*
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
   // ([0-9][0-9_]*)(?![.eE])
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
   // ([0-9][0-9_]*)(?=[.eE])(\.[0-9][0-9_]*)?([eE][+\-]?[0-9_]+)?
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
   // 0[xX][0-9a-fA-F][0-9a-fA-F_]*
  Token 
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav bluespec.html puredata.html
