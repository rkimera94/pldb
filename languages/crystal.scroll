title Crystal

import settings.scroll
htmlTitle Crystal - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/crystal.pldb

paragraph
 Crystal is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2014">2014</a> by <a href="../lists/creators.html#Ary_Borenszweig">Ary Borenszweig</a>.

kpiTable
 #61 <span title="TotalRank: 218 Jobs: 101 Users: 62 Facts: 55 Links: 205">on PLDB</span>
 8 Years Old
 26.7k <span title="Crude user estimate from a linear model.">Users</span>
 5 <span title="Books about or leveraging Crystal">Books</span>
 6 <span title="Academic publications about or leveraging Crystal">Papers</span>
 8k <span title="Crystal repos on GitHub.">Repos</span>

paragraph
 Try now: <a href="https://play.crystal-lang.org/#/cr">Web</a> · <a href="https://riju.codes/crystal">Riju</a> · <a href="https://tio.run/#crystal">TIO</a>





paragraph
 In computer software programming languages, Crystal is a general-purpose, object-oriented programming language, designed and developed by Ary Borenszweig and Juan Wajnerman and more than 200 contributors. With syntax inspired by the language Ruby, it is a compiled language with static type-checking, but specifying the types of variables or method arguments is generally unneeded. Types are resolved by an advanced global type inference algorithm. <a href="https://en.wikipedia.org/wiki/Crystal_(programming_language)">Read more on Wikipedia...</a>

list
 - the <a href="https://crystal-lang.org">Crystal website</a>
 - the <a href="https://en.wikipedia.org/wiki/Crystal_(programming_language)">Crystal Wikipedia page</a>
 - Crystal is developed on <a href="https://github.com/crystal-lang/crystal">GitHub</a> and has 17,603 stars
 - PLDB has 2 documentation sites for Crystal: <a href="https://crystal-lang.org/reference/1.6/index.html">crystal-lang.org</a>, <a href="https://devdocs.io/crystal/">devdocs.io</a>
 - There are at least 7,522 Crystal repos on <a href="https://github.com/search?q=language:Crystal">GitHub</a>
 - Crystal first developed in <a href="../lists/originCommunities.html#https://forum.crystal-lang.org/">https://forum.crystal-lang.org/</a>
 - file extensions for Crystal include cr
 - the Crystal team is on <a href="https://twitter.com/crystallanguage">Twitter</a>
 - The  Google BigQuery Public Dataset GitHub snapshot shows 767 users using Crystal in 1k repos on <a href="https://api.github.com/search/repositories?q=language:Crystal">GitHub</a>
 - There are 4,118 members in the <a href="https://reddit.com/r/crystal_programming">Crystal subreddit</a>
 - There are 14 <a href="https://projecteuler.net/language=Crystal">Project Euler</a> users using Crystal
 - In the 2021 StackOverflow <a href="https://insights.stackoverflow.com/survey">developer survey</a> Crystal programmers reported a median salary of $72,400. 1% of respondents reported using Crystal. 466 programmers reported using Crystal, and 790 said they wanted to use it
 - Explore Crystal snippets on <a href="http://www.rosettacode.org/wiki/Category:Crystal">Rosetta Code</a>
 - Crystal ranks #24 in the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
 - Here is a Crystal <a href="language-server-protocol.html">LSP</a> <a href="https://github.com/kofno/scry">implementation</a>
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/crystal.py">syntax highlighting</a> for Crystal
 - GitHub supports <a href="https://github.com/atom-crystal/language-crystal" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Crystal
 - <a href="https://crystal-lang.org">crystal-lang.org</a> was registered in 2013
 - See also: (10 related languages)<a href="ia-32.html">IA-32</a>, <a href="freebsd.html">FreeBSD</a>, <a href="ruby.html">Ruby</a>, <a href="c.html">C</a>, <a href="rust.html">Rust</a>, <a href="go.html">Go</a>, <a href="csharp.html">C#</a>, <a href="python.html">Python</a>, <a href="llvmir.html">LLVM IR</a>, <a href="csp.html">CSP</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/crystal">Improve our Crystal file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://godbolt.org/'>Compiler Explorer</a>:
code
 # Type your code here, or load an example.
 
 # compile with --prelude=empty
 fun square(num : Int32) : Int32
   num &amp;* num
 end

exampleCodeHeader Example from <a href='https://riju.codes/crystal'>Riju</a>:
code
 puts &quot;Hello, world!&quot;
 

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/c/Crystal.cr'>hello-world</a>:
code
 puts &quot;Hello World&quot;
 

exampleCodeHeader Example from <a href='http://helloworldcollection.de/#Crystal'>the Hello World Collection</a>:
code
 # Hello world in Crystal
 
 puts &quot;Hello World&quot;

exampleCodeHeader Example from <a href='https://github.com/atom-crystal/language-crystal'>Linguist</a>:
code
 #!/usr/bin/env bin/crystal --run
 require &quot;../../spec_helper&quot;
 
 describe &quot;Type inference: declare var&quot; do
   it &quot;types declare var&quot; do
     assert_type(&quot;a :: Int32&quot;) { int32 }
   end
 
   it &quot;types declare var and reads it&quot; do
     assert_type(&quot;a :: Int32; a&quot;) { int32 }
   end
 
   it &quot;types declare var and changes its type&quot; do
     assert_type(&quot;a :: Int32; while 1 == 2; a = &#39;a&#39;; end; a&quot;) { union_of(int32, char) }
   end
 
   it &quot;declares instance var which appears in initialize&quot; do
     result = assert_type(&quot;
       class Foo
         @x :: Int32
       end
 
       Foo.new&quot;) { types[&quot;Foo&quot;] }
 
     mod = result.program
 
     foo = mod.types[&quot;Foo&quot;] as NonGenericClassType
     foo.instance_vars[&quot;@x&quot;].type.should eq(mod.int32)
   end
 
   it &quot;declares instance var of generic class&quot; do
     result = assert_type(&quot;
       class Foo(T)
         @x :: T
       end
 
       Foo(Int32).new&quot;) do
         foo = types[&quot;Foo&quot;] as GenericClassType
         foo_i32 = foo.instantiate([int32] of Type | ASTNode)
         foo_i32.lookup_instance_var(&quot;@x&quot;).type.should eq(int32)
         foo_i32
     end
   end
 
   it &quot;declares instance var of generic class after reopen&quot; do
     result = assert_type(&quot;
       class Foo(T)
       end
 
       f = Foo(Int32).new
 
       class Foo(T)
         @x :: T
       end
 
       f&quot;) do
         foo = types[&quot;Foo&quot;] as GenericClassType
         foo_i32 = foo.instantiate([int32] of Type | ASTNode)
         foo_i32.lookup_instance_var(&quot;@x&quot;).type.should eq(int32)
         foo_i32
     end
   end
 
   it &quot;declares an instance variable in initialize&quot; do
     assert_type(&quot;
       class Foo
         def initialize
           @x :: Int32
         end
 
         def x
           @x
         end
       end
 
       Foo.new.x
       &quot;) { int32 }
   end
 end
 

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Crystal_(programming_language)'>Wikipedia</a>:
code
 channel = Channel(Int32).new
 
 spawn do
   puts &quot;Before first send&quot;
   channel.send(1)
   puts &quot;Before second send&quot;
   channel.send(2)
 end
 
 puts &quot;Before first receive&quot;
 value = channel.receive
 puts value # =&gt; 1
 
 puts &quot;Before second receive&quot;
 value = channel.receive
 puts value # =&gt; 2



subsection <a href="../lists/keywords.html?filter=crystal">Keywords</a> in Crystal
paragraph
 abstract do if nil? self unless alias else in of sizeof until as elsif include out struct when as? end instance_sizeof pointerof super while asm ensure is_a? private then with begin enum lib protected true yield break extend macro require type case false module rescue typeof class for next return uninitialized def fun nil select union

foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature While Loops
  FeatureLink ../languages/while-loops-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Conditionals
  FeatureLink ../languages/conditionals-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Functions
  FeatureLink ../languages/functions-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Classes
  FeatureLink ../languages/classes-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature File Imports
  FeatureLink ../languages/file-imports-feature.html
  Supported ✓
  Example
   require "../../spec_helper"
  Token require
 row
  Feature Booleans
  FeatureLink ../languages/booleans-feature.html
  Supported ✓
  Example
  Token true false
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token puts
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   # A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   # A comment
  Token #
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ϴ
  Example
  Token 





foldBreak
subsection Books about Crystal from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Crystal Clear: A Human-Powered Methodology for Small Teams: A Human-Powered Methodology for Small Teams|https://isbndb.com/book/9780201699470|Cockburn, Alistair and Paul Becker, Alistair|2004|Addison-Wesley Professional
 Crystal Reports .net Programming|https://isbndb.com/book/9780974953656|Bischof and Brian|2004|Bischof Systems
 Crystal Reports Professional Results|https://isbndb.com/book/9780072230468|Peck, George|2003|McGraw-Hill Education
 Crystal Programming: A project-based introduction to building efficient, safe, and readable web and CLI applications|https://isbndb.com/book/9781801818674|Dietrich, George and Bernal, Guilherme|2022|Packt Publishing
 Crystal Reports XI Official Guide|https://isbndb.com/book/9780672329173|Fitzgerald, Neil and et al.|2006|Sams Publishing


foldBreak
subsection Publications about Crystal from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Crystal engineering with DNA|https://www.semanticscholar.org/paper/be702265b33ecccf5ecf1bf35ababa13ad58f79a|Christine R Laramy and Matthew N. O’Brien and C. Mirkin|2019|103|1
 FOX: Modular Approach to Crystal Structure Determination from Powder Diffraction|https://www.semanticscholar.org/paper/081346105add7ed3877d35b53b208543ff5960f6|V. Favre-Nicolin and R. Černý|2004|34|0
 Crystal Gazer|https://www.semanticscholar.org/paper/cf37eab0061c177c0287f75b19b36bba9bdd6760|Shoaib Akram and Jennifer B. Sartor and K. McKinley and L. Eeckhout|2019|7|0
 Crystal Reference Manual Version 3.0|https://www.semanticscholar.org/paper/114368a8e72ce800970d1364f862adb378ae26e6|M. Jacquemin and J. A. Yang|1991|3|0
 3DStructGen: an interactive web-based 3D structure generation for non-periodic molecule and crystal|https://www.semanticscholar.org/paper/80162ab0cfccdd5dc49987e9d655d8f689ee09d4|Pin Chen and Yu Wang and Hui Yan and Sen Gao and Zexin Xu and Yangzhong Li and Qing Mo and Junkang Huang and Jun Tao and Gechuanqi Pan and Jiahui Li and Yunfei Du|2020|2|0
 Simulation of a micro-milling single crystal copper process based on crystal plastic constitutive theory|https://www.semanticscholar.org/paper/222d3e7de77c7553bdbd4e1d0e133ac548d2034a|Luan Yihan and Meng Xiangyue and Xue Liang and S. Liang and L. Xiaohong|2020|1|0






keyboardNav basic.html awk.html
