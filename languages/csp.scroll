title CSP

import settings.scroll
htmlTitle CSP - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/csp.pldb

* CSP, aka Communicating Sequential Processes, is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 1978.
 link ../lists/languages.html?filter=1978 1978

 

kpiTable
 #255 <span title="TotalRank: 632 Jobs: 101 Users: 426 Facts: 528 Links: 105">on PLDB</span>
 44 Years Old
 1.4k <span title="Crude user estimate from a linear model.">Users</span>
 7 <span title="Books about or leveraging CSP">Books</span>
 21 <span title="Academic publications about or leveraging CSP">Papers</span>

monacoEditor csp
 COPY = *[c:character; west?c → east!c]

* In computer science, communicating sequential processes (CSP) is a formal language for describing patterns of interaction in concurrent systems. It is a member of the family of mathematical theories of concurrency known as process algebras, or process calculi, based on message passing via channels. CSP was highly influential in the design of the occam programming language, and also influenced the design of programming languages such as Limbo, RaftLib, Go, Crystal, and Clojure's core.async. <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP Wikipedia page</a>
- CSP first developed in <a href="../lists/originCommunities.html#Oxford_University">Oxford University</a>
- CSP is listed on <a href="https://hopl.info/showlanguage.prx?exp=795">HOPL</a>
- There is a <a href="monaco.html">Monaco</a> <a href="https://github.com/microsoft/monaco-editor/tree/main/src/basic-languages/csp">package</a> for syntax highlighting CSP
- See also: (6 related languages)<a href="occam.html">Occam</a>, <a href="limbo.html">Limbo</a>, <a href="go.html">Go</a>, <a href="crystal.html">Crystal</a>, <a href="clojure.html">Clojure</a>, <a href="ada.html">Ada</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/csp">Improve our CSP file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 COPY = *[c:character; west?c → east!c]

foldBreak
## Books about CSP on goodreads
pipeTable
 title|titleLink|author|year|reviews|ratings|rating
 Csp: A Developer's Guide|https://www.goodreads.com/search?q=Csp: A Developer's Guide Shashi Malik|Shashi Malik|1992|0|0|0.0
 CSP as a Coordination Language|https://www.goodreads.com/search?q=CSP as a Coordination Language Kleine Moritz|Kleine Moritz||0|0|0.0

foldBreak
## Books about CSP from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Two papers on CSP|https://isbndb.com/book/9780902928497|A. W. Roscoe||Oxford, England : Oxford University Computing Laboratory, Programming Research Group, [1988]
 The Sliding-window Protocol In Csp|https://isbndb.com/book/9780902928480|K. Paliwoda and J. W. Sanders||Oxford, England : Oxford University Computing Laboratory, Programming Research Group, 1988.
 Probabilities And Priorities In Timed Csp|https://isbndb.com/book/9780902928886|||Oxford, England : Oxford University Computing Laboratory, Programming Research Group, C1993.
 A Brief History Of Timed Csp|https://isbndb.com/book/9780902928749|Jim Davies and Steve Schneider||Oxford, England : Oxford University Computing Laboratory, Programming Research Group, 1992.
 The Timed Failures-stability Model For Csp|https://isbndb.com/book/9780902928930|G. M. Reed and A. W. Roscoe||Oxford [england] : Oxford University Computing Laboratory, Programming Research Group, C1996.

foldBreak
## Publications about CSP from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 The Quest Goes on: A Survey of Proofsystems for Partial Correctness of CSP|https://www.semanticscholar.org/paper/f752804133a4e5014f6485aa9cdfeaa33d30e8de|J. Hooman and W. P. Roever|1986|45|0
 A Reasoning Method for Timed CSP Based on Constraint Solving|https://www.semanticscholar.org/paper/63b5fdc9db311e527efb6bdc613db7b02b1ac304|J. Dong and Ping Hao and Jun Sun and Xian Zhang|2006|43|1
 Embedding as a Tool for Language Comparison: On the CSP Hierarchy|https://www.semanticscholar.org/paper/e5cf0ff98d509e90ba5d1bf39488815c5aba5a85|F. S. Boer and C. Palamidessi|1991|27|1
 Practical Application of CSP and FDR to Software Design|https://www.semanticscholar.org/paper/3dd4308be86507c6154cc7033ea8b4866746ff78|Jonathan Lawrence|2004|20|2
 A CSP Model for Mobile Channels|https://www.semanticscholar.org/paper/71201fc33539bab1ed70b50fba8bc39f59436e75|P. Welch and F. Barnes|2008|20|1
 Bridging CSP and C++ with selective formalism and executable specifications|https://www.semanticscholar.org/paper/8ea78309dbdde85ea68f91bdb8d4040f5046e71f|W. B. Gardner|2003|18|0
 CSP as a Domain-Specific Language Embedded in Python and Jython|https://www.semanticscholar.org/paper/4cfaf832b2ba26b30a584a5055361de505d6d5b8|S. Mount and Mohammad Hammoudeh and Sam Wilson and R. Newman|2009|15|0
 Verification of Distributed Embedded Real-Time Systems and their Low-Level Implementations Using Timed CSP|https://www.semanticscholar.org/paper/00612e04938e115ece447f8961aff0d5b4fcc1ba|B. Bartels and S. Glesner|2011|13|1
 A programming environment for CSP|https://www.semanticscholar.org/paper/8a67620f9eabbb7a91c7c426e99af616dd45849f|N. Delisle and M. Schwartz|1987|13|1
 Converging CSP specifications and C++ programming via selective formalism|https://www.semanticscholar.org/paper/1fbb2ae9bfd1f8f8f8361c4d7d92508ab16133db|W. B. Gardner|2005|13|0
 Designing reusable software components following the CSP distributed programming model|https://www.semanticscholar.org/paper/f0291b9e835111956f6fbcdbe6e30a195218d582|J. M. Mantas and A. Palma|1997|5|0
 An Analytical and Experimental Comparison of CSP Extensions and Tools|https://www.semanticscholar.org/paper/4374e617864948df9a7ce03b5f4ffda3d7594421|Ling Shi and Yang Liu and Jun Sun and J. Dong and Gustavo Carvalho|2012|4|0
 Mobile CSP|https://www.semanticscholar.org/paper/71cdb631ce5b4e9d8efc52896362547a4a055490|J. Woodcock and A. Wellings and A. Cavalcanti|2015|4|1
 Converting scenarios to CSP traces with Mise en Scene for requirements-based programming|https://www.semanticscholar.org/paper/d12658ffa5c582756136fc324e0bbe3364808491|J. Carter and W. B. Gardner|2008|4|0
 CSP as a Coordination Language|https://www.semanticscholar.org/paper/c6817f27cbdff3ad7186f137220491a5dfbe5b71|Moritz Kleine|2011|4|0
 Unfolding CSP|https://www.semanticscholar.org/paper/d11c09b7c43198f994fd6a0670e2cdede4d51707|M. Bundgaard and R. Milner|2010|3|0
 A Verified Protocol to Implement Multi-way Synchronisation and Interleaving in CSP|https://www.semanticscholar.org/paper/2f0c9d5a4afbadb9e26818311fd56ae468eebec0|M. Oliveira and Ivan Soares de Medeiros Júnior and J. Woodcock|2013|3|0
 Development of an ML-based Verification Tool for Timed CSP Processes|https://www.semanticscholar.org/paper/176d88c154cd18cd6a7ec6ed3be5ca5d7cd13461|T. Yamakawa and T. Ohashi and C. Fukunaga|2011|2|0
 Mise en Scene: Converting Scenarios to CSP Traces in Support of Requirements-Based Programming|https://www.semanticscholar.org/paper/363989b6ae3f6191dfea00fbc24e0c6cd6b3944a|J. Carter and W. B. Gardner|2007|2|0
 Tools for teaching CCRs, monitors, and CSP concurrent programming concepts|https://www.semanticscholar.org/paper/bf4178c1fa36ea3d87ede0d1960c41582c1670b1|R. Olsson and Carole M. McNamee|1995|1|0
 CSP for Parallelising Brzozowski's DFA Construction Algorithm|https://www.semanticscholar.org/paper/528fadf6dff50aef434ed6a4d2ff4f884d9830ef|Tinus Strauss and B. Watson and D. Kourie and L. Cleophas|2017|1|0

keyboardNav whitespace.html mariadb.html
