title DOML

import settings.scroll
htmlTitle DOML - Data notation

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/doml.pldb

paragraph
 DOML, aka Data Oriented Markup Language, is a <a href="../lists/languages.html?filter=dataNotation">data notation</a> created in <a href="../lists/languages.html?filter=2017">2017</a>.

kpiTable
 #870 <span title="TotalRank: 1378 Jobs: 62 Users: 2213 Facts: 366 Links: 950">on PLDB</span>
 5 Years Old
 0 <span title="Books about or leveraging DOML">Books</span>
 0 <span title="Academic publications about or leveraging DOML">Papers</span>







paragraph
 The specification document for DOML

list
 - DOML is developed on <a href="https://github.com/DOML-Lang/DOML">GitHub</a> and has 4 stars
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/doml">Improve our DOML file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 # Version 0.3
 // Construct a new Color
 Test = Color() {
   RGB = 255, 64, 128,
 }
 
 // Constructors do exist
 // the parameter names are purely for your own merit, they will check if its possible however (will be possible on most systems)
 TheSame = Color::Normalized(r: 1, g: 0.25, b: 0.5) {
   Name = &quot;Bob&quot;
 }
 
 // You can also just declare an object without scoping it
 Other = Color()
 Other.Name = &quot;X&quot;
 
 // You can declare random other values
 MyValue = 2
 
 // You can also edit the original Test at any point EITHER by doing
 Test.R = 50
 // Or by doing
 Test.{
   G = 128
 }
 
 // You can declare arrays like
 ArrayObject = []Color {
   ::Normalized(0.95, 0.55, 0.22){
     Name = &quot;Other&quot;, // Trailing commas are always allowed
   },
   // You can still do an empty construction
   ::() {
     RGB = 50, 25, 125,
   },
   // And thus you can leave out the ::()
   {
     RGB = 50, 25, 125,
   },
 }
 
 // You can also copy objects by doing
 NewObj = Other
 
 // Or can do something like
 NewObj.Name = ArrayObject[0].Name
 
 // You can also declare arrays inside object definitions
 MyTags = Tags() {
   // Note: all have to be of the same type
   SetTags = [&quot;Hello&quot;, &quot;Other&quot;, &quot;bits&quot;, &quot;bobs&quot;, &quot;kick&quot;]
   Name = MyTags.GetTags[0] // And indexing them works like you would think
 }
 
 // You can declare dictionaries like
 // Dictionaries within objects can also be created similarly
 MyDictionary = [String : Color] {
   { 
     &quot;Bob&quot; : Color::Normalized(0.5, 1.2, 3.5) {
       Name = &quot;Bob&#39;s Color&quot;
     }
   },
 }
 // No need to keep classes around in this example
 # Deinit all



















keyboardNav srecode-template.html femtolisp.html
