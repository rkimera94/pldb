title eC

import settings.scroll
htmlTitle eC - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/ec.pldb

* eC, aka Ecere C, is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2004 by Jérôme Jacovella-St-Louis.
 link ../lists/languages.html?filter=2004 2004
 link ../lists/creators.html#Jérôme_Jacovella-St-Louis Jérôme Jacovella-St-Louis
 

kpiTable
 #273 <span title="TotalRank: 656 Jobs: 101 Users: 546 Facts: 9 Links: 953">on PLDB</span>
 18 Years Old
 900 <span title="Crude user estimate from a linear model.">Users</span>
 2 <span title="Books about or leveraging eC">Books</span>
 0 <span title="Academic publications about or leveraging eC">Papers</span>
 139 <span title="eC repos on GitHub.">Repos</span>

* Try now: <a href="https://riju.codes/ec">Riju</a> · <a href="https://tio.run/#ec">TIO</a>

* eC (Ecere C) is an object-oriented programming language, defined as a super-set of the C language. eC was initially developed as part of the Ecere Cross-platform Software Development Kit project. The goals of the language are to provide object-oriented constructs, reflection, properties and dynamic modules on top of the C language while maintaining C compatibility and optimal native performance.eC currently relies on GCC or Clang to perform the final steps of compilation, using C as an intermediate language. <a href="https://en.wikipedia.org/wiki/EC_(programming_language)">Read more on Wikipedia...</a>

- the <a href="http://ec-lang.org/">eC website</a>
- the <a href="https://en.wikipedia.org/wiki/EC_(programming_language)">eC Wikipedia page</a>
- eC is developed on <a href="https://github.com/ecere/ecere-sdk/">GitHub</a> and has 298 stars
- There are at least 139 eC repos on <a href="https://github.com/search?q=language:eC">GitHub</a>
- eC first developed in <a href="../lists/originCommunities.html#Ecere_Corporation">Ecere Corporation</a>
- file extensions for eC include ec and eh
- The  Google BigQuery Public Dataset GitHub snapshot shows 894 users using eC in 920 repos on <a href="https://api.github.com/search/repositories?q=language:eC">GitHub</a>
- Explore eC snippets on <a href="http://www.rosettacode.org/wiki/Category:EC">Rosetta Code</a>
- <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/c_like.py">syntax highlighting</a> for eC
- GitHub supports <a href="https://github.com/ecere/ec.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for eC
- <a href="http://ec-lang.org/">ec-lang.org</a> was registered in 2014
- See also: (8 related languages)<a href="c.html">C</a>, <a href="python.html">Python</a>, <a href="llvmir.html">LLVM IR</a>, <a href="linux.html">Linux</a>, <a href="freebsd.html">FreeBSD</a>, <a href="android.html">Android</a>, <a href="javascript.html">JavaScript</a>, <a href="wasm.html">WebAssembly</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/ec">Improve our eC file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://riju.codes/ec'>Riju</a>:
code
 class Main : Application
 {
    void Main()
    {
       PrintLn(&quot;Hello, world!&quot;);
    }
 }
 

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/e/Ec.ec'>hello-world</a>:
code
 class HelloWorldApp : Application
 {
    void Main()
    {
       PrintLn(&quot;Hello World&quot;);
    }
 }
 

exampleCodeHeader Example from <a href='https://github.com/ecere/ec.tmbundle'>Linguist</a>:
code
 import &quot;ide&quot;
 
 class Designer : DesignerBase
 {
    ~Designer()
    {
       if(GetActiveDesigner() == this)
       {
          SetActiveDesigner(null);
       }
       if(classDesigner)
          delete classDesigner;
    }
 
    // *** DesignerBase Implementation ***
 
    void ModifyCode()
    {
       codeEditor.ModifyCode();
    }
 
    void UpdateProperties()
    {
       codeEditor.DesignerModifiedObject();
    }
 
    void CodeAddObject(Instance instance, ObjectInfo * object)
    {
       codeEditor.AddObject(instance, object);
    }
 
    void SheetAddObject(ObjectInfo object)
    {
       codeEditor.sheet.AddObject(object, object.name, typeData, true); //className, true);
    }
 
    void AddToolBoxClass(Class _class)
    {
       ((IDEWorkSpace)master).toolBox.AddControl(_class);
    }
 
    void AddDefaultMethod(Instance instance, Instance classInstance)
    {
       Class _class = instance._class;
       Method defaultMethod = null;
 
       for( ; _class; _class = _class.base)
       {
          Method method;
          int minID = MAXINT;
          for(method = (Method)_class.methods.first; method; method = (Method)((BTNode)method).next)
          {
             if(method.type == virtualMethod)
             {
                if(!method.dataType)
                   method.dataType = ProcessTypeString(method.dataTypeString, false);
                if(method.vid &lt; minID &amp;&amp; (instance == classInstance || (method.dataType.thisClass &amp;&amp; eClass_IsDerived(classInstance._class, method.dataType.thisClass.registered))))
                {
                   defaultMethod = method;
                   minID = method.vid;
                }
             }
          }
          if(defaultMethod)
             break;
       }
       codeEditor.AddMethod(defaultMethod);
    }
 
    bool ObjectContainsCode(ObjectInfo object)
    {
       // Confirmation if control contains code
       if(object.instCode)
       {
          MembersInit members;
          if(object.instCode.members)
          {
             for(members = object.instCode.members-&gt;first; members; members = members.next)
             {
                if(members.type == methodMembersInit)
                {
                   //if(!Code_IsFunctionEmpty(members.function))
                   {
                      return true;
                   }
                }
             }
          }
       }
       return false;
    }
 
    void DeleteObject(ObjectInfo object)
    {
       if(codeEditor)
          codeEditor.DeleteObject(object);
    }
 
    void RenameObject(ObjectInfo object, const char * name)
    {
       if(object &amp;&amp; (name || !object.classDefinition))
          codeEditor.RenameObject(object, name);
    }
 
    bool FindObject(Instance * object, const char * string)
    {
       ObjectInfo classObject;
       for(classObject = codeEditor.classes.first; classObject; classObject = classObject.next)
       {
          ObjectInfo check;
          if(classObject.name &amp;&amp; !strcmp(string, classObject.name))
          {
             *object = classObject.instance;
             break;
          }
          for(check = classObject.instances.first; check; check = check.next)
          {
             if(check.name &amp;&amp; !strcmp(string, check.name))
             {
                *object = check.instance;
                break;
             }
          }
          if(check)
             return true;
       }
       return false;
    }
 
    void SelectObjectFromDesigner(ObjectInfo object)
    {
       codeEditor.SelectObjectFromDesigner(object);
    }
 
    borderStyle = sizable;
    isActiveClient = true;
    hasVertScroll = true;
    hasHorzScroll = true;
    hasClose = true;
    hasMaximize = true;
    hasMinimize = true;
    text = $&quot;Designer&quot;;
    menu = Menu { };
    anchor = Anchor { left = 300, right = 150, top = 0, bottom = 0 };
 
    ToolBox toolBox;
    CodeEditor codeEditor;
 
    Menu fileMenu { menu, $&quot;File&quot;, f };
    MenuItem fileSaveItem
    {
       fileMenu, $&quot;Save&quot;, s, ctrlS;
       bool NotifySelect(MenuItem selection, Modifiers mods)
       {
          return codeEditor.MenuFileSave(selection, mods);
       }
    };
    MenuItem fileSaveAsItem
    {
       fileMenu, $&quot;Save As...&quot;, a;
       bool NotifySelect(MenuItem selection, Modifiers mods)
       {
          return codeEditor.MenuFileSaveAs(selection, mods);
       }
    };
    bool debugClosing;
 
    bool OnClose(bool parentClosing)
    {
       if(!parentClosing)
       {
          if(codeEditor &amp;&amp; codeEditor.inUseDebug &amp;&amp; !debugClosing)
          {
             debugClosing = true;
             closing = false;
             if(CloseConfirmation(false))
             {
                visible = false;
                if(modifiedDocument)
                   OnFileModified({ modified = true }, null);
             }
             debugClosing = false;
             return false;
          }
          if(codeEditor &amp;&amp; !codeEditor.closing &amp;&amp; !debugClosing)
          {
             if(!codeEditor.visible)
             {
                if(!codeEditor.Destroy(0))
                   return false;
                else
                   codeEditor = null;
             }
             else
             {
                visible = false;
                return false;
             }
          }
       }
       return true;
    }
 
    bool OnActivate(bool active, Window previous, bool * goOnWithActivation, bool direct)
    {
       if(active)
       {
          codeEditor.EnsureUpToDate();
          codeEditor.fixCaret = true;
          /*
          if(classDesigner)
             classDesigner.Activate();
          */
       }
       return true;
    }
 
    bool OnKeyHit(Key key, unichar ch)
    {
       return codeEditor.sheet.OnKeyHit(key, ch);
    }
 
    watch(modifiedDocument)
    {
       fileSaveItem.disabled = !modifiedDocument &amp;&amp; codeEditor.fileName;
    };
 
    // *** METHODS ACCESSED FROM PROPERTY SHEET/TOOLBOX/CODE EDITOR ***
    void Reset()
    {
       if(classDesigner)
       {
          classDesigner.Reset();
          classDesigner.SelectObject(null, null);
          classDesigner.Destroy(0);
          delete classDesigner;
       }
    }
 
    void FillToolBox()
    {
       if(this &amp;&amp; classDesigner)
          classDesigner.ListToolBoxClasses(this);
    }
 
    void SelectObject(ObjectInfo object, Instance instance)
    {
       ClassDesignerBase classDesigner = this.classDesigner;
 #ifdef _DEBUG
       if(instance &amp;&amp; instance._class.module.application != codeEditor.privateModule)
          printf(&quot;warning: SelectObject: instance._class.module.application != codeEditor.privateModule\n&quot;);
 #endif
       if(!classDesigner || !instance || classDesigner._class != (Class)eInstance_GetDesigner(instance))
       {
          if(classDesigner)
          {
             classDesigner.SelectObject(null, null);
             classDesigner.Destroy(0);
             classDesigner = null;
             delete this.classDesigner;
          }
          if(instance)
          {
             this.classDesigner = classDesigner = eInstance_New(eInstance_GetDesigner(instance));
             incref classDesigner;
             //if(!classDesigner.parent)
             {
                classDesigner.parent = this;
                classDesigner.anchor = Anchor { left = 0, right = 0, top = 0, bottom = 0 };
             }
             classDesigner.Create();
          }
       }
       // Call class editor SelectObject
       if(classDesigner)
          classDesigner.SelectObject(object, instance);
    }
 
    void AddObject()
    {
       // Call class editor AddObject
       if(classDesigner)
          classDesigner.AddObject();
       if(visible)
          Activate();
       else
          codeEditor.Activate();
    }
 
    void CreateObject(Instance instance, ObjectInfo object, bool isClass, Instance iclass)
    {
       subclass(ClassDesignerBase) designerClass = eInstance_GetDesigner(instance);
 
       // Call class editor CreateObject
       if(designerClass)
          designerClass.CreateObject(this, instance, object, isClass, iclass);
    }
 
    void ::PostCreateObject(Instance instance, ObjectInfo object, bool isClass, Instance iclass)
    {
       subclass(ClassDesignerBase) designerClass = eInstance_GetDesigner(instance);
 
       // Call class editor PostCreateObject
       if(designerClass)
          designerClass.PostCreateObject(instance, object, isClass, iclass);
    }
 
    void ::DroppedObject(Instance instance, ObjectInfo object, bool isClass, Instance iclass)
    {
       subclass(ClassDesignerBase) designerClass = eInstance_GetDesigner(instance);
 
       // Call class editor PostCreateObject
       if(designerClass)
          designerClass.DroppedObject(instance, object, isClass, iclass);
    }
 
    void PrepareTestObject(Instance instance)
    {
       subclass(ClassDesignerBase) designerClass = eInstance_GetDesigner(instance);
       if(designerClass)
          designerClass.PrepareTestObject(this, instance);
    }
 
    void ::DestroyObject(Instance instance)
    {
       subclass(ClassDesignerBase) designerClass = eInstance_GetDesigner(instance);
       if(designerClass)
          designerClass.DestroyObject(instance);
    }
 
    void ::FixProperty(Property prop, Instance instance)
    {
       subclass(ClassDesignerBase) designerClass = eInstance_GetDesigner(instance);
       if(designerClass)
          designerClass.FixProperty(prop, instance);
    }
 }
 

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/EC_(programming_language)'>Wikipedia</a>:
code
 import &quot;ecere&quot;
 
 class HelloForm : Window
 {
    caption = &quot;My First eC Application&quot;;
    borderStyle = sizable;
    clientSize = { 304, 162 };
    hasClose = true;
 
    Label label
    {
       this, position = { 10, 10 }, font = { &quot;Arial&quot;, 30 },
       caption = &quot;Hello, World!!&quot;
    };
 };
 
 HelloForm hello { };

foldBreak
## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Booleans
  FeatureLink ../languages/booleans-feature.html
  Supported ✓
  Example
  Token true false
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   /* A comment
   */
  Token /* */
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token PrintLn
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 

foldBreak
## Books about eC from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Early Nutrition And Its Later Consequences: New Opportunities: Perinatal Programming Of Adult Health - Ec Supported Research (advances In Experimental Medicine And Biology)|https://isbndb.com/book/9781402035340|Berthold Koletzko and Margaret Ashwell and Peter Dodds and Hans Akerblom|2006|Springer
 Early Nutrition and its Later Consequences: New Opportunities: Perinatal Programming of Adult Health - EC Supported Research (Advances in Experimental Medicine and Biology Book 569)|https://isbndb.com/book/9781402035357|Abdelghani Bellouquid; Marcello Delitala|2006|Springer

keyboardNav minid.html clojurescript.html
