title ECL

import settings.scroll
htmlTitle ECL - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/ecl.pldb

paragraph
 ECL is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2000">2000</a>.

kpiTable
 #790 <span title="TotalRank: 1337 Jobs: 101 Users: 950 Facts: 286 Links: 953">on PLDB</span>
 22 Years Old
 277 <span title="Crude user estimate from a linear model.">Users</span>
 1 <span title="Books about or leveraging ECL">Books</span>
 0 <span title="Academic publications about or leveraging ECL">Papers</span>
 234 <span title="ECL repos on GitHub.">Repos</span>







paragraph
 ECL is a declarative, data centric programming language designed in 2000 to allow a team of programmers to process big data across a high performance computing cluster without the programmer being involved in many of the lower level, imperative decisions.. <a href="https://en.wikipedia.org/wiki/ECL,_data-centric_programming_language_for_Big_Data">Read more on Wikipedia...</a>

list
 - the <a href="http://hpccsystems.com/">ECL website</a>
 - the <a href="https://en.wikipedia.org/wiki/ECL,_data-centric_programming_language_for_Big_Data">ECL Wikipedia page</a>
 - ECL is developed on <a href="https://github.com/hpcc-systems">GitHub</a>
 - There are at least 234 ECL repos on <a href="https://github.com/search?q=language:ECL">GitHub</a>
 - ECL first developed in <a href="../lists/originCommunities.html#LexisNexis_Risk_Solutions_Group">LexisNexis Risk Solutions Group</a>
 - file extensions for ECL include ecl and eclxml
 - The  Google BigQuery Public Dataset GitHub snapshot shows 25 users using ECL in 25 repos on <a href="https://api.github.com/search/repositories?q=language:ECL">GitHub</a>
 - Explore ECL snippets on <a href="http://www.rosettacode.org/wiki/Category:ECL">Rosetta Code</a>
 - There is a <a href="codemirror.html">CodeMirror</a> <a href="https://github.com/codemirror/codemirror5/tree/master/mode/ecl">package</a> for syntax highlighting ECL
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/ecl.py">syntax highlighting</a> for ECL
 - GitHub supports <a href="https://github.com/hpcc-systems/ecl-tmLanguage" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for ECL
 - <a href="http://hpccsystems.com/">hpccsystems.com</a> was registered in 2010
 - See also: (5 related languages)<a href="linux.html">Linux</a>, <a href="prolog.html">Prolog</a>, <a href="pascal.html">Pascal</a>, <a href="sql.html">SQL</a>, <a href="clarion.html">Clarion</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/ecl">Improve our ECL file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/hpcc-systems/ecl-tmLanguage'>Linguist</a>:
code
 /* 
  * Multi-line comment
  */
 #option (&#39;slidingJoins&#39;, true);
 
 namesRecord :=
             RECORD
 string20        surname;
 string10        forename;
 integer2        age;
 integer2        dadAge;
 integer2        mumAge;
             END;
 
 namesRecord2 :=
             record
 string10        extra;
 namesRecord;
             end;
 
 namesTable := dataset(&#39;x&#39;,namesRecord,FLAT);
 namesTable2 := dataset(&#39;y&#39;,namesRecord2,FLAT);
 
 integer2 aveAgeL(namesRecord l) := (l.dadAge+l.mumAge)/2;
 integer2 aveAgeR(namesRecord2 r) := (r.dadAge+r.mumAge)/2;
 
 // Standard join on a function of left and right
 output(join(namesTable, namesTable2, aveAgeL(left) = aveAgeR(right)));
 
 //Several simple examples of sliding join syntax
 output(join(namesTable, namesTable2, left.age &gt;= right.age - 10 and left.age &lt;= right.age +10));
 output(join(namesTable, namesTable2, left.age between right.age - 10 and right.age +10));
 output(join(namesTable, namesTable2, left.age between right.age + 10 and right.age +30));
 output(join(namesTable, namesTable2, left.age between (right.age + 20) - 10 and (right.age +20) + 10));
 output(join(namesTable, namesTable2, aveAgeL(left) between aveAgeR(right)+10 and aveAgeR(right)+40));
 
 //Same, but on strings.  Also includes age to ensure sort is done by non-sliding before sliding.
 output(join(namesTable, namesTable2, left.surname between right.surname[1..10]+&#39;AAAAAAAAAA&#39; and right.surname[1..10]+&#39;ZZZZZZZZZZ&#39; and left.age=right.age));
 output(join(namesTable, namesTable2, left.surname between right.surname[1..10]+&#39;AAAAAAAAAA&#39; and right.surname[1..10]+&#39;ZZZZZZZZZZ&#39; and left.age=right.age,all));
 
 //This should not generate a self join
 output(join(namesTable, namesTable, left.age between right.age - 10 and right.age +10));
 

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/ECL,_data-centric_programming_language_for_Big_Data'>Wikipedia</a>:
code
 D := DATASET([{&#39;ECL&#39;},{&#39;Declarative&#39;},{&#39;Data&#39;},{&#39;Centric&#39;},{&#39;Programming&#39;},{&#39;Language&#39;}],{STRING Value;});





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   /* A comment
   */
  Token /* */
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 





foldBreak
subsection Books about ECL from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Ecl Programming Language|https://isbndb.com/book/9786133156937|Surhone and Lambert M. and Tennoe and Mariam T. and Henssonow and Susan F.||








keyboardNav doodle.html p.html
