title ELLA

import settings.scroll
htmlTitle ELLA - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/ella-programming-language.pldb

* ELLA is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 1979.
 link ../lists/languages.html?filter=1979 1979

 

kpiTable
 #1007 <span title="TotalRank: 1548 Jobs: 102 Users: 1586 Facts: 493 Links: 953">on PLDB</span>
 43 Years Old
 70 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging ELLA">Books</span>
 0 <span title="Academic publications about or leveraging ELLA">Papers</span>

* ELLA is a Hardware description language and support toolset. Developed by the Royal Signals and Radar Establishment during the 1980s and 1990s. Includes tools to perform:  design transformation symbolic simulations formal verificationELLA is a winner of the 1989 Queen's Award for Technological Achievement.. <a href="https://en.wikipedia.org/wiki/ELLA_%28programming_language%29">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/ELLA_%28programming_language%29">ELLA Wikipedia page</a>
- ELLA first developed in <a href="../lists/originCommunities.html#Royal_Signals_and_Radar_Establishment">Royal Signals and Radar Establishment</a>
- ELLA is listed on <a href="https://hopl.info/showlanguage.prx?exp=847">HOPL</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/ella-programming-language">Improve our ELLA file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/ELLA_%28programming_language%29'>Wikipedia</a>:
code
 MAC ZIP = ([INT n]TYPE t: vector1 vector2) -&gt; [n][2]t:
   [INT k = 1..n](vector1[k], vector2[k]).
      
 MAC TRANSPOSE = ([INT n][INT m]TYPE t: matrix) -&gt; [m][n]t:
   [INT i = 1..m] [INT j = 1..n] matrix[j][i].
 
 MAC INNER_PRODUCT{FN * = [2]TYPE t -&gt; TYPE s, FN + = [2]s -&gt; s}
                  = ([INT n][2]t: vector) -&gt; s:
   IF n = 1 THEN *vector[1]
   ELSE *vector[1] + INNER_PRODUCT {*,+} vector[2..n]
   FI.
 
 MAC MATRIX_MULT {FN * = [2]TYPE t-&gt;TYPE s, FN + = [2]s-&gt;s} =
 ([INT n][INT m]t: matrix1, [m][INT p]t: matrix2) -&gt; [n][p]s:
 BEGIN
   LET transposed_matrix2 = TRANSPOSE matrix2.
 OUTPUT [INT i = 1..n][INT j = 1..p]
        INNER_PRODUCT{*,+}ZIP(matrix1[i],transposed_matrix2[j])
 END.
 
 TYPE element = NEW elt/(1..20),
      product = NEW prd/(1..1200).
 
 FN PLUS = (product: integer1 integer2) -&gt; product:
   ARITH integer1 + integer2.
 
 FN MULT = (element: integer1 integer2) -&gt; product:
   ARITH integer1 * integer2.
 
 FN MULT_234 = ([2][3]element:matrix1, [3][4]element:matrix2) -&gt;
              [2][4]product:  
   MATRIX_MULT{MULT,PLUS}(matrix1, matrix2).
 
 FN TEST = () -&gt; [2][4]product:
 ( LET m1 = ((elt/2, elt/1, elt/1),
             (elt/3, elt/6, elt/9)), 
       m2 = ((elt/6, elt/1, elt/3, elt/4), 
             (elt/9, elt/2, elt/8, elt/3),
             (elt/6, elt/4, elt/1, elt/2)).
   OUTPUT
     MULT_234 (m1, m2)
 ).
 
 COM test: just displaysignal MOC

keyboardNav maya.html etoys.html
