title EuLisp

import settings.scroll
htmlTitle EuLisp - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/eulisp.pldb

paragraph
 EuLisp is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1985">1985</a>.

kpiTable
 #180 <span title="TotalRank: 493 Jobs: 101 Users: 1441 Facts: 261 Links: 131">on PLDB</span>
 37 Years Old
 90 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging EuLisp">Books</span>
 0 <span title="Academic publications about or leveraging EuLisp">Papers</span>







paragraph
 EuLisp is a statically and dynamically scoped Lisp dialect developed by a loose formation of industrial and academic Lisp users and developers from around Europe. The standardizers intended to create a new Lisp "less encumbered by the past" (compared to Common Lisp), and not so minimalist as Scheme. Another objective was to integrate the object-oriented programming paradigm well. <a href="https://en.wikipedia.org/wiki/EuLisp">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/EuLisp">EuLisp Wikipedia page</a>
 - EuLisp is listed on <a href="https://hopl.info/showlanguage.prx?exp=1139">HOPL</a>
 - See also: (22 related languages)<a href="lisp.html">Lisp</a>, <a href="linux.html">Linux</a>, <a href="common-lisp.html">Common Lisp</a>, <a href="scheme.html">Scheme</a>, <a href="t.html">T</a>, <a href="standard-ml.html">Standard ML</a>, <a href="haskell.html">Haskell</a>, <a href="dylan.html">Dylan</a>, <a href="islisp.html">ISLISP</a>, <a href="interlisp.html">Interlisp</a>, <a href="lisp-machine-lisp.html">Lisp Machine Lisp</a>, <a href="le-lisp.html">Le-Lisp</a>, <a href="emacs-lisp.html">Emacs Lisp</a>, <a href="autolisp.html">AutoLISP</a>, <a href="openlisp.html">OpenLisp</a>, <a href="picolisp.html">PicoLisp</a>, <a href="newlisp.html">NewLisp</a>, <a href="racket.html">Racket</a>, <a href="guile.html">Guile</a>, <a href="clojure.html">Clojure</a>, <a href="arc.html">Arc</a>, <a href="lfe.html">LFE</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/eulisp">Improve our EuLisp file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/EuLisp'>Wikipedia</a>:
code
 (defmodule hanoi
   (syntax (syntax-0)
    import (level-0)
    export (hanoi))
 
 ;;;-------------------------------------------------
 ;;; Tower definition
 ;;;-------------------------------------------------
 (defconstant *max-tower-height* 10)
 
 (defclass &lt;tower&gt; ()
   ((id reader: tower-id keyword: id:)
    (blocks accessor: tower-blocks)))
 
 (defun build-tower (x n)
   (labels ((loop (i res)
                  (if (= i 0) res
                    (loop (- i 1) (cons i res)))))
           ((setter tower-blocks) x (loop n ()))
           x))
 
 (defmethod generic-print ((x &lt;tower&gt;) (s &lt;stream&gt;))
   (sformat s &quot;#&lt;tower ~a: ~a&gt;&quot; (tower-id x) (tower-blocks x)))
 
 ;;;-------------------------------------------------
 ;;; Access to tower blocks
 ;;;-------------------------------------------------
 (defgeneric push (x y))
 
 (defmethod push ((x &lt;tower&gt;) (y &lt;fpi&gt;))
   (let ((blocks (tower-blocks x)))
     (if (or (null? blocks) (&lt; y (car blocks)))
         ((setter tower-blocks) x (cons y blocks))
       (error &lt;condition&gt;
              (fmt &quot;cannot push block of size ~a on tower ~a&quot; y x)))))
 
 (defgeneric pop (x))
 
 (defmethod pop ((x &lt;tower&gt;))
   (let ((blocks (tower-blocks x)))
     (if blocks
         (progn
           ((setter tower-blocks) x (cdr blocks))
           (car blocks))
       (error &lt;condition&gt;
              (fmt &quot;cannot pop block from empty tower ~a&quot; x)))))
 
 ;;;-------------------------------------------------
 ;;; Move n blocks from tower x1 to tower x2 using x3 as buffer
 ;;;-------------------------------------------------
 (defgeneric move (n x1 x2 x3))
 
 (defmethod move ((n &lt;fpi&gt;) (x1 &lt;tower&gt;) (x2 &lt;tower&gt;) (x3 &lt;tower&gt;))
   (if (= n 1)
       (progn
         (push x2 (pop x1))
         (print x1 nl x2 nl x3 nl nl))
     (progn
       (move (- n 1) x1 x3 x2)
       (move 1 x1 x2 x3)
       (move (- n 1) x3 x2 x1))))
 
 ;;;-------------------------------------------------
 ;;; Initialize and run the &#39;Towers of Hanoi&#39;
 ;;;-------------------------------------------------
 (defun hanoi ()
   (let ((x1 (make &lt;tower&gt; id: 0))
         (x2 (make &lt;tower&gt; id: 1))
         (x3 (make &lt;tower&gt; id: 2)))
     (build-tower x1 *max-tower-height*)
     (build-tower x2 0)
     (build-tower x3 0)
     (print x1 nl x2 nl x3 nl nl)
     (move *max-tower-height* x1 x2 x3)))
 
 (hanoi)
 
 ;;;-------------------------------------------------
 )  ;; End of module hanoi
 ;;;-------------------------------------------------





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   ; A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   ; A comment
  Token ;
 row
  Feature Multiple Inheritance
  FeatureLink ../languages/multiple-inheritance-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav monkey.html autoit.html
