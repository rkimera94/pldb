title Extensible Embeddable Language

import settings.scroll
htmlTitle Extensible Embeddable Language - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/extensible-embeddable-language.pldb

paragraph
 Extensible Embeddable Language is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2005">2005</a> by <a href="../lists/creators.html#David_Olofson">David Olofson</a>.

kpiTable
 #959 <span title="TotalRank: 1459 Jobs: 62 Users: 1796 Facts: 447 Links: 950">on PLDB</span>
 17 Years Old
 45 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Extensible Embeddable Language">Books</span>
 0 <span title="Academic publications about or leveraging Extensible Embeddable Language">Papers</span>







paragraph
 The Extensible Embeddable Language (EEL) is a scripting and programming language in development by David Olofson. EEL is intended for scripting in realtime systems with cycle rates in the kHz range, such as musical synthesizers and industrial control systems, but also aspires to be usable as a platform independent general purpose programming language.. <a href="https://en.wikipedia.org/wiki/Extensible_Embeddable_Language">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Extensible_Embeddable_Language">Extensible Embeddable Language Wikipedia page</a>
 - See also: <a href="lua.html">Lua</a>, <a href="c.html">C</a>, <a href="pascal.html">Pascal</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/extensible-embeddable-language">Improve our Extensible Embeddable Language file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Extensible_Embeddable_Language'>Wikipedia</a>:
code
 export function main&lt;args&gt;
 {
     print(&quot;Recursion test 1:\n&quot;);
     
     procedure recurse(arg)
     {
         print(&quot;arg = &quot;, arg, &quot;\n&quot;);
         if arg
              recurse(arg - 1);
     }
     
     recurse(10);
     
     print(&quot;Recursion test 2; Mutual Recursion:\n&quot;);
     
     procedure mrecurse2(arg);
     
     procedure mrecurse1(arg)
     {
          print(&quot;arg = &quot;, arg, &quot;\n&quot;);
          if arg
               mrecurse2(arg);
     }
     
     procedure mrecurse2(arg)
     {
          mrecurse1(arg - 1);
     };
     
     mrecurse1(10);
     
     print(&quot;Recursion test 2; Mutual Recursion with Function Reference:\n&quot;);
     
     procedure mrrecurse1(arg, fn)
     {
          print(&quot;arg = &quot;, arg, &quot;\n&quot;);
          if arg
               fn(arg, fn);
     }
     
     local mrr2 = procedure (arg, fn)
     {
          mrrecurse1(arg - 1, fn);
     };
     
     mrrecurse1(10, mrr2);
     
     print(Recursion tests done.\n);
     return 0;
 }



















keyboardNav pasukon.html operational-control-language.html
