title FLOW-MATIC

import settings.scroll
htmlTitle FLOW-MATIC - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/flow-matic.pldb

paragraph
 FLOW-MATIC is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1955">1955</a> by <a href="../lists/creators.html#Grace_Hopper">Grace Hopper</a>.

kpiTable
 #617 <span title="TotalRank: 1176 Jobs: 101 Users: 770 Facts: 754 Links: 321">on PLDB</span>
 67 Years Old
 425 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging FLOW-MATIC">Books</span>
 0 <span title="Academic publications about or leveraging FLOW-MATIC">Papers</span>







paragraph
 FLOW-MATIC, originally known as B-0 (Business Language version 0), was the first English-like data processing language. It was developed for the UNIVAC I at Remington Rand under Grace Hopper during the period from 1955 until 1959. It had a strong influence on the development of COBOL.. <a href="https://en.wikipedia.org/wiki/FLOW-MATIC">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/FLOW-MATIC">FLOW-MATIC Wikipedia page</a>
 - FLOW-MATIC is listed on <a href="https://hopl.info/showlanguage.prx?exp=27">HOPL</a>
 - See also: (3 related languages)<a href="arith-matic.html">ARITH-MATIC</a>, <a href="math-matic.html">MATH-MATIC</a>, <a href="cobol.html">COBOL</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/flow-matic">Improve our FLOW-MATIC file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/FLOW-MATIC'>Wikipedia</a>:
code
 (0)  INPUT INVENTORY FILE-A PRICE FILE-B ; OUTPUT PRICED-INV FILE-C UNPRICED-INV
      FILE-D ; HSP D .
  (1)  COMPARE PRODUCT-NO (A) WITH PRODUCT-NO (B) ; IF GREATER GO TO OPERATION 10 ;
      IF EQUAL GO TO OPERATION 5 ; OTHERWISE GO TO OPERATION 2 .
  (2)  TRANSFER A TO D .
  (3)  WRITE-ITEM D .
  (4)  JUMP TO OPERATION 8 .
  (5)  TRANSFER A TO C .
  (6)  MOVE UNIT-PRICE (B) TO UNIT-PRICE (C) .
  (7)  WRITE-ITEM C .
  (8)  READ-ITEM A ; IF END OF DATA GO TO OPERATION 14 .
  (9)  JUMP TO OPERATION 1 .
 (10)  READ-ITEM B ; IF END OF DATA GO TO OPERATION 12 .
 (11)  JUMP TO OPERATION 1 .
 (12)  SET OPERATION 9 TO GO TO OPERATION 2 .
 (13)  JUMP TO OPERATION 2 .
 (14)  TEST PRODUCT-NO (B) AGAINST ; IF EQUAL GO TO OPERATION 16 ;
      OTHERWISE GO TO OPERATION 15 .
 (15)  REWIND B .
 (16)  CLOSE-OUT FILES C ; D .
 (17)  STOP . (END)



















keyboardNav noms-db.html visual-prolog.html
