title Generators

import settings.scroll
htmlTitle Generators - Language feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/generators-feature.pldb

* Generators is a <a href="../lists/features.html">language feature</a> created in 1975.
 link ../lists/languages.html?filter=1975 1975

 

* In computer science, a generator is a special routine that can be used to control the iteration behaviour of a loop. All generators are iterators.

- the <a href="https://en.wikipedia.org/wiki/Generator_(computer_programming)">Generators Wikipedia page</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/generators-feature">Improve our Generators file</a>

html
 <br>

* Languages *with* Generators include <a href="javascript.html">JavaScript</a>, <a href="python.html">Python</a>, <a href="csharp.html">C#</a>, <a href="ruby.html">Ruby</a>

exampleCodeHeader Example from <a href="javascript.html">JavaScript</a>:

code
 function* fibonacci(limit) {
     let [prev, curr] = [0, 1];
     while (!limit || curr &lt;= limit) {
         yield curr;
         [prev, curr] = [curr, prev + curr];
     }
 }
 // bounded by upper limit 10
 for (let n of fibonacci(10)) {
     console.log(n);
 }
 // generator without an upper bound limit
 for (let n of fibonacci()) {
     console.log(n);
     if (n &gt; 10000) break;
 }
 // manually iterating
 let fibGen = fibonacci();
 console.log(fibGen.next().value); // 1
 console.log(fibGen.next().value); // 1
 console.log(fibGen.next().value); // 2
 console.log(fibGen.next().value); // 3
 console.log(fibGen.next().value); // 5
 console.log(fibGen.next().value); // 8
 // picks up from where you stopped
 for (let n of fibGen) {
     console.log(n);
     if (n &gt; 10000) break;
 }

exampleCodeHeader Example from <a href="python.html">Python</a>:

code
 https://wiki.python.org/moin/Generators

exampleCodeHeader Example from <a href="csharp.html">C#</a>:

code
 // Method that takes an iterable input (possibly an array)
 // and returns all even numbers.
 public static IEnumerable&lt;int&gt; GetEven(IEnumerable&lt;int&gt; numbers) {
     foreach (int i in numbers) {
         if ((i % 2) == 0) {
             yield return i;
         }
     }
 }

exampleCodeHeader Example from <a href="ruby.html">Ruby</a>:

code
 # Generator from an Enumerator object
 chars = Enumerator.new([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;Z&#39;])
 
 4.times { puts chars.next }
 
 # Generator from a block
 count = Enumerator.new do |yielder|
   i = 0
   loop { yielder.yield i += 1 }
 end
 
 100.times { puts count.next }

keyboardNav garbage-collection-feature.html gotos-feature.html
