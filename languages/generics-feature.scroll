title Generics

import settings.scroll
htmlTitle Generics - Language feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/generics-feature.pldb

* Generics is a <a href="../lists/features.html">language feature</a> created in 1973.
 link ../lists/languages.html?filter=1973 1973

 

* Generic programming is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters. This approach, pioneered by ML in 1973, permits writing common functions or types that differ only in the set of types on which they operate when used, thus reducing duplication. Such software entities are known as generics in Python, Ada, C#, Delphi, Eiffel, F#, Java, Rust, Swift, TypeScript and Visual Basic .NET. <a href="https://en.wikipedia.org/wiki/Generic_programming">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/Generic_programming">Generics Wikipedia page</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/generics-feature">Improve our Generics file</a>

html
 <br>

* Languages *with* Generics include <a href="java.html">Java</a>, <a href="csharp.html">C#</a>, <a href="ada.html">Ada</a>, <a href="typescript.html">TypeScript</a>, <a href="felix.html">Felix</a>, <a href="x.html">Jule</a>

exampleCodeHeader Example from <a href="java.html">Java</a>:

code
 List&lt;String&gt; v = new ArrayList&lt;String&gt;();
 v.add(&quot;test&quot;);
 Integer i = v.get(0); // (type error)  compilation-time error

exampleCodeHeader Example from <a href="csharp.html">C#</a>:

code
 // Declare the generic class.
 public class GenericList&lt;T&gt;
 {
     public void Add(T input) { }
 }
 class TestGenericList
 {
     private class ExampleClass { }
     static void Main()
     {
         // Declare a list of type int.
         GenericList&lt;int&gt; list1 = new GenericList&lt;int&gt;();
         list1.Add(1);
 
         // Declare a list of type string.
         GenericList&lt;string&gt; list2 = new GenericList&lt;string&gt;();
         list2.Add(&quot;&quot;);
 
         // Declare a list of type ExampleClass.
         GenericList&lt;ExampleClass&gt; list3 = new GenericList&lt;ExampleClass&gt;();
         list3.Add(new ExampleClass());
     }
 }

exampleCodeHeader Example from <a href="ada.html">Ada</a>:

code
 generic
    Max_Size : Natural; -- a generic formal value
    type Element_Type is private; -- a generic formal type; accepts any nonlimited type
 package Stacks is
    type Size_Type is range 0 .. Max_Size;
    type Stack is limited private;
    procedure Create (S : out Stack;
                      Initial_Size : in Size_Type := Max_Size);
    procedure Push (Into : in out Stack; Element : in Element_Type);
    procedure Pop (From : in out Stack; Element : out Element_Type);
    Overflow : exception;
    Underflow : exception;
 private
    subtype Index_Type is Size_Type range 1 .. Max_Size;
    type Vector is array (Index_Type range &lt;&gt;) of Element_Type;
    type Stack (Allocated_Size : Size_Type := 0) is record
       Top : Index_Type;
       Storage : Vector (1 .. Allocated_Size);
    end record;
 end Stacks;

exampleCodeHeader Example from <a href="typescript.html">TypeScript</a>:

code
 function identity&lt;T&gt;(arg: T): T {
    return arg;
 }

exampleCodeHeader Example from <a href="felix.html">Felix</a>:

code
 // generics
 fun g (x) =&gt; f (f x);
 println$ g 1, g &quot;hello&quot;;
 println$ _map f (1,&quot;hello&quot;,2.0);

exampleCodeHeader Example from <a href="x.html">Jule</a>:

code
 type[T]
 fn generic_function(s: []T) {
     // ...
 }

keyboardNav switch-statements-feature.html pattern-matching-feature.html
