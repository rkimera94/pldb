title GOLD

import settings.scroll
htmlTitle GOLD - Grammar language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/gold.pldb

paragraph
 GOLD is a <a href="../lists/languages.html?filter=grammarLanguage">grammar language</a> created in <a href="../lists/languages.html?filter=2012">2012</a>.

kpiTable
 #713 <span title="TotalRank: 1264 Jobs: 101 Users: 1451 Facts: 498 Links: 665">on PLDB</span>
 10 Years Old
 91 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging GOLD">Books</span>
 0 <span title="Academic publications about or leveraging GOLD">Papers</span>







paragraph
 GOLD is a free parsing system that is designed to support multiple programming languages.. <a href="https://en.wikipedia.org/wiki/GOLD_(parser)">Read more on Wikipedia...</a>

list
 - the <a href="http://goldparser.org/">GOLD website</a>
 - the <a href="https://en.wikipedia.org/wiki/GOLD_(parser)">GOLD Wikipedia page</a>
 - <a href="http://goldparser.org/">goldparser.org</a> was registered in 2011
 - See also: (10 related languages)<a href="antlr.html">ANTLR</a>, <a href="visual-basic.html">Visual Basic</a>, <a href="assembly-language.html">Assembly language</a>, <a href="csharp.html">C#</a>, <a href="d.html">D</a>, <a href="java.html">Java</a>, <a href="pascal.html">Pascal</a>, <a href="python.html">Python</a>, <a href="visual-basic.net.html">Visual Basic .NET</a>, <a href="regex.html">Regular Expressions</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/gold">Improve our GOLD file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 &lt;Statement&gt; ::= if &lt;Expression&gt; then &lt;Statements&gt; end
             |  while &lt;Expression&gt; do &lt;Statements&gt; end
             |  for Id = &lt;Range&gt; do &lt;Statements&gt; end

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/GOLD_(parser)'>Wikipedia</a>:
code
 &lt;Statements&gt;  ::= &lt;Statements&gt; &lt;Statement&gt;
                |  &lt;Statement&gt;
 
 &lt;Statement&gt;   ::= display &lt;Expression&gt;
                |  display &lt;Expression&gt; read ID
                |  assign ID &#39;=&#39; &lt;Expression&gt;
                |  while &lt;Expression&gt; do &lt;Statements&gt; end
                |  if &lt;Expression&gt; then &lt;Statements&gt; end
                |  if &lt;Expression&gt; then &lt;Statements&gt; else &lt;Statements&gt; end
                
 &lt;Expression&gt;  ::= &lt;Expression&gt; &#39;&gt;&#39;  &lt;Add Exp&gt;
                |  &lt;Expression&gt; &#39;&lt;&#39;  &lt;Add Exp&gt;
                |  &lt;Expression&gt; &#39;&lt;=&#39; &lt;Add Exp&gt;
                |  &lt;Expression&gt; &#39;&gt;=&#39; &lt;Add Exp&gt;
                |  &lt;Expression&gt; &#39;==&#39; &lt;Add Exp&gt;
                |  &lt;Expression&gt; &#39;&lt;&gt;&#39; &lt;Add Exp&gt;
                |  &lt;Add Exp&gt;
 
 &lt;Add Exp&gt;     ::= &lt;Add Exp&gt; &#39;+&#39; &lt;Mult Exp&gt;
                |  &lt;Add Exp&gt; &#39;-&#39; &lt;Mult Exp&gt;
                |  &lt;Add Exp&gt; &#39;&amp;&#39; &lt;Mult Exp&gt;
                |  &lt;Mult Exp&gt;
 
 &lt;Mult Exp&gt;    ::= &lt;Mult Exp&gt; &#39;*&#39; &lt;Negate Exp&gt;
                |  &lt;Mult Exp&gt; &#39;/&#39; &lt;Negate Exp&gt;
                |  &lt;Negate Exp&gt;
 
 &lt;Negate Exp&gt;  ::= &#39;-&#39; &lt;Value&gt;
                |  &lt;Value&gt;
 
 &lt;Value&gt;       ::= Identifier
                |  StringLiteral
                |  NumberLiteral
                |  &#39;(&#39; &lt;Expression&gt; &#39;)&#39;



















keyboardNav gleam.html cusip.html
