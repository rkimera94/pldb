title Grace

import settings.scroll
htmlTitle Grace - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/grace.pldb

paragraph
 Grace is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2010">2010</a>.

kpiTable
 #1294 <span title="TotalRank: 1809 Jobs: 101 Users: 1069 Facts: 756 Links: 952">on PLDB</span>
 12 Years Old
 201 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Grace">Books</span>
 0 <span title="Academic publications about or leveraging Grace">Papers</span>
 27 <span title="Grace repos on GitHub.">Repos</span>







paragraph
 The purpose of Grace is to allow novices to discover programming in the simplest possible way. Other famous languages such as Java or Python are widely used by professionals, but may be hard to assimilate for a beginner in programming. That is what the object-oriented Grace language is made for.

list
 - the <a href="http://gracelang.org/">Grace website</a>
 - There are at least 27 Grace repos on <a href="https://github.com/search?q=language:Grace">GitHub</a>
 - file extensions for Grace include grace
 - The  Google BigQuery Public Dataset GitHub snapshot shows 12 users using Grace in 15 repos on <a href="https://api.github.com/search/repositories?q=language:Grace">GitHub</a>
 - GitHub supports <a href="https://github.com/zmthy/grace-tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Grace
 - <a href="http://gracelang.org/">gracelang.org</a> was registered in 2010
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/grace">Improve our Grace file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 class cat {
     def name = &quot;Felix&quot;
     method getName {
         return name
     }
 }

exampleCodeHeader Example from <a href='https://github.com/zmthy/grace-tmbundle'>Linguist</a>:
code
 method ack (m : Number, n : Number) -&gt; Number {
   print &quot;ack {m} {n}&quot;
   if (m &lt; = 0) then {n + 1}
    elseif {n &lt;= 0} then {ack((m -1), 1)}
    else {ack(m -1, ack(m, n-1))}
 }



















keyboardNav wmlscript.html kit.html
