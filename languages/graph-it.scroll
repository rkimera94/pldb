title GraphIt

import settings.scroll
htmlTitle GraphIt - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/graph-it.pldb

* GraphIt is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2017.
 link ../lists/languages.html?filter=2017 2017

 

kpiTable
 #741 <span title="TotalRank: 1288 Jobs: 102 Users: 801 Facts: 385 Links: 953">on PLDB</span>
 5 Years Old
 397 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging GraphIt">Books</span>
 0 <span title="Academic publications about or leveraging GraphIt">Papers</span>

* GraphIt is a new DSL for graph computations that generates fast implementations for algorithms with different performance characteristics running on graphs with different sizes and structures. GraphIt separates what is computed (algorithm) from how it is computed (schedule). Programmers specify the algorithm using an algorithm language, and performance optimizations are specified using a separate scheduling language. The scheduling language enables programmers to easily search through this complicated tradeoff space by composing together a large set of edge traversal and vertex data layout optimizations.

- the <a href="http://graphit-lang.org/">GraphIt website</a>
- GraphIt is developed on <a href="https://github.com/GraphIt-DSL/graphit">GitHub</a> and has 308 stars
- file extensions for GraphIt include gt
- <a href="http://graphit-lang.org/">graphit-lang.org</a> was registered in 2018
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/graph-it">Improve our GraphIt file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 element Vertex end
 element Edge end
 const edges : edgeset{Edge}(Vertex,Vertex) = load (argv[1]);
 const vertices : vertexset{Vertex} = edges.getVertices();
 const old_rank : vector{Vertex}(double) = 1.0/vertices.size();
 const new_rank : vector{Vertex}(double) = 0.0;
 const out_degree : vector {Vertex}(int) = edges.getOutDegrees();
 const contrib : vector{Vertex}(double) = 0.0;
 const error : vector{Vertex}(double) = 0.0;
 const damp : double = 0.85;
 const beta_score : double = (1.0 - damp) / vertices.size();
 
 func computeContrib(v : Vertex)
     contrib[v] = old_rank[v] / out_degree[v];
 end
 
 func updateEdge(src : Vertex, dst : Vertex)
     new_rank[dst] += contrib[src];
 end
 
 func updateVertex(v : Vertex)
     var old_score : double = old_rank[v];
     new_rank[v] = beta_score + damp*(new_rank[v]);
     error[v] = fabs(new_rank[v] - old_rank[v]);
     old_rank[v] = new_rank[v];
     new_rank[v] = 0.0;
 end
 
 func printRank(v : Vertex)
     print old_rank[v];
 end
 
 func reset(v: Vertex)
     old_rank[v] = 1.0/vertices.size();
     new_rank[v] = 0.0;
 end
 
 func main()
     for trail in 0:10
       startTimer();
         vertices.apply(reset);
       for i in 0:20
           vertices.apply(computeContrib);
             #s1# edges.apply(updateEdge);
             vertices.apply(updateVertex);
       end
 
       var elapsed_time : double = stopTimer();
       print &quot;elapsed time: &quot;;
       print elapsed_time;
     end
 end
 
 % specify schedules here or use a separate schedule file

keyboardNav storyscript.html renderscript.html
