title GraphQL

import settings.scroll
htmlTitle GraphQL - Query language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/graphql.pldb

paragraph
 GraphQL is a <a href="../lists/languages.html?filter=queryLanguage">query language</a> created in <a href="../lists/languages.html?filter=2012">2012</a> by <a href="../lists/creators.html#Lee_Byron">Lee Byron</a>.

kpiTable
 #86 <span title="TotalRank: 272 Jobs: 101 Users: 81 Facts: 90 Links: 486">on PLDB</span>
 10 Years Old
 18.7k <span title="Crude user estimate from a linear model.">Users</span>
 11 <span title="Books about or leveraging GraphQL">Books</span>
 7 <span title="Academic publications about or leveraging GraphQL">Papers</span>
 1 <span title="GraphQL repos on GitHub.">Repos</span>



monacoEditor graphql
 {
     "Hello World"
 }



paragraph
 GraphQL is a data query language developed internally by Facebook in 2012 before being publicly released in 2015. It provides an alternative to REST and ad-hoc webservice architectures.. It allows clients to define the structure of the data required, and exactly the same structure of the data is returned from the server. <a href="https://en.wikipedia.org/wiki/GraphQL">Read more on Wikipedia...</a>

list
 - the <a href="http://graphql.org/">GraphQL website</a>
 - the <a href="https://en.wikipedia.org/wiki/GraphQL">GraphQL Wikipedia page</a>
 - the <a href="https://graphql.org/learn/">GraphQL docs</a>
 - There are at least 1 GraphQL repos on <a href="https://github.com/search?q=language:GraphQL">GitHub</a>
 - GraphQL first developed in <a href="../lists/originCommunities.html#Facebook">Facebook</a>
 - file extensions for GraphQL include graphql, gql and graphqls
 - the GraphQL team is on <a href="https://twitter.com/graphql">Twitter</a>
 - There are 17,480 members in the <a href="https://reddit.com/r/GraphQL">GraphQL subreddit</a>
 - Here is an <a href="antlr.html">ANTLR</a> <a href="https://github.com/antlr/grammars-v4/tree/master/graphql">grammar</a> for GraphQL
 - Here is a GraphQL <a href="language-server-protocol.html">LSP</a> <a href="https://github.com/Mayank1791989/gql-language-server">implementation</a>
 - There is a <a href="monaco.html">Monaco</a> <a href="https://github.com/microsoft/monaco-editor/tree/main/src/basic-languages/graphql">package</a> for syntax highlighting GraphQL
 - GitHub supports <a href="https://github.com/rmosolgo/language-graphql" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for GraphQL
 - <a href="http://graphql.org/">graphql.org</a> was registered in 2015
 - See also: (3 related languages)<a href="javascript.html">JavaScript</a>, <a href="ruby.html">Ruby</a>, <a href="scala.html">Scala</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/graphql">Improve our GraphQL file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/g/GraphQL.graphql'>hello-world</a>:
code
 {
     &quot;Hello World&quot;
 }

exampleCodeHeader Example from <a href='https://github.com/rmosolgo/language-graphql'>Linguist</a>:
code
 # Copyright (c) 2015, Facebook, Inc.
 # All rights reserved.
 #
 # This source code is licensed under the BSD-style license found in the
 # LICENSE file in the root directory of this source tree. An additional grant
 # of patent rights can be found in the PATENTS file in the same directory.
 
 schema {
   query: QueryType
   mutation: MutationType
 }
 
 type Foo implements Bar {
   one: Type
   two(argument: InputType!): Type
   three(argument: InputType, other: String): Int
   four(argument: String = &quot;string&quot;): String
   five(argument: [String] = [&quot;string&quot;, &quot;string&quot;]): String
   six(argument: InputType = {key: &quot;value&quot;}): Type
 }
 
 interface Bar {
   one: Type
   four(argument: String = &quot;string&quot;): String
 }
 
 union Feed = Story | Article | Advert
 
 scalar CustomScalar
 
 enum Site {
   DESKTOP
   MOBILE
 }
 
 input InputType {
   key: String!
   answer: Int = 42
 }
 
 extend type Foo {
   seven(argument: [String]): Type
 }
 
 directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
 
 directive @include(if: Boolean!)
   on FIELD
    | FRAGMENT_SPREAD
    | INLINE_FRAGMENT
 



subsection <a href="../lists/keywords.html?filter=graphql">Keywords</a> in GraphQL
paragraph
 null true false query mutation subscription extend schema directive scalar type interface union enum input implements fragment on

foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   # A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   # A comment
  Token #
 row
  Feature Lists
  FeatureLink ../languages/lists-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Union Types
  FeatureLink ../languages/union-types-feature.html
  Supported ✓
  Example
   union SearchResult = Human | Droid | Starship
  Token 
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
  Token "
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Interfaces
  FeatureLink ../languages/interface-feature.html
  Supported ✓
  Example
   interface Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
   }
   type Human implements Character {
     id: ID!
     name: String!
     friends: [Character]
     appearsIn: [Episode]!
     starships: [Starship]
     totalCredits: Int
   }
   type Droid implements Character {
     id: ID!
     name: String!
     friends: [Character]
     appearsIn: [Episode]!
     primaryFunction: String
   }
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Booleans
  FeatureLink ../languages/booleans-feature.html
  Supported ✓
  Example
  Token true false
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 





foldBreak
subsection Books about GraphQL from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 React Quickly: Painless web apps with React, JSX, Redux, and GraphQL|https://isbndb.com/book/9781617293344|Mardan, Azat|2017|Manning Publications
 Hands-On Full-Stack Web Development with GraphQL and React: Build scalable full-stack applications while learning to solve complex problems with GraphQL|https://isbndb.com/book/9781789135763|Grebe, Sebastian|2019|Packt Publishing
 Full-Stack React, TypeScript, and Node: Build cloud-ready web applications using React 17 with Hooks and GraphQL|https://isbndb.com/book/9781839214691|Choi, David|2020|Packt Publishing
 Mastering React Test-Driven Development: Build rock-solid, well-tested web apps with React, Redux and GraphQL|https://isbndb.com/book/9781789138788|Irvine, Daniel|2019|Packt Publishing
 Visual Design of GraphQL Data: A Practical Introduction with Legacy Data and Neo4j|https://isbndb.com/book/9781484239049|Frisendal, Thomas|2018|Apress
 Learning GraphQL|https://isbndb.com/book/9781492044864|Eve Porcello; Alex  Banks|20180809|O'Reilly Media, Inc.
 GraphQL in Action|https://isbndb.com/book/9781638350859|Samer Buna|20210221|Simon & Schuster
 Learning GraphQL and Relay|https://isbndb.com/book/9781786461971|Samer Buna|2016-08-30|Packt Publishing
 Craft GraphQL APIs in Elixir with Absinthe|https://isbndb.com/book/9781680505931|Bruce Williams; Ben  Wilson|20180327|O'Reilly Media, Inc.
 Full Stack Development with Angular and GraphQL|https://isbndb.com/book/9781800209756|Ahmed Bouchefra|2022-03-30|Packt Publishing
 Full-Stack Web Development with GraphQL and React|https://isbndb.com/book/9781801079174|Sebastian Grebe|28-02-2022|Packt Publishing


foldBreak
subsection Publications about GraphQL from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Semantics and Complexity of GraphQL|https://www.semanticscholar.org/paper/cf1ac803fcd5339063003a7847556055d25983d7|O. Hartig and Jorge Pérez|2018|51|6
 An Empirical Study of GraphQL Schemas|https://www.semanticscholar.org/paper/512fb84e420f7001c9b4ba1e7b485d4cd06ba1cb|Erik Wittern and Alan Cha and James C. Davis and Guillaume Baudart and Louis Mandel|2019|19|0
 Implementing GraphQL as a Query Language for Deductive Databases in SWI-Prolog Using DCGs, Quasi Quotations, and Dicts|https://www.semanticscholar.org/paper/6fc5114fada3dc4eaa0a33345522c5b353b3d702|Falco Nogatz and D. Seipel|2017|14|2
 Comparative Analysis Between Standards Oriented to Web Services: SOAP, REST and GRAPHQL|https://www.semanticscholar.org/paper/1d0a063e1ae7cff3197be11322ecf7f63740c4c2|Jaime Sayago Heredia and Evelin Flores-García and Andrés Solano|2019|4|0
 morph-GraphQL: GraphQL Servers Generation from R2RML Mappings (S)|https://www.semanticscholar.org/paper/c0f1a7e772591f87b5ef2a232d3196ef5752a9d3|Freddy Priyatna and David Chaves-Fraga and Ahmad Alobaid and Óscar Corcho|2019|4|0
 Exploiting Declarative Mapping Rules for Generating GraphQL Servers with Morph-GraphQL|https://www.semanticscholar.org/paper/08e989912b7ed00b32195c269edea18edcc33f6b|David Chaves-Fraga and Freddy Priyatna and Ahmad Alobaid and Óscar Corcho|2020|3|0
 COMPARATIVE ANALYSIS OF WEB APPLICATION PERFORMANCE IN CASE OF USING REST VERSUS GRAPHQL|https://www.semanticscholar.org/paper/bc1399b7e27c20633989a561d8cfd00f746391af|M. Vesić and N. Kojić|2020|1|0






keyboardNav groovy.html latex.html
