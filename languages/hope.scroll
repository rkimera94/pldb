title HOPE

import settings.scroll
htmlTitle HOPE - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/hope.pldb

paragraph
 HOPE is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1978">1978</a>.

kpiTable
 #462 <span title="TotalRank: 939 Jobs: 62 Users: 1237 Facts: 607 Links: 270">on PLDB</span>
 44 Years Old
 145 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging HOPE">Books</span>
 0 <span title="Academic publications about or leveraging HOPE">Papers</span>







paragraph
 Hope is a small functional programming language developed in the 1970s at Edinburgh University. It predates Miranda and Haskell and is contemporaneous with ML (also developed at Edinburgh). Hope was derived from NPL, a simple functional language developed by Rod Burstall and John Darlington in their work on program transformation. <a href="https://en.wikipedia.org/wiki/Hope_(programming_language)">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Hope_(programming_language)">HOPE Wikipedia page</a>
 - Explore HOPE snippets on <a href="http://www.rosettacode.org/wiki/Category:Hope">Rosetta Code</a>
 - HOPE is listed on <a href="https://hopl.info/showlanguage.prx?exp=810">HOPL</a>
 - See also: <a href="haskell.html">Haskell</a>, <a href="ml.html">ML</a>, <a href="snobol.html">SNOBOL</a>
 - Read more about HOPE on the web: <a href="https://github.com/dmbaturin/hope">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/hope">Improve our HOPE file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Hope_(programming_language)'>Wikipedia</a>:
code
 dec fact : num -&gt; num;
 --- fact 0 &lt;= 1;
 --- fact n &lt;= n*fact(n-1);



subsection <a href="../lists/keywords.html?filter=hope">Keywords</a> in HOPE
paragraph
 and or not char num div mod dec X # : -> ; --- if then else > <= + ( ) , infix - truval :: nil " <> == in where data ++ lambda

foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Conditionals
  FeatureLink ../languages/conditionals-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   --- A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   --- A comment
  Token ---
 row
  Feature Single-Type Arrays
  FeatureLink ../languages/single-type-arrays-feature.html
  Supported ✓
  Example
   [1,2,3]
  Token 
 row
  Feature Letter-first Identifiers
  FeatureLink ../languages/letter-first-identifiers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Anonymous Functions
  FeatureLink ../languages/anonymous-functions-feature.html
  Supported ✓
  Example
   lambda(x,y) => x + y
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Infix Notation
  FeatureLink ../languages/infix-notation-feature.html
  Supported ✓
  Example
   max(10,20) + max(1,max(2,3));
  Token 
 row
  Feature Pattern Matching
  FeatureLink ../languages/pattern-matching-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Merges Whitespace
  FeatureLink ../languages/merges-whitespace-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature While Loops
  FeatureLink ../languages/while-loops-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav rpl.html algol-58.html
