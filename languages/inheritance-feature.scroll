title Inheritance

import settings.scroll
htmlTitle Inheritance - Feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/inheritance-feature.pldb

paragraph
 Inheritance is a <a href="../lists/features.html">feature</a>.









paragraph
 In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object (prototype-based inheritance) or class (class-based inheritance), retaining similar implementation.

list
 - the <a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)">Inheritance Wikipedia page</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/inheritance-feature">Improve our Inheritance file</a>

html
 <br>

paragraph
 Languages <b>with</b> Inheritance include <a href="java.html">Java</a>, <a href="javascript.html">JavaScript</a>, <a href="python.html">Python</a>, <a href="php.html">PHP</a>, <a href="scala.html">Scala</a>, <a href="typescript.html">TypeScript</a>, <a href="dart.html">Dart</a>, <a href="coffeescript.html">CoffeeScript</a>, <a href="groovy.html">Groovy</a>, <a href="pug.html">Pug</a>, <a href="systemverilog.html">SystemVerilog</a>, <a href="twig.html">Twig</a>, <a href="apex.html">Apex</a>, <a href="spider.html">spider</a>, <a href="jspp.html">JS++</a>, <a href="spiderbasic.html">SpiderBasic</a>

exampleCodeHeader Example from <a href="javascript.html">JavaScript</a>, <a href="typescript.html">TypeScript</a>:

code
 class B {}
 class A extends B {}

exampleCodeHeader Example from <a href="python.html">Python</a>:

code
 class SumComputer(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
    def transform(self, x):
        raise NotImplementedError
    def inputs(self):
        return range(self.a, self.b)
    def compute(self):
        return sum(self.transform(value) for value in self.inputs())
  class SquareSumComputer(SumComputer):
      def transform(self, x):
          return x * x
  class CubeSumComputer(SumComputer):
      def transform(self, x):
          return x * x * x



















keyboardNav homoiconic-feature.html iterators-feature.html
