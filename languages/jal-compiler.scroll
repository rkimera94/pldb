title JAL compiler

import settings.scroll
htmlTitle JAL compiler - Compiler

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/jal-compiler.pldb

paragraph
 JAL compiler is a <a href="../lists/languages.html?filter=compiler">compiler</a> created in <a href="../lists/languages.html?filter=2000">2000</a>.

kpiTable
 #1377 on PLDB
 22 Years Old
 55 <span title="Crude user estimate from a linear model.">Users</span>







paragraph
 JAL (Just Another Language) is a Pascal-like programming language and compiler that generates executable code for PIC microcontrollers.  It is a free-format language with a compiler that runs on Linux, MS-Windows and MS-DOS (OSX support). It is configurable and extendable through the use of libraries and can even be combined with PIC assembly language.. <a href="https://en.wikipedia.org/wiki/JAL_(compiler)">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/JAL_(compiler)">JAL compiler Wikipedia page</a>
 - See also: <a href="pic-microcontroller.html">PIC microcontroller</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/jal-compiler">Improve our JAL compiler file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/JAL_(compiler)'>Wikipedia</a>:
code
 -- JAL 2.3
 include 16f877_bert--define the variables
 var byte resist--define the pins
 pin_a0_direction = input--variable resistor
 pin_d7_direction = input--switch
 pin_c2_direction = output--pwm led--enable pulse width modulation
 PWM_init_frequency (true, true)
 
 forever loop--convert analog on a0 to digital
    resist = ADC_read_low_res(0)
 
    -- run measurement through flash memory
    program_eeprom_write(2000,resist)
    program_eeprom_read(2000,resist)
 
    -- run measurement through data memory
    data_eeprom_write(10,resist)
    data_eeprom_read(10,resist)
 
    -- if the switch is pressed return random value
    if pin_d7 == high then
       resist = random_byte
    end if--send resistance to PC
    serial_sw_write(resist)
    delay_100ms(1)
    -- set actual PWM duty cycle
    PWM_Set_DutyCycle (resist, resist)
 
 end loop



















keyboardNav nwscript.html genero.html
