title Joyfully Universal Language for (Inline) Assembly

import settings.scroll
htmlTitle Joyfully Universal Language for (Inline) Assembly - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/julia-lang.pldb

* Joyfully Universal Language for (Inline) Assembly is a <a href="../lists/languages.html?filter=pl">programming language</a>.
 link ../lists/languages.html?filter=0 0

 

kpiTable
 #2078 <span title="TotalRank: 2540 Jobs: 102 Users: 2748 Facts: 1485 Links: 953">on PLDB</span>
 0 <span title="Books about or leveraging Joyfully Universal Language for (Inline) Assembly">Books</span>
 0 <span title="Academic publications about or leveraging Joyfully Universal Language for (Inline) Assembly">Papers</span>

* JULIA is an intermediate language that can compile to various different backends (EVM 1.0, EVM 1.5 and eWASM are planned). Because of that, it is designed to be a usable common denominator of all three platforms. It can already be used for “inline assembly” inside Solidity and future versions of the Solidity compiler will even use JULIA as intermediate language. It should also be easy to build high-level optimizer stages for JULIA.

- Read more about Joyfully Universal Language for (Inline) Assembly on the web: <a href="https://solidity.readthedocs.io/en/v0.4.21/julia.html">1</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/julia-lang">Improve our Joyfully Universal Language for (Inline) Assembly file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 {
     function power(base:u256, exponent:u256) -&gt; result:u256
     {
         switch exponent
         case 0:u256 { result := 1:u256 }
         case 1:u256 { result := base }
         default:
         {
             result := power(mul(base, base), div(exponent, 2:u256))
             switch mod(exponent, 2:u256)
                 case 1:u256 { result := mul(base, result) }
         }
     }
 }

keyboardNav emoticon.html qcl.html
