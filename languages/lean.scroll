title Lean

import settings.scroll
htmlTitle Lean - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/lean.pldb

paragraph
 Lean is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2015">2015</a> by <a href="../lists/creators.html#Leonardo_de_Moura">Leonardo de Moura</a>.

kpiTable
 #191 <span title="TotalRank: 514 Jobs: 101 Users: 284 Facts: 129 Links: 953">on PLDB</span>
 7 Years Old
 2.9k <span title="Crude user estimate from a linear model.">Users</span>
 4 <span title="Books about or leveraging Lean">Books</span>
 10 <span title="Academic publications about or leveraging Lean">Papers</span>
 2k <span title="Lean repos on GitHub.">Repos</span>

paragraph
 Try now: <a href="https://tio.run/#lean">TIO</a>





paragraph
 Lean Theorem Prover

list
 - the <a href="http://leanprover.github.io/">Lean website</a>
 - Lean is developed on <a href="https://github.com/leanprover/lean">GitHub</a> and has 2,045 stars
 - the <a href="https://leanprover.github.io/documentation/">Lean docs</a>
 - There are at least 1,807 Lean repos on <a href="https://github.com/search?q=language:Lean">GitHub</a>
 - Lean first developed in <a href="../lists/originCommunities.html#Microsoft_Research">Microsoft Research</a>
 - file extensions for Lean include lean and hlean
 - The  Google BigQuery Public Dataset GitHub snapshot shows 233 users using Lean in 265 repos on <a href="https://api.github.com/search/repositories?q=language:Lean">GitHub</a>
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/theorem.py">syntax highlighting</a> for Lean
 - GitHub supports <a href="https://github.com/leanprover/Lean.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Lean
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/lean">Improve our Lean file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/l/Lean'>hello-world</a>:
code
 #print &quot;Hello World&quot;

exampleCodeHeader Example from <a href='https://github.com/leanprover/Lean.tmbundle'>Linguist</a>:
code
 /-
 Copyright (c) 2014 Microsoft Corporation. All rights reserved.
 Released under Apache 2.0 license as described in the file LICENSE.
 
 Module: algebra.binary
 Authors: Leonardo de Moura, Jeremy Avigad
 
 General properties of binary operations.
 -/
 
 import logic.eq
 open eq.ops
 
 namespace binary
   section
     variable {A : Type}
     variables (op₁ : A → A → A) (inv : A → A) (one : A)
 
     local notation a * b := op₁ a b
     local notation a ⁻¹  := inv a
     local notation 1     := one
 
     definition commutative := ∀a b, a * b = b * a
     definition associative := ∀a b c, (a * b) * c = a * (b * c)
     definition left_identity := ∀a, 1 * a = a
     definition right_identity := ∀a, a * 1 = a
     definition left_inverse := ∀a, a⁻¹ * a = 1
     definition right_inverse := ∀a, a * a⁻¹ = 1
     definition left_cancelative := ∀a b c, a * b = a * c → b = c
     definition right_cancelative := ∀a b c, a * b = c * b → a = c
 
     definition inv_op_cancel_left := ∀a b, a⁻¹ * (a * b) = b
     definition op_inv_cancel_left := ∀a b, a * (a⁻¹ * b) = b
     definition inv_op_cancel_right := ∀a b, a * b⁻¹ * b =  a
     definition op_inv_cancel_right := ∀a b, a * b * b⁻¹ = a
 
     variable (op₂ : A → A → A)
 
     local notation a + b := op₂ a b
 
     definition left_distributive := ∀a b c, a * (b + c) = a * b + a * c
     definition right_distributive := ∀a b c, (a + b) * c = a * c + b * c
   end
 
   context
     variable {A : Type}
     variable {f : A → A → A}
     variable H_comm : commutative f
     variable H_assoc : associative f
     infixl `*` := f
     theorem left_comm : ∀a b c, a*(b*c) = b*(a*c) :=
     take a b c, calc
       a*(b*c) = (a*b)*c  : H_assoc
         ...   = (b*a)*c  : H_comm
         ...   = b*(a*c)  : H_assoc
 
     theorem right_comm : ∀a b c, (a*b)*c = (a*c)*b :=
     take a b c, calc
       (a*b)*c = a*(b*c) : H_assoc
         ...   = a*(c*b) : H_comm
         ...   = (a*c)*b : H_assoc
   end
 
   context
     variable {A : Type}
     variable {f : A → A → A}
     variable H_assoc : associative f
     infixl `*` := f
     theorem assoc4helper (a b c d) : (a*b)*(c*d) = a*((b*c)*d) :=
     calc
       (a*b)*(c*d) = a*(b*(c*d)) : H_assoc
               ... = a*((b*c)*d) : H_assoc
   end
 
 end binary
 





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token #print





foldBreak
subsection Books about Lean from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Functional Programming Patterns in Scala and Clojure: Write Lean Programs for the JVM|https://isbndb.com/book/9781937785475|Bevilacqua-Linn, Michael|2013|Pragmatic Bookshelf
 Measuring and Improving Performance: Information Technology Applications in Lean Systems|https://isbndb.com/book/9781420084184|Martin, James William|2009|CRC Press
 Lean Python: Learn Just Enough Python to Build Useful Tools|https://isbndb.com/book/9781484223857|Gerrard, Paul|2016|Apress
 Lean Software Systems Engineering for Developers: Managing Requirements, Complexity, Teams, and Change Like a Champ|https://isbndb.com/book/9781484269336|Durham, Doug and Michel, Chad|2021|Apress


foldBreak
subsection Publications about Lean from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Exploring the role of human factors in lean management|https://www.semanticscholar.org/paper/12228cf77a74d25d79a94aa7959cd5649eb63ddf|P. Gaiardelli and Barbara Resta and Stefano Dotti|2019|32|2
 Development of a Lean Computational Thinking Abilities Assessment for Middle Grades Students|https://www.semanticscholar.org/paper/62b302055f9ca5ecf4469c56c607f12eee205d1a|E. Wiebe and Jennifer E. London and Osman Aksit and Bradford W. Mott and K. Boyer and James C. Lester|2019|31|4
 Lean management approach in hospitals: a systematic review|https://www.semanticscholar.org/paper/65f5eacd03a677f40f3c0e6c695962e4b273458b|Haleh Mousavi Isfahani and S. Tourani and H. Seyedin|2019|22|3
 Memory-Efficient Performance Monitoring on Programmable Switches with Lean Algorithms|https://www.semanticscholar.org/paper/d9ed95f065d770e595f302be8334b64a1b0f961f|Zaoxing Liu and Samson Zhou and Ori Rottenstreich and V. Braverman and J. Rexford|2019|20|0
 The Lean 4 Theorem Prover and Programming Language|https://www.semanticscholar.org/paper/c4c0d6ffd70081d143b32be53b06fec1259b3ad8|L. D. Moura and Sebastian Ullrich|2021|18|1
 lolliCop - A Linear Logic Implementation of a Lean Connection-Method Theorem Prover for First-Order Classical Logic|https://www.semanticscholar.org/paper/c12f7f4af28822d01b449213cad8ac85ba5c4ba6|J. S. Hodas and Naoyuki Tamura|2001|8|0
 A lean specification for GADTs: system F with first-class equality proofs|https://www.semanticscholar.org/paper/395df42520b2a07f04605515890a7eb0870fdd60|Arie Middelkoop and A. Dijkstra and S. Swierstra|2010|4|1
 Using Agile Games to Invigorate Agile and Lean Software Development Learning in Classrooms|https://www.semanticscholar.org/paper/b4e7e39b7a590d940e902e4c8c8a960df83a4f10|Rashina Hoda|2018|3|0
 Built-In Lean Management Tools in Simulation Modeling|https://www.semanticscholar.org/paper/03859bf77f8c4d21dfbb36cba377b3467f3a3100|P. Pawlewski|2019|3|0
 NLP Lean Programming Framework: Developing NLP Applications More Effectively|https://www.semanticscholar.org/paper/04c6990ea6520f1af4ddcacabc1042bd03681da5|Marc Schreiber and B. Kraft and Albert Zündorf|2018|1|0






keyboardNav xpath.html toml.html
