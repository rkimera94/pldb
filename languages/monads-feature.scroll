title Monad

import settings.scroll
htmlTitle Monad - Language feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/monads-feature.pldb

* Monad is a <a href="../lists/features.html">language feature</a> created in 1980.
 link ../lists/languages.html?filter=1980 1980

 

* In functional programming, a monad is a design pattern that allows structuring programs generically while automating away boilerplate code needed by the program logic. Monads achieve this by providing their own data type, which represents a specific form of computation, along with one procedure to wrap values of any basic type within the monad (yielding a monadic value) and another to compose functions that output monadic values (called monadic functions).This allows monads to simplify a wide range of problems, like handling potential undefined values (with the Maybe monad), or keeping values within a flexible, well-formed list (using the List monad). With a monad, a programmer can turn a complicated sequence of functions into a succinct pipeline that abstracts away auxiliary data management, control flow, or side-effects.Both the concept of a monad and the term originally come from category theory, where it is defined as a functor with additional structure. <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)">Monad Wikipedia page</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/monads-feature">Improve our Monad file</a>

html
 <br>

* Languages *with* Monad include <a href="haskell.html">Haskell</a>

exampleCodeHeader Example from <a href="haskell.html">Haskell</a>:

code
 -- https://stackoverflow.com/questions/44965/what-is-a-monad
 parseExpr = parseString &lt;|&gt; parseNumber
 
 parseString = do
         char &#39;&quot;&#39;
         x &lt;- many (noneOf &quot;\&quot;&quot;)
         char &#39;&quot;&#39;
         return (StringValue x)
 
 parseNumber = do
     num &lt;- many1 digit
     return (NumberValue (read num))

keyboardNav polymorphism-feature.html increment-and-decrement-operators-feature.html
