title Namespaces

import settings.scroll
htmlTitle Namespaces - Feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/namespace-feature.pldb

paragraph
 Namespaces are a <a href="../lists/features.html">feature</a>.









paragraph
 Most languages have implicit scopes/namespaces, but some also allow for explicit namespacing.

list
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/namespace-feature">Improve our Namespaces file</a>

html
 <br>

paragraph
 Languages <b>with</b> Namespaces include <a href="cpp.html">C++</a>, <a href="csharp.html">C#</a>, <a href="typescript.html">TypeScript</a>, <a href="f-sharp.html">F#</a>, <a href="slope.html">Slope</a>, <a href="dale.html">Dale</a>

exampleCodeHeader Example from <a href="cpp.html">C++</a>:

code
 #include &lt;iostream&gt;
 using namespace std;
 
 // Variable created inside namespace
 namespace first
 {
   int val = 500;
 }
  
 // Global variable
 int val = 100;
 // Ways to do it: https://en.cppreference.com/w/cpp/language/namespace
 namespace ns_name { declarations }
 inline namespace ns_name { declarations }
 namespace { declarations }
 ns_name::name
 using namespace ns_name;
 using ns_name::name;
 namespace name = qualified-namespace ;
 namespace ns_name::inline(since C++20)(optional) name { declarations } 

exampleCodeHeader Example from <a href="csharp.html">C#</a>:

code
 namespace MyNamespace
 {
     class MyClass
     {
         public void MyMethod()
         {
             System.Console.WriteLine(&quot;Creating my namespace&quot;);
     }
   }
 }

exampleCodeHeader Example from <a href="typescript.html">TypeScript</a>:

code
 // Typescript even supports splitting namespaces across multiple files:
 // Validation.ts
 namespace Validation {
     export interface StringValidator {
         isAcceptable(s: string): boolean;
     }
 }
 // LettersOnlyValidator.ts
 /// &lt;reference path=&quot;Validation.ts&quot; /&gt;
 namespace Validation {
     const lettersRegexp = /^[A-Za-z]+$/;
     export class LettersOnlyValidator implements StringValidator {
         isAcceptable(s: string) {
             return lettersRegexp.test(s);
         }
     }
 }

exampleCodeHeader Example from <a href="f-sharp.html">F#</a>:

code
 namespace Widgets
 type MyWidget1 =
    member this.WidgetName = &quot;Widget1&quot;
 module WidgetsModule =
    let widgetName = &quot;Widget2&quot;

exampleCodeHeader Example from <a href="slope.html">Slope</a>:

code
 (ns-create &#39;hello-world)
 (ns-define
   &#39;hello-world
   &#39;print
   (lambda ()
     (display &quot;hello world!\n&quot;)))
 (hello-world::print)



















keyboardNav merges-whitespace-feature.html range-operator-feature.html
