title Oberon-2

import settings.scroll
htmlTitle Oberon-2 - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/oberon-2.pldb

* Oberon-2 is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 1991 by Niklaus Wirth and Hanspeter Mössenböck.
 link ../lists/languages.html?filter=1991 1991
 link ../lists/creators.html#Niklaus_Wirth Niklaus Wirth
 link ../lists/creators.html#Hanspeter_Mössenböck Hanspeter Mössenböck
 

kpiTable
 #437 <span title="TotalRank: 936 Jobs: 101 Users: 1198 Facts: 349 Links: 486">on PLDB</span>
 31 Years Old
 165 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Oberon-2">Books</span>
 0 <span title="Academic publications about or leveraging Oberon-2">Papers</span>

* Oberon-2 is an extension of the original Oberon programming language that adds limited reflection and object-oriented programming facilities, open arrays as pointer base types, read-only field export and reintroduces the FOR loop from Modula-2. It was developed in 1991 at ETH Zurich by Niklaus Wirth and Hanspeter Mössenböck, who is now at Institut für Systemsoftware (SSW) of the University of Linz, Austria.  Oberon-2 is a superset of Oberon, and is fully compatible with it. <a href="https://en.wikipedia.org/wiki/Oberon-2">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/Oberon-2">Oberon-2 Wikipedia page</a>
- Explore Oberon-2 snippets on <a href="http://www.rosettacode.org/wiki/Category:Oberon-2">Rosetta Code</a>
- Oberon-2 is listed on <a href="https://hopl.info/showlanguage.prx?exp=1647">HOPL</a>
- See also: (12 related languages)<a href="oberon.html">Oberon</a>, <a href="modula-2.html">Modula-2</a>, <a href="pascal.html">Pascal</a>, <a href="go.html">Go</a>, <a href="object-oberon.html">Object Oberon</a>, <a href="smalltalk.html">Smalltalk</a>, <a href="python.html">Python</a>, <a href="java.html">Java</a>, <a href="algol.html">Algol</a>, <a href="yacc.html">Yacc</a>, <a href="javascript.html">JavaScript</a>, <a href="powerpc.html">PowerPC</a>
- Read more about Oberon-2 on Semantic Scholar: <a href="https://semanticscholar.org/paper/0279ae521a3f0c16e53259cf62f83739931fbc50">1</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/oberon-2">Improve our Oberon-2 file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/o/Oberon 2.obn'>hello-world</a>:
code
 MODULE HelloWorld;                     
 IMPORT Out;
 BEGIN
   Out.String( &quot;Hello World&quot; );
   Out.Ln;
 END HelloWorld.

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Oberon-2'>Wikipedia</a>:
code
 Module        = MODULE ident &quot;;&quot; [ImportList] DeclSeq [BEGIN StatementSeq] END ident &quot;.&quot;.
 ImportList    = IMPORT [ident &quot;:=&quot;] ident {&quot;,&quot; [ident &quot;:=&quot;] ident} &quot;;&quot;.
 DeclSeq       = { CONST {ConstDecl &quot;;&quot; } | TYPE {TypeDecl &quot;;&quot;} | VAR {VarDecl &quot;;&quot;}} {ProcDecl &quot;;&quot; | ForwardDecl &quot;;&quot;}.
 ConstDecl     = IdentDef &quot;=&quot; ConstExpr.
 TypeDecl      = IdentDef &quot;=&quot; Type.
 VarDecl       = IdentList &quot;:&quot; Type.
 ProcDecl      = PROCEDURE [Receiver] IdentDef [FormalPars] &quot;;&quot; DeclSeq [BEGIN StatementSeq] END ident.
 ForwardDecl   = PROCEDURE &quot;^&quot; [Receiver] IdentDef [FormalPars].
 FormalPars    = &quot;(&quot; [FPSection {&quot;;&quot; FPSection}] &quot;)&quot; [&quot;:&quot; Qualident].
 FPSection     = [VAR] ident {&quot;,&quot; ident} &quot;:&quot; Type.
 Receiver      = &quot;(&quot; [VAR] ident &quot;:&quot; ident &quot;)&quot;.
 Type          = Qualident
               | ARRAY [ConstExpr {&quot;,&quot; ConstExpr}] OF Type
               | RECORD [&quot;(&quot;Qualident&quot;)&quot;] FieldList {&quot;;&quot; FieldList} END
               | POINTER TO Type
               | PROCEDURE [FormalPars].
 FieldList     = [IdentList &quot;:&quot; Type].
 StatementSeq  = Statement {&quot;;&quot; Statement}.
 Statement     = [ Designator &quot;:=&quot; Expr
               | Designator [&quot;(&quot; [ExprList] &quot;)&quot;]
               | IF Expr THEN StatementSeq {ELSIF Expr THEN StatementSeq} [ELSE StatementSeq] END
               | CASE Expr OF Case {&quot;|&quot; Case} [ELSE StatementSeq] END
               | WHILE Expr DO StatementSeq END
               | REPEAT StatementSeq UNTIL Expr
               | FOR ident &quot;:=&quot; Expr TO Expr [BY ConstExpr] DO StatementSeq END
               | LOOP StatementSeq END
               | WITH Guard DO StatementSeq {&quot;|&quot; Guard DO StatementSeq} [ELSE StatementSeq] END
               | EXIT
               | RETURN [Expr]
       ].	
 Case          = [CaseLabels {&quot;,&quot; CaseLabels} &quot;:&quot; StatementSeq].
 CaseLabels    = ConstExpr [&quot;..&quot; ConstExpr].
 Guard         = Qualident &quot;:&quot; Qualident.
 ConstExpr     = Expr.
 Expr          = SimpleExpr [Relation SimpleExpr].
 SimpleExpr    = [&quot;+&quot; | &quot;-&quot;] Term {AddOp Term}.
 Term          = Factor {MulOp Factor}.
 Factor        = Designator [&quot;(&quot; [ExprList] &quot;)&quot;] | number | character | string | NIL | Set | &quot;(&quot; Expr &quot;)&quot; | &quot; ~ &quot; Factor.
 Set           = &quot;{&quot; [Element {&quot;,&quot; Element}] &quot;}&quot;.
 Element       = Expr [&quot;..&quot; Expr].
 Relation      = &quot;=&quot; | &quot;#&quot; | &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot; | IN | IS.
 AddOp         = &quot;+&quot; | &quot;-&quot; | OR.
 MulOp         = &quot;*&quot; | &quot;/&quot; | DIV | MOD | &quot;&amp;&quot;.
 Designator    = Qualident {&quot;.&quot; ident | &quot;[&quot; ExprList &quot;]&quot; | &quot; ^ &quot; | &quot;(&quot; Qualident &quot;)&quot;}.
 ExprList      = Expr {&quot;,&quot; Expr}.
 IdentList     = IdentDef {&quot;,&quot; IdentDef}.
 Qualident     = [ident &quot;.&quot;] ident.
 IdentDef      = ident [&quot; * &quot; | &quot; - &quot;].

foldBreak
## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token Out.String
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 

keyboardNav cilk.html argdown.html
