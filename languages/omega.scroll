title omega

import settings.scroll
htmlTitle omega - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/omega.pldb

paragraph
 omega is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2005">2005</a> by <a href="../lists/creators.html#Tim_Sheard">Tim Sheard</a>.

kpiTable
 #793 <span title="TotalRank: 1340 Jobs: 101 Users: 2334 Facts: 286 Links: 953">on PLDB</span>
 17 Years Old
 0 <span title="Books about or leveraging omega">Books</span>
 2 <span title="Academic publications about or leveraging omega">Papers</span>







paragraph
 The Ωmega interpreter is styled after the Hugs Haskell Interpreter. The Ωmega syntax is based upon the syntax of Haskell. If you’re unsure of what syntax to use, a best first approximation is to use Haskell syntax. It works most of the time. While clearly descended from Haskell, Ωmega has several important syntactic and semantic differences.

list
 - the <a href="http://web.cecs.pdx.edu/~sheard/Omega/index.html">omega website</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/omega">Improve our omega file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 --
 -- This code written by James Hook
 -- This file should work with Omega version 1.1
 -- released May 23, 2005
 -- See http://www.cs.pdx.edu/~sheard/Omega/index.html
 
 {-- These are predefined by the compiler
 kind Nat = Z | S Nat
 
 data Nat&#39; n
   = Z where n = Z
   | forall m . S (Nat&#39; m) where n = S m
 -}
 
 
 data LE a b
   = LeBase where a = b
   | ex c . LeStep (LE a c) where b = S c
 
 reflLE :: LE a a
 reflLE = LeBase
 
 transLE :: (LE a b) -&gt; (LE b c) -&gt; (LE a c)
 transLE p LeBase = p
 transLE p (LeStep q) = LeStep (transLE p q)
 
 compare :: Nat&#39; a -&gt; Nat&#39; b -&gt; ((LE a b)+(LE b a))
 compare Z Z = L LeBase
 compare Z (S x) =
   case compare Z x of L w -&gt; L (LeStep w)
 compare (S x) Z =
   case compare Z x of L w -&gt; R (LeStep w)
 compare (S x) (S y) = mapP g g (compare x y )
   where mapP f g (L x) = L(f x)
         mapP f g (R x) = R(g x)
         g :: LE x y -&gt; LE (S x) (S y)
         g LeBase = LeBase
         g (LeStep x) = LeStep (g x)
 
 data MonoList min max
   = MonoNil (LE min max)
   | forall n a . MonoCons (Nat&#39; n) (LE a n) (LE n max) (MonoList min a)
 
 appMonoList :: MonoList b c -&gt; MonoList a b -&gt; MonoList a c
 appMonoList (MonoNil bc) (MonoNil ab) =
       MonoNil (transLE ab bc)
 appMonoList (MonoNil bc) (MonoCons n an nb xs) =
       MonoCons n an (transLE nb bc) xs
 appMonoList (MonoCons m dm mc ys) xs =
       MonoCons m dm mc (appMonoList ys xs)
 
 singletonMonoList :: Nat&#39; n -&gt; MonoList n n
 singletonMonoList n = MonoCons n reflLE reflLE (MonoNil reflLE)
 
 data IntervalList min max
   = ILNil (LE min max)
   | forall x . ILCons (Nat&#39; x) (LE min x) (LE x max) (IntervalList min max)
 
 partition :: Nat&#39; n -&gt; LE a n -&gt; LE n b -&gt; IntervalList a b -&gt;
                      (IntervalList a n, IntervalList n b)
 partition x an nb xs = partitionAcc (ILNil an) (ILNil nb) xs
   where partitionAcc ls gs (ILNil ab) = (ls,gs)
         partitionAcc ls gs (ILCons y ay yb ys) =
             case compare y x of
               L yx -&gt; partitionAcc (ILCons y ay yx ls) gs ys
               R xy -&gt; partitionAcc ls (ILCons y xy yb gs) ys
 
 qsort :: IntervalList a b -&gt; MonoList a b
 qsort (ILNil ab) = MonoNil ab
 qsort (ILCons x ax xb (ILNil ab)) = MonoCons x ax xb (MonoNil reflLE)
 qsort (ILCons x ax xb xs) =
      let (less,greater) = partition x ax xb xs
          sortedLess = qsort less
    sortedGreater = qsort greater
      in appMonoList sortedGreater (appMonoList (singletonMonoList x) sortedLess)
 
 --





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   {- A comment
   -}
  Token {- -}
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   -- A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   -- A comment
  Token --
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 







foldBreak
subsection Publications about omega from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 The Omega test: A fast and practical integer programming algorithm for dependence analysis|https://www.semanticscholar.org/paper/285024b15197b5face8bdef1d03f36949b8339c4|W. Pugh|1991|950|82
 Programming in Omega|https://www.semanticscholar.org/paper/69077e4f231a87a15ae3e0dff8c718d5e36f729d|T. Sheard and Nathan Mishra-Linger|2008|31|0






keyboardNav ox.html xcard.html
