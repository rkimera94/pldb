title pasukon

import settings.scroll
htmlTitle pasukon - Grammar language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/pasukon.pldb

paragraph
 pasukon is a <a href="../lists/languages.html?filter=grammarLanguage">grammar language</a> created in <a href="../lists/languages.html?filter=2020">2020</a> by <a href="../lists/creators.html#Federico_Ramirez">Federico Ramirez</a>.

kpiTable
 #959 <span title="TotalRank: 1505 Jobs: 101 Users: 1331 Facts: 451 Links: 953">on PLDB</span>
 2 Years Old
 117 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging pasukon">Books</span>
 0 <span title="Academic publications about or leveraging pasukon">Papers</span>

paragraph
 Try now: <a href="https://pasukon.rocks/#try-it">Web</a>





paragraph
 JavaScript practical parser generator library using combinators

list
 - the <a href="https://pasukon.rocks">pasukon website</a>
 - pasukon is developed on <a href="https://github.com/gosukiwi/Pasukon">GitHub</a> and has 109 stars
 - Read more about pasukon on the web: <a href="https://news.ycombinator.com/item?id=24347956">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/pasukon">Improve our pasukon file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 lex
   match  NUMBER     /[0-9]+(?:\.[0-9]+)?/
   match  PLUS       &#39;+&#39;
   match  MINUS      &#39;-&#39;
   match  TIMES      &#39;*&#39;
   match  DIV        &#39;/&#39;
   match  POPEN      &#39;(&#39;
   match  PCLOSE     &#39;)&#39;
   ignore WHITESPACE /^\s+/
 /lex
 
 addition
   | (subtraction as :lhs) then :PLUS then (subtraction as :rhs)
   |&gt; &#39;return $.lhs + $.rhs&#39;
   | subtraction
   ;
 
 subtraction
   | (multiplication as :lhs) then :MINUS then (multiplication as :rhs)
   |&gt; &#39;return $.lhs - $.rhs&#39;
   | multiplication
   ;
 
 multiplication
   | (division as :lhs) then :TIMES then (division as :rhs)
   |&gt; &#39;return $.lhs * $.rhs&#39;
   | division
   ;
 
 division
   | (expression as :lhs) then :DIV then (expression as :rhs)
   |&gt; &#39;return $.lhs / $.rhs&#39;
   | expression
   ;
 
 expression
   | :POPEN then (addition as :expr) then :PCLOSE
   |&gt; &#39;return $.expr&#39;
   | number
   ;
 
 number
   | :NUMBER &#39;return +$1&#39;
   ;
 
 start
   | addition
   ;



















keyboardNav egl.html operational-control-language.html
