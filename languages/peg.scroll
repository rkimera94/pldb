title PEG

import settings.scroll
htmlTitle PEG - Grammar language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/peg.pldb

* PEG, aka parsing expression grammar, is a <a href="../lists/languages.html?filter=grammarLanguage">grammar language</a> created in 2002.
 link ../lists/languages.html?filter=2002 2002

 

kpiTable
 #395 <span title="TotalRank: 870 Jobs: 102 Users: 534 Facts: 953 Links: 234">on PLDB</span>
 20 Years Old
 955 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging PEG">Books</span>
 0 <span title="Academic publications about or leveraging PEG">Papers</span>

* In computer science, a parsing expression grammar, or PEG, is a type of analytic formal grammar, i.e. it describes a formal language in terms of a set of rules for recognizing strings in the language. The formalism was introduced by Bryan Ford in 2004 and is closely related to the family of top-down parsing languages introduced in the early 1970s. <a href="https://en.wikipedia.org/wiki/Parsing_expression_grammar">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/Parsing_expression_grammar">PEG Wikipedia page</a>
- file extensions for PEG include peg
- <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/grammar_notation.py">syntax highlighting</a> for PEG
- See also: (1 related languages)<a href="regex.html">Regular Expressions</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/peg">Improve our PEG file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 Expr    ← Sum
 Sum     ← Product ((&#39;+&#39; / &#39;-&#39;) Product)*
 Product ← Value ((&#39;*&#39; / &#39;/&#39;) Value)*
 Value   ← [0-9]+ / &#39;(&#39; Expr &#39;)&#39;

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Parsing_expression_grammar'>Wikipedia</a>:
code
 Value   ← [0-9.]+ / &#39;(&#39; Expr &#39;)&#39;
 Product ← Expr ((&#39;*&#39; / &#39;/&#39;) Expr)*
 Sum     ← Expr ((&#39;+&#39; / &#39;-&#39;) Expr)*
 Expr    ← Product / Sum / Value

foldBreak
## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
  Token 

keyboardNav nasm.html shakespeare.html
