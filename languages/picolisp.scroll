title PicoLisp

import settings.scroll
htmlTitle PicoLisp - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/picolisp.pldb

paragraph
 PicoLisp is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1988">1988</a> by <a href="../lists/creators.html#Alexander_Burger">Alexander Burger</a>.

kpiTable
 #142 <span title="TotalRank: 405 Jobs: 101 Users: 896 Facts: 70 Links: 234">on PLDB</span>
 34 Years Old
 316 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging PicoLisp">Books</span>
 0 <span title="Academic publications about or leveraging PicoLisp">Papers</span>
 114 <span title="PicoLisp repos on GitHub.">Repos</span>

paragraph
 Try now: <a href="https://tio.run/#picolisp">TIO</a>





paragraph
 PicoLisp is an open source Lisp dialect. It runs on Linux and other POSIX-compliant systems.. <a href="https://en.wikipedia.org/wiki/PicoLisp">Read more on Wikipedia...</a>

list
 - the <a href="https://picolisp.com/">PicoLisp website</a>
 - the <a href="https://en.wikipedia.org/wiki/PicoLisp">PicoLisp Wikipedia page</a>
 - the <a href="https://picolisp.com/wiki/?Documentation">PicoLisp docs</a>
 - There are at least 114 PicoLisp repos on <a href="https://github.com/search?q=language:PicoLisp">GitHub</a>
 - file extensions for PicoLisp include l
 - The  Google BigQuery Public Dataset GitHub snapshot shows 85 users using PicoLisp in 99 repos on <a href="https://api.github.com/search/repositories?q=language:PicoLisp">GitHub</a>
 - Explore PicoLisp snippets on <a href="http://www.rosettacode.org/wiki/Category:PicoLisp">Rosetta Code</a>
 - GitHub supports <a href="https://github.com/textmate/lisp.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for PicoLisp
 - <a href="https://picolisp.com/">picolisp.com</a> was registered in 2007
 - See also: (9 related languages)<a href="lisp.html">Lisp</a>, <a href="linux.html">Linux</a>, <a href="s-expressions.html">S-expressions</a>, <a href="common-lisp.html">Common Lisp</a>, <a href="emacs-lisp.html">Emacs Lisp</a>, <a href="prolog.html">Prolog</a>, <a href="c.html">C</a>, <a href="assembly-language.html">Assembly language</a>, <a href="java.html">Java</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/picolisp">Improve our PicoLisp file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/textmate/lisp.tmbundle'>Linguist</a>:
code
 # 11dec13abu
 # (c) Software Lab. Alexander Burger
 
 (de permute (Lst)
    (ifn (cdr Lst)
       (cons Lst)
       (mapcan
          &#39;((X)
             (mapcar
                &#39;((Y) (cons X Y))
                (permute (delete X Lst)) ) )
          Lst ) ) )
 
 (de subsets (N Lst)
    (cond
       ((=0 N) &#39;(NIL))
       ((not Lst))
       (T
          (conc
             (mapcar
                &#39;((X) (cons (car Lst) X))
                (subsets (dec N) (cdr Lst)) )
             (subsets N (cdr Lst)) ) ) ) )
 
 (de shuffle (Lst)
    (by &#39;(NIL (rand)) sort Lst) )
 
 (de samples (Cnt Lst)
    (make
       (until (=0 Cnt)
          (when (&gt;= Cnt (rand 1 (length Lst)))
             (link (car Lst))
             (dec &#39;Cnt) )
          (pop &#39;Lst) ) ) )
 
 
 # Genetic Algorithm
 (de gen (&quot;Pop&quot; &quot;Cond&quot; &quot;Re&quot; &quot;Mu&quot; &quot;Se&quot;)
    (until (&quot;Cond&quot; &quot;Pop&quot;)
       (for (&quot;P&quot; &quot;Pop&quot; &quot;P&quot; (cdr &quot;P&quot;))
          (set &quot;P&quot;
             (maxi &quot;Se&quot;  # Selection
                (make
                   (for (&quot;P&quot; &quot;Pop&quot; &quot;P&quot;)
                      (rot &quot;P&quot; (rand 1 (length &quot;P&quot;)))
                      (link  # Recombination + Mutation
                         (&quot;Mu&quot; (&quot;Re&quot; (pop &#39;&quot;P&quot;) (pop &#39;&quot;P&quot;))) ) ) ) ) ) ) )
    (maxi &quot;Se&quot; &quot;Pop&quot;) )
 
 
 # Alpha-Beta tree search
 (de game (&quot;Flg&quot; &quot;Cnt&quot; &quot;Moves&quot; &quot;Move&quot; &quot;Cost&quot;)
    (let (&quot;Alpha&quot; &#39;(1000000)  &quot;Beta&quot; -1000000)
       (recur (&quot;Flg&quot; &quot;Cnt&quot; &quot;Alpha&quot; &quot;Beta&quot;)
          (let? &quot;Lst&quot; (&quot;Moves&quot; &quot;Flg&quot;)
             (if (=0 (dec &#39;&quot;Cnt&quot;))
                (loop
                   (&quot;Move&quot; (caar &quot;Lst&quot;))
                   (setq &quot;*Val&quot; (list (&quot;Cost&quot; &quot;Flg&quot;) (car &quot;Lst&quot;)))
                   (&quot;Move&quot; (cdar &quot;Lst&quot;))
                   (T (&gt;= &quot;Beta&quot; (car &quot;*Val&quot;))
                      (cons &quot;Beta&quot; (car &quot;Lst&quot;) (cdr &quot;Alpha&quot;)) )
                   (when (&gt; (car &quot;Alpha&quot;) (car &quot;*Val&quot;))
                      (setq &quot;Alpha&quot; &quot;*Val&quot;) )
                   (NIL (setq &quot;Lst&quot; (cdr &quot;Lst&quot;)) &quot;Alpha&quot;) )
                (setq &quot;Lst&quot;
                   (sort
                      (mapcar
                         &#39;((&quot;Mov&quot;)
                            (prog2
                               (&quot;Move&quot; (car &quot;Mov&quot;))
                               (cons (&quot;Cost&quot; &quot;Flg&quot;) &quot;Mov&quot;)
                               (&quot;Move&quot; (cdr &quot;Mov&quot;)) ) )
                         &quot;Lst&quot; ) ) )
                (loop
                   (&quot;Move&quot; (cadar &quot;Lst&quot;))
                   (setq &quot;*Val&quot;
                      (if (recurse (not &quot;Flg&quot;) &quot;Cnt&quot; (cons (- &quot;Beta&quot;)) (- (car &quot;Alpha&quot;)))
                         (cons (- (car @)) (cdar &quot;Lst&quot;) (cdr @))
                         (list (caar &quot;Lst&quot;) (cdar &quot;Lst&quot;)) ) )
                   (&quot;Move&quot; (cddar &quot;Lst&quot;))
                   (T (&gt;= &quot;Beta&quot; (car &quot;*Val&quot;))
                      (cons &quot;Beta&quot; (cdar &quot;Lst&quot;) (cdr &quot;Alpha&quot;)) )
                   (when (&gt; (car &quot;Alpha&quot;) (car &quot;*Val&quot;))
                      (setq &quot;Alpha&quot; &quot;*Val&quot;) )
                   (NIL (setq &quot;Lst&quot; (cdr &quot;Lst&quot;)) &quot;Alpha&quot;) ) ) ) ) ) )
 
 
 ### Grids ###
 (de grid (DX DY FX FY)
    (let Grid
       (make
          (for X DX
             (link
                (make
                   (for Y DY
                      (set
                         (link
                            (if (&gt; DX 26)
                               (box)
                               (intern (pack (char (+ X 96)) Y)) ) )
                         (cons (cons) (cons)) ) ) ) ) ) )
       (let West (and FX (last Grid))
          (for (Lst Grid  Lst)
             (let
                (Col (pop &#39;Lst)
                   East (or (car Lst) (and FX (car Grid)))
                   South (and FY (last Col)) )
                (for (L Col  L)
                   (with (pop &#39;L)
                      (set (: 0 1) (pop &#39;West))  # west
                      (con (: 0 1) (pop &#39;East))  # east
                      (set (: 0 -1) South)       # south
                      (con (: 0 -1)              # north
                         (or (car L) (and FY (car Col))) )
                      (setq South This) ) )
                (setq West Col) ) ) )
       Grid ) )
 
 (de west (This)
    (: 0 1 1) )
 
 (de east (This)
    (: 0 1 -1) )
 
 (de south (This)
    (: 0 -1 1) )
 
 (de north (This)
    (: 0 -1 -1) )
 
 (de disp (&quot;Grid&quot; &quot;How&quot; &quot;Fun&quot; &quot;X&quot; &quot;Y&quot; &quot;DX&quot; &quot;DY&quot;)
    (setq &quot;Grid&quot;
       (if &quot;X&quot;
          (mapcar
             &#39;((L) (flip (head &quot;DY&quot; (nth L &quot;Y&quot;))))
             (head &quot;DX&quot; (nth &quot;Grid&quot; &quot;X&quot;)) )
          (mapcar reverse &quot;Grid&quot;) ) )
    (let (N (+ (length (cdar &quot;Grid&quot;)) (or &quot;Y&quot; 1))  Sp (length N))
       (&quot;border&quot; north)
       (while (caar &quot;Grid&quot;)
          (prin &quot; &quot; (align Sp N) &quot; &quot;
             (and &quot;How&quot; (if (and (nT &quot;How&quot;) (west (caar &quot;Grid&quot;))) &quot; &quot; &#39;|)) )
          (for L &quot;Grid&quot;
             (prin
                (&quot;Fun&quot; (car L))
                (and &quot;How&quot; (if (and (nT &quot;How&quot;) (east (car L))) &quot; &quot; &#39;|)) ) )
          (prinl)
          (&quot;border&quot; south)
          (map pop &quot;Grid&quot;)
          (dec &#39;N) )
       (unless (&gt; (default &quot;X&quot; 1) 26)
          (space (inc Sp))
          (for @ &quot;Grid&quot;
             (prin &quot; &quot; (and &quot;How&quot; &quot;  &quot;) (char (+ 96 &quot;X&quot;)))
             (T (&gt; (inc &#39;&quot;X&quot;) 26)) )
          (prinl) ) ) )
 
 (de &quot;border&quot; (Dir)
    (when &quot;How&quot;
       (space Sp)
       (prin &quot;  +&quot;)
       (for L &quot;Grid&quot;
          (prin (if (and (nT &quot;How&quot;) (Dir (car L))) &quot;   +&quot; &quot;---+&quot;)) )
       (prinl) ) )
 





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   # A comment
  Token #
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav v.html rdf.html
