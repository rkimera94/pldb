title PL/M

import settings.scroll
htmlTitle PL/M - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/pl-m.pldb

paragraph
 PL/M, aka Programming Language for Microcomputers, is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1973">1973</a>.

kpiTable
 #495 <span title="TotalRank: 1027 Jobs: 101 Users: 847 Facts: 605 Links: 321">on PLDB</span>
 49 Years Old
 360 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging PL/M">Books</span>
 0 <span title="Academic publications about or leveraging PL/M">Papers</span>







paragraph
 The PL/M programming language  (an acronym of Programming Language for Microcomputers) is a high-level language conceived and developed by  Gary Kildall in 1973  for Hank Smith at Intel for its microprocessors. The language incorporated ideas from PL/I, ALGOL and XPL, and had an integrated macro processor. Unlike other contemporary languages such as Pascal, C or BASIC, PL/M had no standard input or output routines. <a href="https://en.wikipedia.org/wiki/PL/M">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/PL/M">PL/M Wikipedia page</a>
 - PL/M is listed on <a href="https://hopl.info/showlanguage.prx?exp=591">HOPL</a>
 - See also: (4 related languages)<a href="algol.html">Algol</a>, <a href="pl-i.html">PL/I</a>, <a href="xpl.html">XPL</a>, <a href="c.html">C</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/pl-m">Improve our PL/M file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/PL/M'>Wikipedia</a>:
code
 FIND: PROCEDURE(PA,PB) BYTE;
     DECLARE (PA,PB) BYTE;
     /* FIND THE STRING IN SCRATCH STARTING AT PA AND ENDING AT PB */
     DECLARE J ADDRESS,
         (K, MATCH) BYTE;
     J = BACK ;
     MATCH = FALSE;
         DO WHILE NOT MATCH AND (MAXM &gt; J);
         LAST,J = J + 1; /* START SCAN AT J */
         K = PA ; /* ATTEMPT STRING MATCH AT K */
             DO WHILE SCRATCH(K) = MEMORY(LAST) AND
                 NOT (MATCH := K = PB);
             /* MATCHED ONE MORE CHARACTER */
             K = K + 1; LAST = LAST + 1;
             END;
         END;
     IF MATCH THEN /* MOVE STORAGE */
         DO; LAST = LAST - 1; CALL MOVER;
         END;
     RETURN MATCH;
     END FIND;





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Assignment
  FeatureLink ../languages/assignment-feature.html
  Supported ✓
  Example
  Token :=
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   /* A comment
   */
  Token 
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   /* A comment
   */
  Token /* */
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav mathcad.html glsl.html
