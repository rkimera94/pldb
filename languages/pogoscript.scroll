title PogoScript

import settings.scroll
htmlTitle PogoScript - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/pogoscript.pldb

paragraph
 PogoScript is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2011">2011</a>.

kpiTable
 #766 <span title="TotalRank: 1314 Jobs: 101 Users: 854 Facts: 359 Links: 952">on PLDB</span>
 11 Years Old
 356 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging PogoScript">Books</span>
 0 <span title="Academic publications about or leveraging PogoScript">Papers</span>
 51 <span title="PogoScript repos on GitHub.">Repos</span>







paragraph
 A readable, DSL friendly programming language with excellent concurrency primitives

list
 - the <a href="http://pogoscript.org/">PogoScript website</a>
 - PogoScript is developed on <a href="https://github.com/featurist/pogoscript">GitHub</a> and has 127 stars
 - There are at least 51 PogoScript repos on <a href="https://github.com/search?q=language:PogoScript">GitHub</a>
 - file extensions for PogoScript include pogo
 - the PogoScript team is on <a href="https://twitter.com/pogoscript">Twitter</a>
 - The  Google BigQuery Public Dataset GitHub snapshot shows 4 users using PogoScript in 12 repos on <a href="https://api.github.com/search/repositories?q=language:PogoScript">GitHub</a>
 - GitHub supports <a href="https://github.com/featurist/PogoScript.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for PogoScript
 - <a href="http://pogoscript.org/">pogoscript.org</a> was registered in 2011
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/pogoscript">Improve our PogoScript file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/featurist/PogoScript.tmbundle'>Linguist</a>:
code
 httpism = require &#39;httpism&#39;
 async = require &#39;async&#39;
 resolve = require &#39;url&#39;.resolve
 
 exports.squash (url) ! =
     html = httpism.get ! (url).body
     squash html ! (html, url)
 
 squash html (html, url, callback) =
     replacements = sort (links in (html).concat(scripts in (html)))
     for each @(r) in (replacements) @{ r.url = resolve(url, r.href) }
     async.map (replacements, get) @(err, requested)
         callback (err, replace (requested) in (html))    
 
 sort (replacements) =
     replacements.sort @(a, b) @{ a.index - b.index }
 
 get (replacement) =
     replacement.body = httpism.get ! (replacement.url).body
     replacement
 
 replace (replacements) in (html) =
     i = 0
     parts = &quot;&quot;
     for each @(rep) in (replacements)
         parts := &quot;#(parts)#(html.substring(i, rep.index))&lt;#(rep.tag)&gt;#(rep.body)&lt;/#(rep.tag)&gt;&quot;
         i := rep.index + rep.length
     
     parts + html.substr(i)
 
 links in (html) =
     link reg = r/&lt;link\s[^&gt;]*href=[&quot;&#39;]?([^&quot;&#39;]+)[&quot;&#39;][^\&gt;]*(\/\&gt;|\&gt;\s*\&lt;\/link\&gt;)/gi
     elements in (html) matching (link reg) as &#39;style&#39;
 
 scripts in (html) =
     script reg = r/&lt;script\s[^&gt;]*src=[&quot;&#39;]?([^&quot;&#39;]+)[&quot;&#39;][^\&gt;]*(\/\&gt;|\&gt;\s*\&lt;\/script\&gt;)/gi
     elements in (html) matching (script reg) as &#39;script&#39;
 
 elements in (html) matching (reg) as (tag) =
     elements = []
     while (m = reg.exec (html))
         elements.push { tag = tag, index = m.index, length = m.0.length, href = m.1 }
     
     elements
 



















keyboardNav checked-c.html unity.html
