title Pointers

import settings.scroll
htmlTitle Pointers - Feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/pointers-feature.pldb

paragraph
 Pointers are a <a href="../lists/features.html">feature</a>.









paragraph
 A pointer is a programming language object that stores the memory address of another value located in computer memory.

list
 - the <a href="https://en.wikipedia.org/wiki/Pointer_(computer_programming)">Pointers Wikipedia page</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/pointers-feature">Improve our Pointers file</a>

html
 <br>

paragraph
 Languages <b>without</b> Pointers include <a href="java.html">Java</a>, <a href="javascript.html">JavaScript</a>, <a href="python.html">Python</a>, <a href="elixir.html">Elixir</a>

paragraph
 Languages <b>with</b> Pointers include <a href="c.html">C</a>, <a href="cpp.html">C++</a>, <a href="csharp.html">C#</a>, <a href="go.html">Go</a>, <a href="cobol.html">COBOL</a>, <a href="ada.html">Ada</a>, <a href="objective-c.html">Objective-C</a>, <a href="modula-2.html">Modula-2</a>, <a href="eiffel.html">Eiffel</a>, <a href="d.html">D</a>, <a href="oberon.html">Oberon</a>, <a href="pl-i.html">PL/I</a>, <a href="freebasic.html">FreeBASIC</a>, <a href="felix.html">Felix</a>, <a href="x.html">Jule</a>, <a href="blitzmax.html">BlitzMax</a>, <a href="dale.html">Dale</a>, <a href="fortran-90.html">Fortran 90</a>

exampleCodeHeader Example from <a href="c.html">C</a>:

code
 int *ptr;

exampleCodeHeader Example from <a href="cpp.html">C++</a>:

code
 int *p;

exampleCodeHeader Example from <a href="csharp.html">C#</a>:

code
 // Pointers supported only under certain conditions.
 // Get 16 bytes of memory from the process&#39;s unmanaged memory
 IntPtr pointer = System.Runtime.InteropServices.Marshal.AllocHGlobal(16);

exampleCodeHeader Example from <a href="go.html">Go</a>:

code
 package main
 
 import &quot;fmt&quot;
 
 func main() {
   i, j := 42, 2701
 
   p := &amp;i         // point to i
   fmt.Println(*p) // read i through the pointer
   *p = 21         // set i through the pointer
   fmt.Println(i)  // see the new value of i
 
   p = &amp;j         // point to j
   *p = *p / 37   // divide j through the pointer
   fmt.Println(j) // see the new value of j
 }
 

exampleCodeHeader Example from <a href="felix.html">Felix</a>:

code
 var x = 1;
 &amp;x &lt;- 2;

exampleCodeHeader Example from <a href="x.html">Jule</a>:

code
 let ptr: *int = nil

exampleCodeHeader Example from <a href="fortran-90.html">Fortran 90</a>:

code
 type real_list_t
   real :: sample_data(100)
   type (real_list_t), pointer :: next =&gt; null ()
 end type
 
 type (real_list_t), target :: my_real_list
 type (real_list_t), pointer :: real_list_temp
 
 real_list_temp =&gt; my_real_list
 do
   read (1,iostat=ioerr) real_list_temp%sample_data
   if (ioerr /= 0) exit
   allocate (real_list_temp%next)
   real_list_temp =&gt; real_list_temp%next
 end do



















keyboardNav operator-overloading-feature.html postfix-notation-feature.html
