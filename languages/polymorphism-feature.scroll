title Polymorphism

import settings.scroll
htmlTitle Polymorphism - Language feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/polymorphism-feature.pldb

* Polymorphism is a <a href="../lists/features.html">language feature</a> created in 1960.
 link ../lists/languages.html?filter=1960 1960

 

* In programming languages and type theory, polymorphism is the provision of a single interface to entities of different types  or the use of a single symbol to represent multiple different types.The most commonly recognised major classes of polymorphism are:  Ad hoc polymorphism: defines a common interface for an arbitrary set of individually specified types. Parametric polymorphism: when one or more types are not specified by name but by abstract symbols that can represent any type. Subtyping (also called subtype polymorphism or inclusion polymorphism): when a name denotes instances of many different classes related by some common superclass.. <a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">Polymorphism Wikipedia page</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/polymorphism-feature">Improve our Polymorphism file</a>

html
 <br>

* Languages *without* Polymorphism include <a href="x.html">Jule</a>

* Languages *with* Polymorphism include <a href="javascript.html">JavaScript</a>, <a href="pascal.html">Pascal</a>, <a href="elixir.html">Elixir</a>, <a href="felix.html">Felix</a>

exampleCodeHeader Example from <a href="javascript.html">JavaScript</a>:

code
 &quot;a&quot; + &quot;b&quot;; 1 + 2

exampleCodeHeader Example from <a href="elixir.html">Elixir</a>:

code
 https://hexdocs.pm/elixir/Protocol.html

exampleCodeHeader Example from <a href="felix.html">Felix</a>:

code
 // overloads
 fun f (x:double) =&gt; x +42.1;
 fun f (x:int) =&gt;  x + 1;
 fun f (x:string) =&gt; x + &quot;!&quot;;

keyboardNav maps-feature.html monads-feature.html
