title PRQL

import settings.scroll
htmlTitle PRQL - Query language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/prql.pldb

paragraph
 PRQL, aka Pipelined Relational Query Language, is a <a href="../lists/languages.html?filter=queryLanguage">query language</a> created in <a href="../lists/languages.html?filter=2022">2022</a> by <a href="../lists/creators.html#Maximilian_Roos">Maximilian Roos</a>.

kpiTable
 #382 <span title="TotalRank: 838 Jobs: 101 Users: 212 Facts: 525 Links: 952">on PLDB</span>
 0 Years Old
 4.5k <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging PRQL">Books</span>
 0 <span title="Academic publications about or leveraging PRQL">Papers</span>







paragraph
 PRQL is a modern language for transforming data — a simple, powerful, pipelined SQL replacement

list
 - the <a href="https://prql-lang.org/">PRQL website</a>
 - PRQL is developed on <a href="https://github.com/prql/prql">GitHub</a> and has 4,261 stars
 - PRQL compiles to <a href="sql.html">SQL</a>
 - <a href="https://prql-lang.org/">prql-lang.org</a> was registered in 2022
 - Read more about PRQL on the web: <a href="https://news.ycombinator.com/item?id=31897430">1</a>,<a href="https://news.ycombinator.com/item?id=30060784">2</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/prql">Improve our PRQL file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 from employees
 filter country == &quot;USA&quot;                       # Each line transforms the previous result.
 aggregate [                                   # `aggregate` reduces column to a value.
   max salary,
   min salary,
   count,                                      # Closing commas are allowed :)
 ]

exampleCodeHeader Example from the web:
code
 from employees
 filter start_date &gt; @2021-01-01               # Clear date syntax.
 derive [                                      # `derive` adds columns / variables.
   gross_salary = salary + (tax ?? 0),         # Terse coalesce
   gross_cost = gross_salary + benefits_cost,  # Variables can use other variables.
 ]
 filter gross_cost &gt; 0
 group [title, country] (                      # `group` runs a pipeline over each group.
   aggregate [                                 # `aggregate` reduces each group to a row.
     average gross_salary,
     sum_gross_cost = sum gross_cost,          # `=` sets a column name.
   ]
 )
 filter sum_gross_cost &gt; 100000                # Identical syntax for SQL&#39;s `WHERE` &amp; `HAVING`.
 derive id = f&quot;{title}_{country}&quot;              # F-strings like python.
 sort [sum_gross_cost, -country]               # `-country` means descending order.
 take 1..20                                    # Range expressions (also valid here as `take 20`).





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   # A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   # A comment
  Token #
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav clu.html quickbasic.html
