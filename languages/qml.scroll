title QML

import settings.scroll
htmlTitle QML - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/qml.pldb

paragraph
 QML, aka Qt Modeling Language, is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2009">2009</a>.

kpiTable
 #207 <span title="TotalRank: 550 Jobs: 101 Users: 477 Facts: 62 Links: 387">on PLDB</span>
 13 Years Old
 1.1k <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging QML">Books</span>
 0 <span title="Academic publications about or leveraging QML">Papers</span>
 15k <span title="QML repos on GitHub.">Repos</span>







paragraph
 QML (Qt Modeling Language) is a user interface markup language. It is a declarative language (similar to CSS and JSON) for designing user interfaceâ€“centric applications. Inline JavaScript code handles imperative aspects. <a href="https://en.wikipedia.org/wiki/QML">Read more on Wikipedia...</a>

list
 - the <a href="http://qt-project.org/doc/qt-5/qmlapplications.html">QML website</a>
 - the <a href="https://en.wikipedia.org/wiki/QML">QML Wikipedia page</a>
 - There are at least 14,755 QML repos on <a href="https://github.com/search?q=language:QML">GitHub</a>
 - file extensions for QML include qml and qbs
 - The  Google BigQuery Public Dataset GitHub snapshot shows 4k users using QML in 5k repos on <a href="https://api.github.com/search/repositories?q=language:QML">GitHub</a>
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/webmisc.py">syntax highlighting</a> for QML
 - GitHub supports <a href="https://github.com/skozlovf/Sublime-QML" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for QML
 - See also: (3 related languages)<a href="json.html">JSON</a>, <a href="javascript.html">JavaScript</a>, <a href="ring.html">Ring</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/qml">Improve our QML file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 Item {
     Rectangle {
         id: myRect
         width: 120
         height: 100
     }
     Rectangle {
         width: myRect.width
         height: 200
     }
 }

exampleCodeHeader Example from <a href='https://github.com/skozlovf/Sublime-QML'>Linguist</a>:
code
 /****************************************************************************
 **
 ** Copyright (C) 2015 The Qt Company Ltd.
 ** Contact: http://www.qt.io/licensing
 **
 ** This file is part of the Qt Build Suite.
 **
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
 ** a written agreement between you and The Qt Company. For licensing terms and
 ** conditions see http://www.qt.io/terms-conditions. For further information
 ** use the contact form at http://www.qt.io/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
 ** General Public License version 2.1 or version 3 as published by the Free
 ** Software Foundation and appearing in the file LICENSE.LGPLv21 and
 ** LICENSE.LGPLv3 included in the packaging of this file.  Please review the
 ** following information to ensure the GNU Lesser General Public License
 ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
 ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, The Qt Company gives you certain additional
 ** rights.  These rights are described in The Qt Company LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
 ****************************************************************************/
 
 import qbs 1.0
 import qbs.FileInfo
 import qbs.ModUtils
 
 Module {
     property string buildVariant: &quot;debug&quot;
     property bool enableDebugCode: buildVariant == &quot;debug&quot;
     property bool debugInformation: (buildVariant == &quot;debug&quot;)
     property string optimization: (buildVariant == &quot;debug&quot; ? &quot;none&quot; : &quot;fast&quot;)
     readonly property stringList hostOS: undefined // set internally
     property string hostOSVersion: {
         if (hostOS &amp;&amp; hostOS.contains(&quot;osx&quot;)) {
             return getNativeSetting(&quot;/System/Library/CoreServices/ServerVersion.plist&quot;, &quot;ProductVersion&quot;) ||
                    getNativeSetting(&quot;/System/Library/CoreServices/SystemVersion.plist&quot;, &quot;ProductVersion&quot;);
         } else if (hostOS &amp;&amp; hostOS.contains(&quot;windows&quot;)) {
             var version = getNativeSetting(&quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion&quot;, &quot;CurrentVersion&quot;);
             return version + &quot;.&quot; + hostOSBuildVersion;
         }
     }
 
     property string hostOSBuildVersion: {
         if (hostOS.contains(&quot;osx&quot;)) {
             return getNativeSetting(&quot;/System/Library/CoreServices/ServerVersion.plist&quot;, &quot;ProductBuildVersion&quot;) ||
                    getNativeSetting(&quot;/System/Library/CoreServices/SystemVersion.plist&quot;, &quot;ProductBuildVersion&quot;);
         } else if (hostOS.contains(&quot;windows&quot;)) {
             return getNativeSetting(&quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion&quot;, &quot;CurrentBuildNumber&quot;);
         }
     }
 
     readonly property var hostOSVersionParts: hostOSVersion ? hostOSVersion.split(&#39;.&#39;).map(function(item) { return parseInt(item, 10); }) : []
     readonly property int hostOSVersionMajor: hostOSVersionParts[0] || 0
     readonly property int hostOSVersionMinor: hostOSVersionParts[1] || 0
     readonly property int hostOSVersionPatch: hostOSVersionParts[2] || 0
 
     property stringList targetOS: hostOS
     property string pathListSeparator: hostOS.contains(&quot;windows&quot;) ? &quot;;&quot; : &quot;:&quot;
     property string pathSeparator: hostOS.contains(&quot;windows&quot;) ? &quot;\\&quot; : &quot;/&quot;
     property string profile
     property stringList toolchain
     property string architecture
     property bool install: false
     property string installSourceBase
     readonly property string installRoot: undefined
     property string installDir
     property string installPrefix: &quot;&quot;
     property path sysroot
 
     PropertyOptions {
         name: &quot;buildVariant&quot;
         allowedValues: [&#39;debug&#39;, &#39;release&#39;]
         description: &quot;name of the build variant&quot;
     }
 
     PropertyOptions {
         name: &quot;optimization&quot;
         allowedValues: [&#39;none&#39;, &#39;fast&#39;, &#39;small&#39;]
         description: &quot;optimization level&quot;
     }
 
     validate: {
         var validator = new ModUtils.PropertyValidator(&quot;qbs&quot;);
         validator.setRequiredProperty(&quot;architecture&quot;, architecture,
                                       &quot;you might want to re-run &#39;qbs-setup-toolchains&#39;&quot;);
         validator.setRequiredProperty(&quot;hostOS&quot;, hostOS);
         validator.setRequiredProperty(&quot;targetOS&quot;, targetOS);
         if (hostOS &amp;&amp; (hostOS.contains(&quot;windows&quot;) || hostOS.contains(&quot;osx&quot;))) {
             validator.setRequiredProperty(&quot;hostOSVersion&quot;, hostOSVersion,
                                           &quot;could not detect host operating system version; &quot; +
                                           &quot;verify that system files and registry keys have not &quot; +
                                           &quot;been modified.&quot;);
             if (hostOSVersion)
                 validator.addVersionValidator(&quot;hostOSVersion&quot;, hostOSVersion, 2, 4);
 
             validator.setRequiredProperty(&quot;hostOSBuildVersion&quot;, hostOSBuildVersion,
                                           &quot;could not detect host operating system build version; &quot; +
                                           &quot;verify that system files or registry have not been &quot; +
                                           &quot;tampered with.&quot;);
         }
 
         validator.addCustomValidator(&quot;architecture&quot;, architecture, function (value) {
             return architecture === canonicalArchitecture(architecture);
         }, &quot;&#39;&quot; + architecture + &quot;&#39; is invalid. You must use the canonical name &#39;&quot; +
         canonicalArchitecture(architecture) + &quot;&#39;&quot;);
 
         validator.validate();
     }
 
     // private properties
     property var commonRunEnvironment: {
         var env = {};
         if (targetOS.contains(&quot;windows&quot;)) {
             env[&quot;PATH&quot;] = [
                 FileInfo.joinPaths(installRoot, installPrefix)
             ];
         } else if (hostOS.contains(&quot;darwin&quot;) &amp;&amp; targetOS.contains(&quot;darwin&quot;)) {
             env[&quot;DYLD_FRAMEWORK_PATH&quot;] = [
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;Library&quot;, &quot;Frameworks&quot;),
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;lib&quot;),
                 FileInfo.joinPaths(installRoot, installPrefix)
             ].join(pathListSeparator);
 
             env[&quot;DYLD_LIBRARY_PATH&quot;] = [
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;lib&quot;),
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;Library&quot;, &quot;Frameworks&quot;),
                 FileInfo.joinPaths(installRoot, installPrefix)
             ].join(pathListSeparator);
 
             if (targetOS.contains(&quot;ios-simulator&quot;) &amp;&amp; sysroot) {
                 env[&quot;DYLD_ROOT_PATH&quot;] = [sysroot];
             }
         } else if (hostOS.contains(&quot;unix&quot;) &amp;&amp; targetOS.contains(&quot;unix&quot;)) {
             env[&quot;LD_LIBRARY_PATH&quot;] = [
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;lib&quot;)
             ];
         }
 
         return env;
     }
 
     // internal properties
     readonly property string version: [versionMajor, versionMinor, versionPatch].join(&quot;.&quot;)
     readonly property int versionMajor: undefined // set internally
     readonly property int versionMinor: undefined // set internally
     readonly property int versionPatch: undefined // set internally
 }
 

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/QML'>Wikipedia</a>:
code
 MouseArea {
      onPressed: console.log(&quot;mouse button pressed&quot;)
  }





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported âœ“
  Example
   // [0-9]+
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported âœ“
  Example
   // [0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported âœ“
  Example
   // 0x[0-9a-fA-F]+
  Token 
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported âœ“
  Example
   /* A comment
   */
  Token /* */
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported âœ“
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported âœ“
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported Ï´
  Example
  Token 













keyboardNav flow.html newlisp.html
