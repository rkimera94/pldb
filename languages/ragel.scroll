title Ragel

import settings.scroll
htmlTitle Ragel - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/ragel.pldb

paragraph
 Ragel is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2007">2007</a>.

kpiTable
 #453 <span title="TotalRank: 928 Jobs: 65 Users: 820 Facts: 198 Links: 665">on PLDB</span>
 15 Years Old
 373 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Ragel">Books</span>
 0 <span title="Academic publications about or leveraging Ragel">Papers</span>
 66 <span title="Ragel repos on GitHub.">Repos</span>







paragraph
 Ragel is a finite-state machine compiler and a parser generator. Initially Ragel supported output for C, C++ and Assembly source code,. Although subsequently extended to support several other languages (said to be Objective C, D, Go, Ruby, and Java) this support of other languages was withdrawn . <a href="https://en.wikipedia.org/wiki/Ragel">Read more on Wikipedia...</a>

list
 - the <a href="http://complang.org/ragel/">Ragel website</a>
 - the <a href="https://en.wikipedia.org/wiki/Ragel">Ragel Wikipedia page</a>
 - Ragel is developed on <a href="https://github.com/bnoordhuis/ragel">GitHub</a> and has 152 stars
 - There are at least 66 Ragel repos on <a href="https://github.com/search?q=language:Ragel">GitHub</a>
 - file extensions for Ragel include rl
 - The  Google BigQuery Public Dataset GitHub snapshot shows 295 users using Ragel in 317 repos on <a href="https://api.github.com/search/repositories?q=language:Ragel">GitHub</a>
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/parsers.py">syntax highlighting</a> for Ragel
 - See also: (9 related languages)<a href="c.html">C</a>, <a href="d.html">D</a>, <a href="go.html">Go</a>, <a href="ruby.html">Ruby</a>, <a href="java.html">Java</a>, <a href="regex.html">Regular Expressions</a>, <a href="ascii.html">ASCII</a>, <a href="xuml.html">XUML</a>, <a href="umple.html">Umple</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/ragel">Improve our Ragel file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 =begin
 %%{
   machine simple_scanner;
 
   action Emit {
     emit data[(ts+8)..(te-7)].pack(&#39;c*&#39;)
   }
 
   foo = &#39;STARTFOO&#39; any+ :&gt;&gt; &#39;ENDFOO&#39;;
   
   main := |*
     foo =&gt; Emit;
     any;
   *|;
 }%%
 =end
 
 
 # Scans a file for &quot;STARTFOO[...]ENDFOO&quot; blocks and outputs their contents.
 #
 # ENV[&#39;CHUNK_SIZE&#39;] determines how much of the file to read in at a time, allowing you to control memory usage.
 #
 # Uses ragel&#39;s scanner functionality even though it&#39;s not strictly necessary.
 class SimpleScanner
   attr_reader :path
 
   def initialize(path)
     @path = path
     %% write data;
     # % (this fixes syntax highlighting)
   end
 
   def emit(foo)
     $stdout.puts foo
   end
   
   def perform
     # So that ragel doesn&#39;t try to get it from data.length
     pe = :ignored
     eof = :ignored
 
     %% write init;
     # % (this fixes syntax highlighting)
 
     leftover = []
     
     File.open(path) do |f|
       while chunk = f.read(ENV[&#39;CHUNK_SIZE&#39;].to_i)
         data = leftover + chunk.unpack(&#39;c*&#39;)
         p ||= 0
         pe = data.length
 
         %% write exec;
         # % (this fixes syntax highlighting)
         if ts
           leftover = data[ts..pe]
           p = p - ts
           ts = 0
         else
           leftover = []
           p = 0
         end
       end
     end
   end
 end
 
 s = SimpleScanner.new ARGV[0]
 s.perform





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
   # [+-]?[0-9]+
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
   # 0x[0-9A-Fa-f]+
  Token 
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   # A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   # A comment
  Token #
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav vrml.html hexagon.html
