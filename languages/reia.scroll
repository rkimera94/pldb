title Reia

import settings.scroll
htmlTitle Reia - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/reia.pldb

paragraph
 Reia is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2010">2010</a>.

kpiTable
 #833 <span title="TotalRank: 1380 Jobs: 101 Users: 2334 Facts: 326 Links: 953">on PLDB</span>
 12 Years Old
 0 <span title="Books about or leveraging Reia">Books</span>
 0 <span title="Academic publications about or leveraging Reia">Papers</span>







paragraph
 

list
 - the <a href="http://reia-lang.org">Reia website</a>
 - <a href="http://reia-lang.org">reia-lang.org</a> was registered in 2008
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/reia">Improve our Reia file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 # Hello, world!
 &quot;Hello, world!&quot;.puts()
 
 # Assignment
 number = 42
 opposite = true
 
 # Conditions
 number = -42 if opposite
 
 # Lists (stored as immutable singly-linked lists)
 list = [1, 2, 3, 4, 5]
 
 # Tuples (think of them as immutable arrays)
 tuple = (1, 2, 3, 4, 5)
 
 # Atoms (known as symbols to Ruby people)
 # Think of them as an open-ended enumeration
 atom = :up_and_atom
 
 # Dicts (also known as hashes to Ruby people)
 dict = {:foo =&gt; 1, :bar =&gt; 2, :baz =&gt; 3}
 
 # Strings (unlike Erlang, Reia has a real String type!)
 string = &quot;I&#39;m a string! Woohoo I&#39;m a string! #{&#39;And I interpolate too!&#39;}&quot;
 
 # Ranges
 range = 0..42
 
 # Funs (anonymous functions, a.k.a. lambdas, procs, closures, etc.)
 # Calling me with plustwo(40) would return 42
 plustwo = fun(n) { n + 2 }
 
 # Modules (collections of functions)
 # Calling Plusser.addtwo(40) would return 42
 module Plusser
   def addtwo(n)
     n + 2
   end
 end
 
 # Classes (of immutable objects. Once created objects can&#39;t be changed!)
 class Adder
   # Reia supports binding instance variables directly when they&#39;re passed
   # as arguments to initialize
   def initialize(@n); end
 
   def plus(n)
     @n + n
   end
 end
 
 # Instantiate classes by calling Classname(arg1, arg2, ...)
 # For you Ruby people who want Classname.new(...) this is coming soon!
 fortytwo = Adder(40).plus(2)
 
 # Function references can be obtained by omitting parens from a function call,
 # like JavaScript or Python
 numbers = [1,2,3]
 reverser = [1,2,3].reverse
 
 # Function references can be invoked just like lambdas
 reversed = reverser() # reversed is now [3,2,1]
 
 # You can add a ! to the end of any method to rebind the method receiver to 
 # the return value of the given method minus the bang.
 numbers.reverse!() # numbers is now [3,2,1]
 
 # List comprehensions
 doubled = [n * 2 for n in numbers] # doubled is [6,4,2]





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   # A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   # A comment
  Token #
 row
  Feature Assignment
  FeatureLink ../languages/assignment-feature.html
  Supported ✓
  Example
  Token =











subsection HackerNews discussions of Reia

pipeTable
 title|titleLink|date|score|comments
 Reia - Ruby's powerful syntax with Erlang concurrency and fault-tolerance|https://news.ycombinator.com/item?id=1889905|11/10/2010|2|1

keyboardNav roku-brightscript.html 1620sps.html
