title Seq

import settings.scroll
htmlTitle Seq - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/seq.pldb

paragraph
 Seq is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2019">2019</a>.

kpiTable
 #2338 <span title="TotalRank: 2848 Jobs: 62 Users: 2728 Facts: 1836 Links: 950">on PLDB</span>
 3 Years Old
 0 <span title="Books about or leveraging Seq">Books</span>
 0 <span title="Academic publications about or leveraging Seq">Papers</span>







paragraph
 A High-Performance Language for Bioinformatics. Here, we introduce Seq, the first language tailored specifically to bioinformatics, which marries the ease and productivity of Python with C-like performance. Seq is a subset of Python—and in many cases a drop-in replacement—yet also incorporates novel bioinformatics- and computational genomics-oriented data types, language constructs and optimizations. Seq enables users to write high-level, Pythonic code without having to worry about low-level or domain-specific optimizations, and allows for seamless expression of the algorithms, idioms and patterns found in many genomics or bioinformatics applications. On equivalent CPython code, Seq attains a performance improvement of up to two orders of magnitude, and a 175× improvement once domain-specific language features and optimizations are used. With parallelism, we demonstrate up to a 650× improvement. Compared to optimized C++ code, which is already difficult for most biologists to produce, Seq frequently attains up to a 2× improvement, and with shorter, cleaner code. Thus, Seq opens the door to an age of democratization of highly-optimized bioinformatics software.

list
 - Read more about Seq on the web: <a href="http://cb.csail.mit.edu/cb/seq/oopsla19-paper34.pdf">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/seq">Improve our Seq file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 from sys import argv
 from genomeindex import *
 
 # index and process 20-mers
 def process(kmer: k20, index: GenomeIndex[k20]):
  prefetch index[kmer], index[~kmer]
  hits_fwd = index[kmer]
  hits_rev = index[~kmer]



















keyboardNav prompter.html strudel.html
