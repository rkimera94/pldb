title snakemake

import settings.scroll
htmlTitle snakemake - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/snakemake.pldb

* snakemake is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2012.
 link ../lists/languages.html?filter=2012 2012

 

kpiTable
 #1012 <span title="TotalRank: 1554 Jobs: 102 Users: 2748 Facts: 499 Links: 953">on PLDB</span>
 10 Years Old
 0 <span title="Books about or leveraging snakemake">Books</span>
 0 <span title="Academic publications about or leveraging snakemake">Papers</span>

* A workflow is defined in a ‘Snakefile’ through a domain-specific language that is close to standard Python syntax. It consists of rules that denote how to create output files from input files. The workflow is implied by dependencies between the rules that arise from one rule needing an output file of another as an input file.

- Read more about snakemake on the web: <a href="https://academic.oup.com/bioinformatics/article/28/19/2520/290322">1</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/snakemake">Improve our snakemake file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 SAMPLES = &quot;100 101 102 103&quot;.split()
 
 REF = &quot;hg19.fa&quot;
 
 rule all:
 
  input: &quot;{sample}.coverage.pdf&quot;.format(sample = sample)
 
     for sample in SAMPLES
 
 rule fastq_to_sai:
 
   input: ref = REF, reads = &quot;{sample}.{group}.fastq&quot;
 
   output: temp(&quot;{sample}.{group}.sai&quot;)
 
   shell: &quot;bwa aln {input.ref} {input.reads} &gt; {output}&quot;
 
 rule sai_to_bam:
 
   input: REF, &quot;{sample}.1.sai&quot;, &quot;{sample}.2.sai&quot;,
 
      &quot;{sample}.1.fastq&quot;, &quot;{sample}.2.fastq&quot;
 
   output: protected(&quot;{sample}.bam&quot;)
 
   shell: &quot;bwa sampe {input} | samtools view -Sbh - &gt; {output}&quot;
 
 rule remove_duplicates:
 
   input: &quot;{sample}.bam&quot;
 
   output: &quot;{sample}.nodup.bam&quot;
 
   shell: &quot;samtools rmdup {input} {output}&quot;
 
 rule plot_coverage_histogram:
 
   input: &quot;{sample}.nodup.bam&quot;
 
   output: hist = &quot;{sample}.coverage.pdf&quot;
 
   run:
 
     from matplotlib.pyplot import hist, savefig
 
     hist(list(map(int,
 
       shell(&quot;samtools mpileup {input} | cut -f4&quot;,
 
       iterable = True))))
 
     savefig(output.hist)

keyboardNav eex.html sequential-function-chart.html
