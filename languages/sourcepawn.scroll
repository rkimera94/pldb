title SourcePawn

import settings.scroll
htmlTitle SourcePawn - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/sourcepawn.pldb

paragraph
 SourcePawn is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2014">2014</a>.

kpiTable
 #411 <span title="TotalRank: 907 Jobs: 101 Users: 659 Facts: 147 Links: 952">on PLDB</span>
 8 Years Old
 599 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging SourcePawn">Books</span>
 0 <span title="Academic publications about or leveraging SourcePawn">Papers</span>
 8k <span title="SourcePawn repos on GitHub.">Repos</span>







paragraph
 A small, statically typed scripting language.

list
 - SourcePawn is developed on <a href="https://github.com/alliedmodders/sourcepawn">GitHub</a> and has 239 stars
 - There are at least 7,547 SourcePawn repos on <a href="https://github.com/search?q=language:SourcePawn">GitHub</a>
 - file extensions for SourcePawn include sp and inc
 - The  Google BigQuery Public Dataset GitHub snapshot shows 7k users using SourcePawn in 9k repos on <a href="https://api.github.com/search/repositories?q=language:SourcePawn">GitHub</a>
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/pawn.py">syntax highlighting</a> for SourcePawn
 - GitHub supports <a href="https://github.com/github-linguist/sublime-sourcepawn" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for SourcePawn
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/sourcepawn">Improve our SourcePawn file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/github-linguist/sublime-sourcepawn'>Linguist</a>:
code
 /* Fixed point arithmetic
  *
  * (c) Copyright 1998-2011, ITB CompuPhase
  * This file is provided as is (no warranties).
  */
 #pragma library Fixed
 
 const fround_method: {
   fround_round = 0,
   fround_floor,
   fround_ceil,
   fround_tozero,
   fround_unbiased
 }
 
 native Fixed:fixed(value);
 native Fixed:strfixed(const string[]);
 native Fixed:fmul(Fixed:oper1, Fixed:oper2);
 native Fixed:fdiv(Fixed:dividend, Fixed:divisor);
 native Fixed:ffract(Fixed:value);
 native       fround(Fixed:value, fround_method:method=fround_round);
 native Fixed:fpower(Fixed:value, exponent);
 native Fixed:fsqroot(Fixed:value);
 native Fixed:fabs(Fixed:value);
 
 #pragma rational Fixed(3)
 
 /* user defined operators */
 native Fixed:operator*(Fixed:oper1, Fixed:oper2) = fmul;
 native Fixed:operator/(Fixed:oper1, Fixed:oper2) = fdiv;
 native Fixed:operator=(oper) = fixed;
 
 stock Fixed:operator++(Fixed:oper)
     return oper + fixed(1);
 
 stock Fixed:operator--(Fixed:oper)
     return oper - fixed(1);
 
 stock Fixed:operator*(Fixed:oper1, oper2)
     return Fixed: (_:oper1 * oper2);            /* &quot;*&quot; is commutative */
 
 stock Fixed:operator/(Fixed:oper1, oper2)
     return oper1 / fixed(oper2);
 
 stock Fixed:operator/(oper1, Fixed:oper2)
     return fdiv(fixed(oper1), oper2);
 
 stock Fixed:operator+(Fixed:oper1, oper2)
     return oper1 + fixed(oper2);                /* &quot;+&quot; is commutative */
 
 stock Fixed:operator-(Fixed:oper1, oper2)
     return oper1 - fixed(oper2);
 
 stock Fixed:operator-(oper1, Fixed:oper2)
     return fixed(oper1) - oper2;
 
 stock bool:operator&gt;(Fixed:oper1, oper2)
     return oper1 &gt; fixed(oper2);
 
 stock bool:operator&gt;(oper1, Fixed:oper2)
     return fixed(oper1) &gt; oper2;
 
 stock bool:operator&gt;=(Fixed:oper1, oper2)
     return oper1 &gt;= fixed(oper2);
 
 stock bool:operator&gt;=(oper1, Fixed:oper2)
     return fixed(oper1) &gt;= oper2;
 
 stock bool:operator&lt;(Fixed:oper1, oper2)
     return oper1 &lt; fixed(oper2);
 
 stock bool:operator&lt;(oper1, Fixed:oper2)
     return fixed(oper1) &lt; oper2;
 
 stock bool:operator&lt;=(Fixed:oper1, oper2)
     return oper1 &lt;= fixed(oper2);
 
 stock bool:operator&lt;=(oper1, Fixed:oper2)
     return fixed(oper1) &lt;= oper2;
 
 stock bool:operator==(Fixed:oper1, oper2)       /* &quot;==&quot; is commutative */
     return oper1 == fixed(oper2);
 
 stock bool:operator!=(Fixed:oper1, oper2)       /* &quot;!=&quot; is commutative */
     return oper1 != fixed(oper2);
 
 /* forbidden operations */
 forward operator%(Fixed:oper1, Fixed:oper2);
 forward operator%(Fixed:oper1, oper2);
 forward operator%(oper1, Fixed:oper2);





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Octals
  FeatureLink ../languages/octals-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   /* A comment
   */
  Token 
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   /* A comment
   */
  Token /* */
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav ladder-logic.html common-workflow-language.html
