title StruQL

import settings.scroll
htmlTitle StruQL - Query language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/struql.pldb

paragraph
 StruQL is a <a href="../lists/languages.html?filter=queryLanguage">query language</a> created in <a href="../lists/languages.html?filter=1999">1999</a> by <a href="../lists/creators.html#Mary_Fernández">Mary Fernández</a> and <a href="../lists/creators.html#Dan_Suciu">Dan Suciu</a> and <a href="../lists/creators.html#and_Igor_Tatarinov">and Igor Tatarinov</a>.

kpiTable
 #1342 <span title="TotalRank: 1851 Jobs: 101 Users: 2740 Facts: 797 Links: 953">on PLDB</span>
 23 Years Old
 0 <span title="Books about or leveraging StruQL">Books</span>
 0 <span title="Academic publications about or leveraging StruQL">Papers</span>







paragraph
 A StruQL query is a function from a set of input graphs to an output graph.

list
 - Read more about StruQL on the web: <a href="https://www.usenix.org/legacy/events/dsl99/full_papers/fernandez/fernandez.pdf">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/struql">Improve our StruQL file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
  // Link root page to page of all accounts
  link Root() -&gt; &quot;Accounts&quot; -&gt; AccountsPage()
  // AccountsPage refers to each account in account database and its associated page
  { where (acct, name, street, city, state, zip) in SQL.query(&quot;AccountDB&quot;, &quot;select acct ...&quot;)
  link AccountsPage() -&gt; &quot;Info&quot; -&gt; Info(acct),
  Info(acct) -&gt; { &quot;Acct&quot; acct, &quot;Name&quot; name, &quot;Street&quot; street,
  &quot;City&quot; city, &quot;State&quot; state, &quot;Zip&quot; zip,
  &quot;AcctPage&quot; AcctPage(acct) },
  AcctPage(acct) -&gt; &quot;Info&quot; -&gt; Info(acct)
  
   // AcctPage refers to non-zero usage records in the usage database.
   { where (date, dom is int, intl is int) in SQL.query(&quot;UsageDB&quot;, &quot;select date ...&quot;, acct)
   dom + intl &gt; 0
   link AcctPage(acct) -&gt; &quot;UsageData&quot; -&gt; UsageData(acct),
   UsageData(acct) -&gt; &quot;Entry&quot; -&gt; UsageEntry(acct, date),
   UsageEntry(acct, date) -&gt; { &quot;Date&quot; date, &quot;Total&quot; (dom + intl) }
   }
   // Query postal database to determine possible aliases for account
   { where XMLRoot{root}, root -&gt; &quot;addresses&quot;.&quot;entry&quot; -&gt; addr,
   addr -&gt; { &quot;name&quot; alias, &quot;address&quot;.&quot;street&quot; street1, &quot;address&quot;.&quot;zip&quot; zip },
   street1 = street
   link Info(acct) -&gt; &quot;Alias&quot; -&gt; alias
   }
   }





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav fsl.html yedalog.html
