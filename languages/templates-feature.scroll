title Templates

import settings.scroll
htmlTitle Templates - Language feature

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/templates-feature.pldb

* Templates is a <a href="../lists/features.html">language feature</a> created in 1995.
 link ../lists/languages.html?filter=1995 1995

 

* Template metaprogramming (TMP) is a metaprogramming technique in which templates are used by a compiler to generate temporary source code, which is merged by the compiler with the rest of the source code and then compiled. The output of these templates include compile-time constants, data structures, and complete functions. The use of templates can be thought of as compile-time execution. <a href="https://en.wikipedia.org/wiki/Template_metaprogramming">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/Template_metaprogramming">Templates Wikipedia page</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/templates-feature">Improve our Templates file</a>

html
 <br>

* Languages *with* Templates include <a href="cpp.html">C++</a>, <a href="d.html">D</a>, <a href="xl-lang.html">XL</a>

exampleCodeHeader Example from <a href="cpp.html">C++</a>:

code
 template &lt;int length&gt;
 Vector&lt;length&gt;&amp; Vector&lt;length&gt;::operator+=(const Vector&lt;length&gt;&amp; rhs)
 {
     for (int i = 0; i &lt; length; ++i)
         value[i] += rhs.value[i];
     return *this;
 }

exampleCodeHeader Example from <a href="d.html">D</a>:

code
 template TCopy(T)
 {
     void copy(out T to, T from)
     {
         to = from;
     }
 }
 int i;
 TCopy!(int).copy(i, 3);

keyboardNav symbol-table-feature.html multiple-dispatch-feature.html
