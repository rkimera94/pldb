title Tiny BASIC

import settings.scroll
htmlTitle Tiny BASIC - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/tiny-basic.pldb

paragraph
 Tiny BASIC is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=1975">1975</a> by <a href="../lists/creators.html#Dennis_Allison">Dennis Allison</a>.

kpiTable
 #429 <span title="TotalRank: 929 Jobs: 101 Users: 594 Facts: 614 Links: 234">on PLDB</span>
 47 Years Old
 760 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Tiny BASIC">Books</span>
 0 <span title="Academic publications about or leveraging Tiny BASIC">Papers</span>







paragraph
 Tiny BASIC is a dialect of the BASIC programming language that can fit into as little as 2 or 3 KB of memory. This small size made it invaluable in the early days of microcomputers in the mid-1970s, when typical memory size was only 4 to 8 KB. To meet these strict size limits, math was purely integer based and it lacked arrays. <a href="https://en.wikipedia.org/wiki/Tiny_BASIC">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Tiny_BASIC">Tiny BASIC Wikipedia page</a>
 - See also: (3 related languages)<a href="dartmouth-basic.html">Dartmouth BASIC</a>, <a href="microsoft-basic.html">Microsoft BASIC</a>, <a href="li-chen-wang.html">Li-Chen Wang</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/tiny-basic">Improve our Tiny BASIC file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/Tiny_BASIC'>Wikipedia</a>:
code
 line ::= number statement CR | statement CR
  
     statement ::= PRINT expr-list
                   IF expression relop expression THEN statement
                   GOTO expression
                   INPUT var-list
                   LET var = expression
                   GOSUB expression
                   RETURN
                   CLEAR
                   LIST
                   RUN
                   END
  
     expr-list ::= (string|expression) (, (string|expression) )*
  
     var-list ::= var (, var)*
  
     expression ::= (+|-|ε) term ((+|-) term)*
  
     term ::= factor ((*|/) factor)*
  
     factor ::= var | number | (expression)
  
     var ::= A | B | C ... | Y | Z
  
     number ::= digit digit*
  
     digit ::= 0 | 1 | 2 | 3 | ... | 8 | 9
  
     relop ::= &lt; (&gt;|=|ε) | &gt; (&lt;|=|ε) | =
 
     string ::= &quot; (a|b|c ... |x|y|z|A|B|C ... |X|Y|Z|digit)* &quot;



















keyboardNav luna.html beef.html
