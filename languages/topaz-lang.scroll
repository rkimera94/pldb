title Topaz

import settings.scroll
htmlTitle Topaz - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/topaz-lang.pldb

paragraph
 Topaz is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2021">2021</a> by <a href="../lists/creators.html#m-schm">m-schm</a>.

kpiTable
 #1490 <span title="TotalRank: 1977 Jobs: 101 Users: 2310 Facts: 924 Links: 952">on PLDB</span>
 1 Years Old
 0 <span title="Books about or leveraging Topaz">Books</span>
 0 <span title="Academic publications about or leveraging Topaz">Papers</span>







paragraph
 Dependently typed language that compiles to JavaScript

list
 - the <a href="https://github.com/m-schm/topaz">Topaz website</a>
 - Topaz is developed on <a href="https://github.com/m-schm/topaz">GitHub</a> and has 0 stars
 - Topaz compiles to <a href="javascript.html">JavaScript</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/topaz-lang">Improve our Topaz file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 ;; This is a comment
 ;; `Ven n a` represents lists that are `n` long, that contain `a`s
 ;; A Vec is either:
 type Vec (n: Uint) (a: Type) =
   ;; empty, with length 0...
   Nil: {a} -&gt; Vec 0 a
   ;; or 1 item longer than a Vec of length n.
   `::`: {n a} -&gt; a -&gt; Vec n a -&gt; Vec (n+1) a
 ;; `zip` should take two lists and return a list of pairs.
 ;; The two lists are required to be the same length because `n` is the same for
 ;; both parameters.
 let zip {n a b} (left: Vec n a) (right: Vec n b): Vec n (a, b) =
   match left, right in
     ;; Either both lists are empty...
     Nil,     Nil     =&gt; Nil
     ;; or they both contain at least one item.
     x :: xs, y :: ys =&gt; (x, y) :: zip xs ys
     ;; No other cases are needed, because the lists are the same length!



















keyboardNav incipit.html concurnas.html
