title Uno

import settings.scroll
htmlTitle Uno - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/uno.pldb

* Uno is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2002.
 link ../lists/languages.html?filter=2002 2002

 

kpiTable
 #513 <span title="TotalRank: 1060 Jobs: 102 Users: 878 Facts: 80 Links: 953">on PLDB</span>
 20 Years Old
 337 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Uno">Books</span>
 0 <span title="Academic publications about or leveraging Uno">Papers</span>
 232 <span title="Uno repos on GitHub.">Repos</span>

* Try now: <a href="https://tio.run/#uno">TIO</a>

* The Uno langauge is a dialect of C#, designed for cross-compilation to C++ and other languages. Uno does not require the .NET Framework, but has instead a more lightweight library called UnoCore. The syntax of Uno is more or less identical to C#, with deviations documented here.

- the <a href="https://fuseopen.com">Uno website</a>
- Uno is developed on <a href="https://github.com/fuse-open/uno">GitHub</a> and has 75 stars
- There are at least 232 Uno repos on <a href="https://github.com/search?q=language:Uno">GitHub</a>
- file extensions for Uno include uno
- The  Google BigQuery Public Dataset GitHub snapshot shows 24 users using Uno in 37 repos on <a href="https://api.github.com/search/repositories?q=language:Uno">GitHub</a>
- GitHub supports <a href="https://github.com/atom/language-csharp" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Uno
- <a href="https://fuseopen.com">fuseopen.com</a> was registered in 2017
- Read more about Uno on the web: <a href="https://fuseopen.com/docs/uno/uno-lang.html">1</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/uno">Improve our Uno file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/atom/language-csharp'>Linguist</a>:
code
 using Uno;
 using Uno.Collections;
 using Uno.Graphics;
 using Uno.Scenes;
 using Uno.Designer;
 using Uno.Content;
 using Uno.Content.Models;
 using Uno.UI;
 
 namespace PONG2D
 {
 	public class PlayerPads : Node
 	{
 
 		Image _player1Image;
 		Image _player2Image;
 
 		[Inline]
 		public Image Player1
 		{
 			get { return _player1Image; }
 			set
 			{
 				if (_player1Image != value)
 				{
 					_player1Image = value;
 					
 				}
 			}
 		}
 
 		[Inline]
 		public Image Player2
 		{
 			get { return _player2Image; }
 			set
 			{
 				if (_player2Image != value)
 				{
 					_player2Image = value;
 					
 				}
 			}
 		}
 
 		[Hide]
 		public float2 Player1Pos
 		{
 			get { return (Player1.ActualPosition); }
 			set
 			{
 				if (Player1 != null)
 					Player1.Position = value;
 				
 			}
 		}
 
 		[Hide]
 		public float2 Player2Pos
 		{
 			get { return (Player2.ActualPosition); }
 			set
 			{
 				if (Player2 != null)
 					Player2.Position = value;
 				
 			}
 		}
 		
 		public Rect Player1Rect
 		{
 			get { return new Rect(Player1Pos, float2(Player1.Width, Player2.Height)); }
 			set
 			{
 				Player1Pos = value.Position;
 				if (Player1 != null)
 				{
 					Player1.Width = value.Size.X;
 					Player1.Height = value.Size.Y;
 				}
 			}
 		}
 		
 		public Rect Player2Rect
 		{
 			get { return new Rect(Player2Pos, float2(Player2.Width, Player2.Height)); }
 			set
 			{
 				Player2Pos = value.Position;
 				if (Player2 != null)
 				{
 					Player2.Width = value.Size.X;
 					Player2.Height = value.Size.Y;
 				}
 			}
 		}
 
 		public Ball Ball
 		{
 			get;
 			set;
 		}
 		
 		public float PadVelocity { get; set; }
 
 		public PlayerPads()
 		{
 
 		}
 
 		void UpdatePositions()
 		{
 			
 		}
 
 		protected override void OnUpdate()
 		{
 			base.OnUpdate();
 
 			if (Input.IsKeyDown(Uno.Platform.Key.W))
 			{
 				Player1Pos = float2(0, Player1Pos.Y - PadVelocity);
 			}
 
 			if (Input.IsKeyDown(Uno.Platform.Key.S))
 			{
 				Player1Pos = float2(0, Player1Pos.Y + PadVelocity);
 			}
 
 			if (Input.IsKeyDown(Uno.Platform.Key.Up))
 			{
 				Player2Pos = float2(0, Player2Pos.Y - PadVelocity);
 			}
 
 			if (Input.IsKeyDown(Uno.Platform.Key.Down))
 			{
 				Player2Pos = float2(0, Player2Pos.Y + PadVelocity);
 			}
 			
 			if (Ball != null)
 			{
 				
 				if (Ball.BallRectangle.Intersects(Player1Rect) ||
 					Ball.BallRectangle.Intersects(Player2Rect))
 				{
 					
 					Ball.BallVelocity = float2(Ball.BallVelocity.X * -1f, Ball.BallVelocity.Y);
 				}
 			}
 			
 		}
 
 	}
 }

keyboardNav lilypond.html qb64.html
