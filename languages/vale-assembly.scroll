title Vale

import settings.scroll
htmlTitle Vale - Assembly

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/vale-assembly.pldb

paragraph
 Vale, aka Verified Assembly Language for Everest, is an <a href="../lists/languages.html?filter=assembly">assembly</a> created in <a href="../lists/languages.html?filter=2017">2017</a> by <a href="../lists/creators.html#Chris_Hawblitzel">Chris Hawblitzel</a>.

kpiTable
 #1046 <span title="TotalRank: 1547 Jobs: 62 Users: 940 Facts: 545 Links: 950">on PLDB</span>
 5 Years Old
 272 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Vale">Books</span>
 0 <span title="Academic publications about or leveraging Vale">Papers</span>







paragraph
 Vale is a tool for constructing formally verified high-performance assembly language code, with an emphasis on cryptographic code. It uses existing verification frameworks, such as Dafny and F*, for formal verification. It supports multiple architectures, such as x86, x64, and ARM, and multiple platforms, such as Windows, Mac, and Linux. Additional architectures and platforms can be supported with no changes to the Vale tool.

list
 - Vale is developed on <a href="https://github.com/project-everest/vale">GitHub</a> and has 217 stars
 - See also: <a href="fstar.html">F*</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/vale-assembly">Improve our Vale file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 procedure ReadA(ghost a:seq(uint32),inline b:bool)
  reads r0; mem;
  modifies r1;
  requires
   length(a) &gt;= 3;
   a[0] &lt;= 100;
   a[1] &lt;= 100;
   forall i :: 0 &lt;= i &lt; length(a) ==&gt;
    InMem(r0 + 4 * i, mem)
    &amp;&amp; mem[r0 + 4 * i] == a[i];
  ensures
   b ==&gt; r1 == a[0] + 1;
   !b ==&gt; r1 == a[1] + 1;
 {
  inline if (b) {
   LDR(r1, r0, 0); //load memory [r0+0] into r1
   AddOne(r1);
  } else {
   LDR(r1, r0, 4); //load memory [r0+4] into r1
   AddOne(r1);
  }
 }
 procedure{:recursive} AddNToR7(inline n:nat)
  modifies r7;
  requires r7 + n &lt;= 0xffffffff;
  ensures r7 == old(r7) + n;
 {
  inline if (n &gt; 0) {
   AddOne(r7);
   AddNToR7(n - 1);
 }





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav unrealscript.html raptorjit.html
