title Volt

import settings.scroll
htmlTitle Volt - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/volt.pldb

paragraph
 Volt is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2011">2011</a>.

kpiTable
 #520 <span title="TotalRank: 1029 Jobs: 62 Users: 827 Facts: 140 Links: 950">on PLDB</span>
 11 Years Old
 365 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Volt">Books</span>
 0 <span title="Academic publications about or leveraging Volt">Papers</span>
 158 <span title="Volt repos on GitHub.">Repos</span>







paragraph
 Volt is a C-inspired programming language that toes the line between expressiveness and control.

list
 - the <a href="http://www.volt-lang.org/">Volt website</a>
 - Volt is developed on <a href="https://github.com/VoltLang/Volta">GitHub</a> and has 142 stars
 - There are at least 158 Volt repos on <a href="https://github.com/search?q=language:Volt">GitHub</a>
 - file extensions for Volt include volt
 - The  Google BigQuery Public Dataset GitHub snapshot shows 298 users using Volt in 351 repos on <a href="https://api.github.com/search/repositories?q=language:Volt">GitHub</a>
 - GitHub supports <a href="https://github.com/textmate/d.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Volt
 - <a href="http://www.volt-lang.org/">volt-lang.org</a> was registered in 2013
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/volt">Improve our Volt file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/textmate/d.tmbundle'>Linguist</a>:
code
 // Copyright © 2012-2013, Jakob Bornecrantz.  All rights reserved.
 // See copyright notice in src/volt/license.d (BOOST ver. 1.0).
 module main;
 
 import core.stdc.stdio;
 import core.stdc.stdlib;
 
 import watt.process;
 import watt.path;
 
 import results;
 import list;
 import cmd;
 
 int main()
 {
 	auto cmdGroup = new CmdGroup();
 	bool printOk = true;
 	bool printImprovments = true;
 	bool printFailing = true;
 	bool printRegressions = true;
 	string compiler = getEnv(&quot;VOLT&quot;);
 
 	if (compiler is null) {
 		printf(&quot;compiler envar not set\n&quot;.ptr);
 		return -1;
 	}
 
 	/// @todo Scan for files
 	auto tests = testList;
 
 	int total;
 	int passed;
 	int failed;
 	int improved;
 	int regressed;
 
 	auto rets = new Result[] (tests.length);
 	for (size_t i; i &lt; tests.length; i++) {
 		rets[i] = new Result();
 		rets[i].runTest(cmdGroup, tests[i], compiler);
 	}
 
 	cmdGroup.waitAll();
 
 	for (size_t i; i &lt; tests.length; i++) {
 		auto ret = rets[i];
 		total++;
 		if (ret.ok) {
 			passed++;
 			improved += cast(int)!ret.hasPassed;
 
 			if (!ret.hasPassed &amp;&amp; printImprovments) {
 				printf(&quot;%s: %s, improved!\n&quot;.ptr, ret.test.ptr, ret.msg.ptr);
 			} else if (printOk) {
 				printf(&quot;%s: %s\n&quot;.ptr, ret.test.ptr, ret.msg.ptr);
 			}
 		} else {
 			failed++;
 			regressed += cast(int)ret.hasPassed;
 
 
 			if (ret.hasPassed &amp;&amp; printRegressions) {
 				printf(&quot;%s: %s, regressed!\n&quot;.ptr, ret.test.ptr, ret.msg.ptr);
 			} else if (printFailing) {
 				printf(&quot;%s: %s\n&quot;.ptr, ret.test.ptr, ret.msg.ptr);
 			}
 		}
 		fflush(stdout);
 	}
 
 	auto xml = fopen(&quot;results.xml&quot;.ptr, &quot;w+&quot;.ptr);
 	if (xml !is null) {
 		fprintf(xml, &quot;&lt;testsuites errors=\&quot;%u\&quot; failures=\&quot;%u\&quot; tests=\&quot;%u\&quot;&gt;\n&quot;.ptr,
 				regressed, failed - regressed, total);
 		for (size_t i; i &lt; rets.length; i++) {
 			rets[i].xmlLog(xml);
 		}
 		fprintf(xml, &quot;&lt;/testsuites&gt;\n&quot;.ptr);
 		fflush(xml);
 		fclose(xml);
 		xml = null;
 	}
 
 	auto rate = cast(float)passed / cast(float)total * 100.f;
 	printf(&quot;Summary: %i tests, %i pass%s, %i failure%s, %.2f%% pass rate, %i regressions, %i improvements.\n&quot;.ptr,
 	       total,
 	       passed, (passed == 1 ? &quot;&quot;.ptr : &quot;es&quot;.ptr),
 	       failed, (failed == 1 ? &quot;&quot;.ptr : &quot;s&quot;.ptr),
 	       cast(double)rate, regressed, improved);
 
 	return regressed ? -1 : 0;
 }
 





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token printf
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 













keyboardNav blitz3d.html runoff.html
