title Wirth syntax notation

import settings.scroll
htmlTitle Wirth syntax notation - Grammar language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/wirth-syntax-notation.pldb

paragraph
 Wirth syntax notation is a <a href="../lists/languages.html?filter=grammarLanguage">grammar language</a> created in <a href="../lists/languages.html?filter=1977">1977</a>.

kpiTable
 #1779 <span title="TotalRank: 2248 Jobs: 62 Users: 1411 Facts: 1236 Links: 950">on PLDB</span>
 45 Years Old
 95 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Wirth syntax notation">Books</span>
 0 <span title="Academic publications about or leveraging Wirth syntax notation">Papers</span>







paragraph
 Wirth syntax notation (WSN) is a metasyntax, that is, a formal way to describe formal languages. Originally proposed by Niklaus Wirth in 1977 as an alternative to Backus–Naur form (BNF). It has several advantages over BNF in that it contains an explicit iteration construct, and it avoids the use of an explicit symbol for the empty string (such as <empty> or ε).WSN has been used in several international standards, starting with ISO 10303-21. <a href="https://en.wikipedia.org/wiki/Wirth_syntax_notation">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Wirth_syntax_notation">Wirth syntax notation Wikipedia page</a>
 - Read more about Wirth syntax notation on the web: <a href="https://dl.acm.org/doi/10.1145/359863.359883">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/wirth-syntax-notation">Improve our Wirth syntax notation file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 SYNTAX     = { PRODUCTION } .
 PRODUCTION = IDENTIFIER &quot;=&quot; EXPRESSION &quot;.&quot; .
 EXPRESSION = TERM { &quot;|&quot; TERM } .
 TERM       = FACTOR { FACTOR } .
 FACTOR     = IDENTIFIER
            | LITERAL
            | &quot;[&quot; EXPRESSION &quot;]&quot;
            | &quot;(&quot; EXPRESSION &quot;)&quot;
            | &quot;{&quot; EXPRESSION &quot;}&quot; .
 IDENTIFIER = letter { letter } .
 LITERAL    = &quot;&quot;&quot;&quot; character { character } &quot;&quot;&quot;&quot; .



















keyboardNav text-executive-programming-language.html macro-11.html
