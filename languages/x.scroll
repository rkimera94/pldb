title Jule

import settings.scroll
htmlTitle Jule - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/x.pldb

* Jule is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 2021 by Mertcan Davulcu.
 link ../lists/languages.html?filter=2021 2021
 link ../lists/creators.html#Mertcan_Davulcu Mertcan Davulcu
 

kpiTable
 #534 <span title="TotalRank: 1090 Jobs: 101 Users: 1779 Facts: 36 Links: 953">on PLDB</span>
 1 Years Old
 52 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging Jule">Books</span>
 0 <span title="Academic publications about or leveraging Jule">Papers</span>

* Jule is the simple, efficient, statically typed and compiled system programming language.

- the <a href="https://jule.dev">Jule website</a>
- Jule is developed on <a href="https://github.com/julelang/jule">GitHub</a> and has 35 stars
- the <a href="https://jule.dev/pages/docs.html">Jule docs</a>
- file extensions for Jule include .jule
- Jule is written in <a href="go.html">Go</a> & <a href="cpp.html">C++</a>
- Jule is written with the native language of false
- <a href="https://jule.dev">jule.dev</a> was registered in 2022
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/x">Improve our Jule file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 fn quicksort(mut s: []int) {
     if s.len &lt;= 1 {
         ret
     }
     let mut i = 0
     for i &lt; s.len-1; i++ {
         let (mut x, mut y) = &amp;s[i], &amp;s[i+1]
         unsafe {
             if *x &gt; *y {
                 *x, *y = *y, *x
             }
         }
     }
     quicksort(s[:i])
     quicksort(s[i+1:])
 }
 
 fn main() {
     let mut s = [1, 9, -2, 25, -24, 4623, 0, -1, 0xFD2]
     outln(s)
     quicksort(s)
     outln(s)
 }

exampleCodeHeader Example from the web:
code
 fn main() {
     outln(&quot;Hello World&quot;)
 }

exampleCodeHeader Example from the web:
code
 use std::math::{PI}
 
 trait Shape {
     fn area(self): int
 }
 
 struct Rectangle {
     width: int
     height: int
 }
 
 impl Shape for Rectangle {
     fn area(self): int {
         ret self.width * self.height
     }
 }
 
 struct Circle {
     r: f32
 }
 
 impl Shape for Circle {
     fn area(self): int {
         ret PI * self.r * self.r
     }
 }
 
 fn main() {
     let rect: Shape = Rectangle{90, 5}
     let circ: Shape = Circle{90.5}
     outln(rect.area())
     outln(circ.area())
 }

## <a href="../lists/keywords.html?filter=x">Keywords</a> in Jule
* fn pub struct enum unsafe const let mut self match case default if else for in impl trait break continue goto cpp i8 i16 i32 i64 u8 u16 u32 u64 f32 f64 str int uint type any true false bool ret fallthrough nil uintptr co

foldBreak
## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature File Imports
  FeatureLink ../languages/file-imports-feature.html
  Supported ✓
  Example
   use std::mem
   use std::mem::{size_of, align_of, self}
   use std::mem::*
  Token use
 row
  Feature Multiline Strings
  FeatureLink ../languages/multiline-strings-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Static Typing
  FeatureLink ../languages/static-typing-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Increment and decrement operators
  FeatureLink ../languages/increment-and-decrement-operators-feature.html
  Supported ✓
  Example
   ++
   --
  Token 
 row
  Feature Conditionals
  FeatureLink ../languages/conditionals-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Manual Memory Management
  FeatureLink ../languages/manual-memory-management-feature.html
  Supported ✓
  Example
   use std::mem::c::{malloc, free}
   
   fn main() {
       let mut ptr = malloc(8)
       free(ptr)
       ptr = nil
   }
  Token 
 row
  Feature Type Casting
  FeatureLink ../languages/type-casting-feature.html
  Supported ✓
  Example
   let x = (int)(3.14)
  Token 
 row
  Feature Duck Typing
  FeatureLink ../languages/duck-typing-feature.html
  Supported ✓
  Example
   type[T]
   fn lock_object(obj: T) {
       obj.lock()
   }
  Token 
 row
  Feature Switch Statements
  FeatureLink ../languages/switch-statements-feature.html
  Supported ✓
  Example
   match X {
   case Y:
       outln("X is Y")
   case Z:
       outln("X is Z")
   case A, B, C:
       outln("X is A, B, or C")
   default:
       outln("X is not Y, Z, A, B and C")
   }
  Token 
 row
  Feature Access Modifiers
  FeatureLink ../languages/access-modifiers-feature.html
  Supported ✓
  Example
   pub
  Token 
 row
  Feature Gotos
  FeatureLink ../languages/gotos-feature.html
  Supported ✓
  Example
   goto a_label
  Token 
 row
  Feature While Loops
  FeatureLink ../languages/while-loops-feature.html
  Supported ✓
  Example
   for my_condition {
       // ...
   }
  Token 
 row
  Feature Case Sensitivity
  FeatureLink ../languages/case-sensitivity-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Dependent types
  FeatureLink ../languages/dependent-types-feature.html
  Supported ✓
  Example
   int uint uintptr
  Token 
 row
  Feature Unary Operators
  FeatureLink ../languages/unary-operators-feature.html
  Supported ✓
  Example
   * & - + ^ !
  Token 
 row
  Feature Variadic Functions
  FeatureLink ../languages/variadic-functions-feature.html
  Supported ✓
  Example
   fn average(x: ...f64): f64 {
       // ...
   }
  Token 
 row
  Feature Assert Statements
  FeatureLink ../languages/assert-statements-feature.html
  Supported ✓
  Example
   use std::debug
   use std::debug::assert::{assert}
   
   fn main() {
       std::debug::ENABLE = true
       let x = 200
       assert(x < 200)
   }
  Token 
 row
  Feature Bitwise Operators
  FeatureLink ../languages/bitwise-operaters-feature.html
  Supported ✓
  Example
   & | ^ << >>
  Token 
 row
  Feature Directives
  FeatureLink ../languages/directives-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Scientific Notation
  FeatureLink ../languages/scientific-notation-feature.html
  Supported ✓
  Example
   1E2
   .12345E+6
   1.e+0
   0x15e-2
   0x2.p10
   0X.8p-0
   0x1.Fp+0
   0x1fffp-16
   0x1p-2
  Token 
 row
  Feature Binary Literals
  FeatureLink ../languages/binary-numbers-feature.html
  Supported ✓
  Example
   0b0001010101
  Token 
 row
  Feature Octals
  FeatureLink ../languages/octals-feature.html
  Supported ✓
  Example
   0455
  Token 
 row
  Feature Hexadecimals
  FeatureLink ../languages/hexadecimals-feature.html
  Supported ✓
  Example
   0xDFF90
  Token 
 row
  Feature Structs
  FeatureLink ../languages/structs-feature.html
  Supported ✓
  Example
   struct Employee {
       first_name: str
       last_name: str
       salary: f32
   }
  Token 
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Anonymous Functions
  FeatureLink ../languages/anonymous-functions-feature.html
  Supported ✓
  Example
   let anonymous = fn() {
       outln("Anonymous Function")
   }
   anonymous()
  Token 
 row
  Feature Constants
  FeatureLink ../languages/constants-feature.html
  Supported ✓
  Example
   const PI = 3.14159265359
  Token 
 row
  Feature Booleans
  FeatureLink ../languages/booleans-feature.html
  Supported ✓
  Example
   true false
  Token true false
 row
  Feature Generics
  FeatureLink ../languages/generics-feature.html
  Supported ✓
  Example
   type[T]
   fn generic_function(s: []T) {
       // ...
   }
  Token 
 row
  Feature Traits
  FeatureLink ../languages/traits-feature.html
  Supported ✓
  Example
   trait Person {
       fn get_full_name(self): str
       fn get_age(self): byte
   }
  Token 
 row
  Feature Maps
  FeatureLink ../languages/maps-feature.html
  Supported ✓
  Example
   [int:str] {
       0: "Key 0",
       1: "Key 1",
       2: "Key 2",
   }
  Token 
 row
  Feature Methods
  FeatureLink ../languages/methods-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Functions
  FeatureLink ../languages/functions-feature.html
  Supported ✓
  Example
   fn a_function() {
       // ...
   }
  Token 
 row
  Feature Pointers
  FeatureLink ../languages/pointers-feature.html
  Supported ✓
  Example
   let ptr: *int = nil
  Token 
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token outln
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   /*
     A multi line comment
   */
  Token /* */
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
   /* A comment */
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Jule String Literal"
   `Jule Raw String Literal`
  Token "
 row
  Feature Regular Expression Syntax Sugar
  FeatureLink ../languages/regular-expressions-syntax-sugar-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature Async Await
  FeatureLink ../languages/async-await-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature Operator Overloading
  FeatureLink ../languages/operator-overloading-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature Polymorphism
  FeatureLink ../languages/polymorphism-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature Garbage Collection
  FeatureLink ../languages/garbage-collection-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature Function Overloading
  FeatureLink ../languages/function-overloading-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 

keyboardNav cweb.html codeql.html
