title XBase++

import settings.scroll
htmlTitle XBase++ - Programming language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/xbasepp.pldb

* XBase++ is a <a href="../lists/languages.html?filter=pl">programming language</a> created in 1997.
 link ../lists/languages.html?filter=1997 1997

 

kpiTable
 #382 <span title="TotalRank: 838 Jobs: 101 Users: 1338 Facts: 251 Links: 486">on PLDB</span>
 25 Years Old
 115 <span title="Crude user estimate from a linear model.">Users</span>
 0 <span title="Books about or leveraging XBase++">Books</span>
 0 <span title="Academic publications about or leveraging XBase++">Papers</span>

* Xbase++ is an object oriented programming language which has multiple inheritance and polymorphism. It is based on the XBase language dialect and conventions. It is 100% Clipper compatible language supporting multiple inheritance, polymorphism, object oriented programming. <a href="https://en.wikipedia.org/wiki/XBase%2B%2B">Read more on Wikipedia...</a>

- the <a href="https://en.wikipedia.org/wiki/XBase%2B%2B">XBase++ Wikipedia page</a>
- See also: (4 related languages)<a href="xbase.html">xBase</a>, <a href="clipper.html">Clipper</a>, <a href="visual-foxpro.html">Visual FoxPro</a>, <a href="visual-objects.html">Visual Objects</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/xbasepp">Improve our XBase++ file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/x/XBase++.prg'>hello-world</a>:
code
 func Main()
     Qout(&quot;Hello World&quot;)
 return 1

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/XBase%2B%2B'>Wikipedia</a>:
code
 #include &quot;class.ch&quot;
 
 //
 //  This program prints:
 //
 //  Missy  Meow!
 //  Mr. Bojangles  Meow!
 //  Lassie  Bark!
 //  Press any key to continue...
 //
 
 /////////////////////////////
 //
 PROCEDURE Main()
 //
 /////////////////////////////
 
   LOCAL aAnimals := Array(3)
   LOCAL i
 
   aAnimals[1] :=  Cat():New(&quot;Missy&quot;)
   aAnimals[2] :=  Cat():New(&quot;Mr. Bojangles&quot;)
   aAnimals[3] :=  Dog():New(&quot;Lassie&quot;)
 
   FOR i:=1 TO LEN(aAnimals)
      ? aAnimals[i]:Name + &quot;  &quot; + aAnimals[i]:Talk()
   NEXT i
 
   WAIT
 
 RETURN
 
 /////////////////////////////
 //
 CLASS Animal
 //
 /////////////////////////////
 
    EXPORTED:
       VAR Name   READONLY
 
       METHOD Init
       DEFERRED CLASS METHOD Talk
 ENDCLASS
 
 METHOD Animal:Init( cName )
    ::Name := cName
 RETURN Self
 
 /////////////////////////////
 //
 CLASS Dog FROM Animal
 //
 /////////////////////////////
    EXPORTED:
    METHOD Talk
 ENDCLASS
 
 METHOD Dog:Talk()
 RETURN &quot;Bark!&quot;
 
 /////////////////////////////
 //
 CLASS Cat FROM Animal
 //
 /////////////////////////////
    EXPORTED:
    METHOD Talk
 ENDCLASS
 
 METHOD Cat:Talk()
 RETURN &quot;Meow!&quot;

foldBreak
## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature Print() Debugging
  FeatureLink ../languages/print-debugging-feature.html
  Supported ✓
  Example
  Token Qout
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 

keyboardNav genie.html unison.html
