title XQuery

import settings.scroll
htmlTitle XQuery - Pl

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/xquery.pldb

paragraph
 XQuery is a <a href="../lists/languages.html?filter=pl">pl</a> created in <a href="../lists/languages.html?filter=2007">2007</a>.

kpiTable
 #105 <span title="TotalRank: 294 Jobs: 62 Users: 426 Facts: 101 Links: 131">on PLDB</span>
 15 Years Old
 1.4k <span title="Crude user estimate from a linear model.">Users</span>
 2 <span title="Books about or leveraging XQuery">Books</span>
 15 <span title="Academic publications about or leveraging XQuery">Papers</span>
 2k <span title="XQuery repos on GitHub.">Repos</span>







paragraph
 XQuery (XML Query) is a query and functional programming language that queries and transforms collections of structured and unstructured data, usually in the form of XML, text and with vendor-specific extensions for other data formats (JSON, binary, etc.). The language is developed by the XML Query working group of the W3C. The work is closely coordinated with the development of XSLT by the XSL Working Group; the two groups share responsibility for XPath, which is a subset of XQuery. <a href="https://en.wikipedia.org/wiki/XQuery">Read more on Wikipedia...</a>

list
 - the <a href="http://www.w3.org/XML/Query/">XQuery website</a>
 - the <a href="https://en.wikipedia.org/wiki/XQuery">XQuery Wikipedia page</a>
 - There are at least 1,753 XQuery repos on <a href="https://github.com/search?q=language:XQuery">GitHub</a>
 - XQuery first developed in <a href="../lists/originCommunities.html#W3C">W3C</a>
 - file extensions for XQuery include xq, xql, xqm, xqy and xquery
 - The  Google BigQuery Public Dataset GitHub snapshot shows 983 users using XQuery in 1k repos on <a href="https://api.github.com/search/repositories?q=language:XQuery">GitHub</a>
 - Explore XQuery snippets on <a href="http://www.rosettacode.org/wiki/Category:XQuery">Rosetta Code</a>
 - XQuery appears in the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
 - There is a <a href="codemirror.html">CodeMirror</a> <a href="https://github.com/codemirror/codemirror5/tree/master/mode/xquery">package</a> for syntax highlighting XQuery
 - <a href="languages/pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/webmisc.py">syntax highlighting</a> for XQuery
 - GitHub supports <a href="https://github.com/wcandillon/language-jsoniq" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for XQuery
 - See also: <a href="xpath.html">XPath</a>, <a href="sql.html">SQL</a>, <a href="lisp.html">Lisp</a>, <a href="prolog.html">Prolog</a>, <a href="xml.html">XML</a>, <a href="java.html">Java</a>, <a href="csharp.html">C#</a>, <a href="jsoniq.html">JSONiq</a>, <a href="json.html">JSON</a>, <a href="isbn.html">ISBN</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/xquery">Improve our XQuery file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/x/XQuery.xq'>hello-world</a>:
code
 let $hello := &quot;Hello World&quot;
 return $hello
 

exampleCodeHeader Example from <a href='http://helloworldcollection.de/#XQuery'>the Hello World Collection</a>:
code
 (: Hello World with XQuery :)
 let $i := &quot;Hello World&quot;
 return $i
 

exampleCodeHeader Example from <a href='https://github.com/wcandillon/language-jsoniq'>Linguist</a>:
code
 (: -------------------------------------------------------------------------------------
 
     xproc.xqm - core xqm contains entry points, primary eval-step function and
     control functions.
 
  ---------------------------------------------------------------------------------------- :)
 xquery version &quot;3.0&quot;  encoding &quot;UTF-8&quot;;
 
 module namespace xproc = &quot;http://xproc.net/xproc&quot;;
 
  (: declare namespaces :)
  declare namespace p=&quot;http://www.w3.org/ns/xproc&quot;;
  declare namespace c=&quot;http://www.w3.org/ns/xproc-step&quot;;
  declare namespace err=&quot;http://www.w3.org/ns/xproc-error&quot;;
 
  (: module imports :)
 (:  import module namespace util = &quot;http://xproc.net/xproc/util&quot; at &quot;util1.xqm&quot;; :)
  import module namespace const = &quot;http://xproc.net/xproc/const&quot; at &quot;const.xqm&quot;;
  import module namespace parse = &quot;http://xproc.net/xproc/parse&quot; at &quot;parse.xqm&quot;;
  import module namespace u = &quot;http://xproc.net/xproc/util&quot; at &quot;util.xqm&quot;;
 
  (: declare options :)
  declare boundary-space preserve;
  declare option saxon:output &quot;indent=yes&quot;;
 
  (: declare functions :)
  declare variable $xproc:run-step       := xproc:run#6;
  declare variable $xproc:parse-and-eval := ();
  declare variable $xproc:declare-step   := ();
  declare variable $xproc:choose         := ();
  declare variable $xproc:try            := ();
  declare variable $xproc:catch          := ();
  declare variable $xproc:group          := ();
  declare variable $xproc:for-each       := ();
  declare variable $xproc:viewport       := ();
  declare variable $xproc:library        := ();
  declare variable $xproc:pipeline       := ();
  declare variable $xproc:variable       := ();
 
 
  (: list all declared namespaces :)
  (: -------------------------------------------------------------------------- :)
  declare function xproc:enum-namespaces($pipeline){
  (: -------------------------------------------------------------------------- :)
     &lt;namespace name=&quot;{$pipeline/@name}&quot;&gt;{u:enum-ns(&lt;dummy&gt;{$pipeline}&lt;/dummy&gt;)}&lt;/namespace&gt;
  };
 
  (: entry point :)
  (: -------------------------------------------------------------------------- :)
  declare function xproc:run($pipeline,$stdin,$dflag,$tflag,$bindings,$options){
  (: -------------------------------------------------------------------------- :)
 
  (: STEP I: preprocess :)
  let $validate   := ()
  let $namespaces := xproc:enum-namespaces($pipeline)
  let $parse      := parse:explicit-bindings( parse:AST(parse:explicit-name(parse:explicit-type($pipeline))))
  let $ast        := element p:declare-step {$parse/@*,
        parse:pipeline-step-sort( $parse/*, () )
      }
 
  (: STEP II: eval AST :)
  let $eval_result := ()
 
  (: STEP III: serialize and return results :)
  let $serialized_result := $pipeline
 
  return 
    $serialized_result
  };
 
 

exampleCodeHeader Example from <a href='https://en.wikipedia.org/wiki/XQuery'>Wikipedia</a>:
code
 &lt;html&gt;&lt;body&gt;
  {
    for $act in doc(&quot;hamlet.xml&quot;)//ACT
    let $speakers := distinct-values($act//SPEAKER)
    return
      &lt;div&gt;
        &lt;h1&gt;{ string($act/TITLE) }&lt;/h1&gt;
        &lt;ul&gt;
        {
          for $speaker in $speakers
          return &lt;li&gt;{ $speaker }&lt;/li&gt;
        }
        &lt;/ul&gt;
      &lt;/div&gt;
  }
  &lt;/body&gt;&lt;/html&gt;





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Integers
  FeatureLink ../languages/integers-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Floats
  FeatureLink ../languages/floats-feature.html
  Supported ✓
  Example
  Token 
 row
  Feature Strings
  FeatureLink ../languages/strings-feature.html
  Supported ✓
  Example
   "Hello world"
  Token "
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   (: Hello World with XQuery :)
  Token 
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ϴ
  Example
  Token 





foldBreak
subsection Books about XQuery from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 XML: A Beginner's Guide: Go Beyond the Basics with Ajax, XHTML, XPath 2.0, XSLT 2.0 and XQuery|https://isbndb.com/book/9780071606264|Holzner, Steven|2009|McGraw-Hill Education
 XML: A Beginner's Guide: Go Beyond the Basics with Ajax, XHTML, XPath 2.0, XSLT 2.0 and XQuery|https://isbndb.com/book/9780071606271|Holzner, Steven|2009|McGraw-Hill Education


foldBreak
subsection Publications about XQuery from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 XQuery Reloaded|https://www.semanticscholar.org/paper/398e21c1a7f699a4f0298ce49c4bd0c86480946a|Roger Bamford and Vinayak R. Borkar and M. Brantner and Peter M. Fischer and D. Florescu and David A. Graf and D. Kossmann and Tim Kraska and D. Muresan and Sorin Nasoi and Markos Zacharioudaki|2009|36|1
 XML programming with SQL/XML and XQuery|https://www.semanticscholar.org/paper/dccdd7c09b1b48be5ad389fb86152851bf918636|J. Funderburk and S. Malaika and B. Reinwald|2002|30|2
 Design and implementation of a graphical interface to XQuery|https://www.semanticscholar.org/paper/b5bc91313d27f1451ed72ae28e3f3e11fa6744ad|Enrico Augurusa and Daniele Braga and A. Campi and S. Ceri|2003|29|3
 Highly distributed XQuery with DXQ|https://www.semanticscholar.org/paper/dc4dd7d588dac1952e8a796b01d88b5ef79b8104|M. Fernández and T. Jim and Kristi Morton and Nicola Onose and Jérôme Siméon|2007|28|2
 Compiling XSLT 2.0 into XQuery 1.0|https://www.semanticscholar.org/paper/fa684f0d013f69deb6e9a0dd9f430363f69f46b5|Achille Fokoue and K. Rose and Jérôme Siméon and L. Villard|2005|18|2
 XQuery in the browser|https://www.semanticscholar.org/paper/139f38fd02992a746d0710162771e338d7c3ce4b|G. Fourny and Markus Pilman and D. Florescu and D. Kossmann and Tim Kraska and D. McBeath|2009|17|0
 An Encoding of XQuery in Prolog|https://www.semanticscholar.org/paper/5195d815f3d783c7798e00cbabbb1e83dc00ff6d|J. Almendros-Jiménez|2009|17|1
 Developing an Enterprise Web Application in XQuery|https://www.semanticscholar.org/paper/6ddcffdaa35a836d21a73acf6b254e6ebc2b94e7|Martin Kaufmann and D. Kossmann|2009|15|0
 Integrating XQuery and Logic Programming|https://www.semanticscholar.org/paper/79d47519e543be6e80904a89bdf3570b0d4629ce|J. Almendros-Jiménez and A. Becerra-Terón and F. J. Enciso-Baños|2009|14|0
 Eliminating dead-code from XQuery programs|https://www.semanticscholar.org/paper/d27af0ee184aac902c559b35f32e586643706b80|P. Genevès and Nabil Layaïda|2010|12|0
 XQuery in the browser|https://www.semanticscholar.org/paper/ba392dbe46c976df4b7ac39426cffafd2de607c5|G. Fourny and D. Kossmann and Tim Kraska and Markus Pilman and D. Florescu|2008|7|1
 Function inlining in XQuery 3.0 optimization|https://www.semanticscholar.org/paper/6824125891a14a5ea4fcc8427a8a3ee6b358089b|Leonard Wörteler and Michael Grossniklaus and C. Grün and M. Scholl|2015|5|0
 Unleashing XQuery for Data-Independent Programming|https://www.semanticscholar.org/paper/f6f4cf733b4a9ba7859bbd4d3a58757dd1bd4e6e|Sebastian Bächle and Caetano Sauer|2014|4|0
 Programming the KDD Process using XQuery|https://www.semanticscholar.org/paper/f1eadf3f8cb7d644d4114bef4f1cb5c1f1a8e486|A. Romei and F. Turini|2011|3|0
 An expressive bidirectional transformation language for XQuery view update (Special issue : Advanced Programming Techniques for Construction of Robust, Generic and Evolutionary Programs)|https://www.semanticscholar.org/paper/b5aec929e9b515d99a039ead74029f20bb7c6b0c|Dongxi Liu and Zhenjiang Hu and M. Takeichi|2013|1|0






keyboardNav asp.html spss.html
