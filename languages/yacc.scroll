title Yacc

import settings.scroll
htmlTitle Yacc - Grammar language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/yacc.pldb

paragraph
 Yacc, aka Yet Another Compiler-Compiler, is a <a href="../lists/languages.html?filter=grammarLanguage">grammar language</a> created in <a href="../lists/languages.html?filter=1975">1975</a>.

kpiTable
 #79 <span title="TotalRank: 230 Jobs: 60 Users: 267 Facts: 88 Links: 82">on PLDB</span>
 47 Years Old
 3.1k <span title="Crude user estimate from a linear model.">Users</span>
 4 <span title="Books about or leveraging Yacc">Books</span>
 1 <span title="Academic publications about or leveraging Yacc">Papers</span>
 11k <span title="Yacc repos on GitHub.">Repos</span>







paragraph
 Yacc (Yet Another Compiler-Compiler) is a computer program for the Unix operating system. It is a Look Ahead Left-to-Right (LALR) parser generator, generating a parser, the part of a compiler that tries to make syntactic sense of the source code, specifically a LALR parser, based on an analytic grammar written in a notation similar to Backus–Naur Form (BNF). Yacc itself used to be available as the default parser generator on most Unix systems, though it has since been supplanted as the default by more recent, largely compatible, programs.. <a href="https://en.wikipedia.org/wiki/Yacc">Read more on Wikipedia...</a>

list
 - the <a href="https://en.wikipedia.org/wiki/Yacc">Yacc Wikipedia page</a>
 - There are at least 11,041 Yacc repos on <a href="https://github.com/search?q=language:Yacc">GitHub</a>
 - PLDB estimates there are currently 17 job openings for Yacc programmers.
 - file extensions for Yacc include y, yacc and yy
 - Yacc is written in <a href="c.html">C</a>
 - The  Google BigQuery Public Dataset GitHub snapshot shows 10k users using Yacc in 14k repos on <a href="https://api.github.com/search/repositories?q=language:Yacc">GitHub</a>
 - Yacc is listed on <a href="https://hopl.info/showlanguage.prx?exp=704">HOPL</a>
 - Yacc appears in the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
 - GitHub supports <a href="https://github.com/textmate/bison.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Yacc
 - See also: (13 related languages)<a href="unix.html">Unix</a>, <a href="b.html">B</a>, <a href="c.html">C</a>, <a href="bison.html">Bison</a>, <a href="ocaml.html">OCaml</a>, <a href="ratfor.html">RATFOR</a>, <a href="ada.html">Ada</a>, <a href="pascal.html">Pascal</a>, <a href="java.html">Java</a>, <a href="python.html">Python</a>, <a href="ruby.html">Ruby</a>, <a href="go.html">Go</a>, <a href="common-lisp.html">Common Lisp</a>
 - Read more about Yacc on the web: <a href="https://github.com/babyraging/yash">1</a>
 - HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
 - <a href="https://build.pldb.com/edit/yacc">Improve our Yacc file</a>

html
 <br>

exampleCodeHeader Example from <a href='https://github.com/textmate/bison.tmbundle'>Linguist</a>:
code
 %{
 /*
  * Test program: Advanced Calculator
  * by Zhao Cheng 5/20/2012
  */
 %}
 
 %union {
     double val;    /* For returning numbers.  */
     symrec *tptr;  /* For returning symbol-table pointers.  */
 }
 
 %token &lt;val&gt; NUMBER
 %token &lt;tptr&gt; VAR FNCT
 
 %right &#39;=&#39;
 %left &#39;+&#39; &#39;-&#39;
 %left &#39;*&#39; &#39;/&#39;
 %right &#39;^&#39;
 %left NEG
 
 %type &lt;val&gt; expression
 
 %{
 #include &lt;stdio.h&gt;
 #include &lt;stdlib.h&gt;
 #include &lt;string.h&gt;
 #include &lt;math.h&gt;
 #include &quot;calc.h&quot;  /* Contains definition of `symrec&#39;.  */
 %}
 
 %%
 
 statement
     : /* empty */ { exit(0); }
     | expression { printf(&quot;= %f\n&quot;, $1); }
     ;
 
 expression
     : NUMBER { $$ = $1; }
     | VAR    { $$ = $1-&gt;value.var; }
     | VAR &#39;=&#39; expression        { $$ = $3; $1-&gt;value.var = $3; }
     | FNCT &#39;(&#39; expression &#39;)&#39;   { $$ = (*($1-&gt;value.fnctptr))($3); }
     | expression &#39;*&#39; expression { $$ = $1 * $3; }
     | expression &#39;/&#39; expression { $$ = $1 / $3; }
     | expression &#39;+&#39; expression { $$ = $1 + $3; }
     | expression &#39;-&#39; expression { $$ = $1 - $3; }
     | expression &#39;^&#39; expression { $$ = pow($1, $3); }
     | &#39;-&#39; expression %prec NEG  { $$ = -$2; }
     | &#39;(&#39; expression &#39;)&#39;        { $$ = $2; }
     ;
 
 %%
 struct init
 {
     char const *fname;
     double (*fnct) (double);
 };
 struct init const arith_fncts[] =
 {
     &quot;sin&quot;   , sin   , 
     &quot;asin&quot;  , asin  , 
     &quot;cos&quot;   , cos   , 
     &quot;acos&quot;  , acos  , 
     &quot;tan&quot;   , tan   , 
     &quot;atan&quot;  , atan  , 
     &quot;ceil&quot;  , ceil  , 
     &quot;floor&quot; , floor , 
     &quot;abs&quot;   , fabs  , 
     &quot;ln&quot;    , log   , 
     &quot;log&quot;   , log10 , 
     &quot;lg&quot;    , log2  , 
     &quot;exp&quot;   , exp   , 
     &quot;sqrt&quot;  , sqrt  , 
     0       , 0
 };
 /* The symbol table: a chain of `struct symrec&#39;.  */
 symrec *sym_table;
 /* Put arithmetic functions in table.  */
 void init_table (void)
 {
     int i;
     symrec *ptr;
     for (i = 0; arith_fncts[i].fname != 0; i++) {
         ptr = putsym (arith_fncts[i].fname, FNCT);
         ptr-&gt;value.fnctptr = arith_fncts[i].fnct;
     }
 }
 int main()
 {
     init_table();
     while (yyparse() == 0)
         ;
     return 0;
 }
 void yyerror(const char *msg)
 {
     fprintf(stderr, &quot;Error: %s\n&quot;, msg);
 }
 symrec *
 putsym (char const *sym_name, int sym_type)
 {
   symrec *ptr;
   ptr = (symrec *) malloc (sizeof (symrec));
   ptr-&gt;name = (char *) malloc (strlen (sym_name) + 1);
   strcpy (ptr-&gt;name,sym_name);
   ptr-&gt;type = sym_type;
   ptr-&gt;value.var = 0; /* Set value to 0 even if fctn.  */
   ptr-&gt;next = (struct symrec *)sym_table;
   sym_table = ptr;
   return ptr;
 }
 symrec *
 getsym (char const *sym_name)
 {
   symrec *ptr;
   for (ptr = sym_table; ptr != (symrec *) 0;
        ptr = (symrec *)ptr-&gt;next)
     if (strcmp (ptr-&gt;name,sym_name) == 0)
       return ptr;
   return 0;
 }
 





foldBreak
subsection Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../languages/multiline-comments-feature.html
  Supported ✓
  Example
   /* A comment
   */
  Token /* */
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   // A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   // A comment
  Token //
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 





foldBreak
subsection Books about Yacc from ISBNdb
pipeTable
 title|titleLink|authors|year|publisher
 Compiler Design Using FLEX and YACC|https://isbndb.com/book/9788120332515|Das, Vinu V.|2007|PHI
 Lex & Yacc|https://isbndb.com/book/9781449385606|Doug Brown Doug and John R. Levine and Tony Mason and Tony Mason and Doug Brown|2012|O’Reilly Media
 Compiler Construction Using Java, JavaCC, and Yacc|https://isbndb.com/book/9781118112878|Anthony J. Dos Reis|2012-02-23|Wiley
 Compiler Construction Using Java, JavaCC, and Yacc|https://isbndb.com/book/9781118112779|Anthony J. Dos Reis|2012|Wiley


foldBreak
subsection Publications about Yacc from Semantic Scholar
pipeTable
 title|titleLink|authors|year|citations|influentialCitations
 Yacc in sasl — an exercise in functional programming|https://www.semanticscholar.org/paper/5e6fedcd614749ea7e7e6dc764dee16d590c12f6|S. Jones|1985|20|0






keyboardNav sagemath.html d.html
