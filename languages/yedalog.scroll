title Yedalog

import settings.scroll
htmlTitle Yedalog - Query language

viewSourceUrl https://github.com/breck7/pldb/blob/main/database/things/yedalog.pldb

* Yedalog is a <a href="../lists/languages.html?filter=queryLanguage">query language</a> created in 2015 by Brian Chin and Daniel von Dincklage and Vuk Ercegovac and Peter Hawkins and Mark S. Miller and Franz Och and Chris Olston and Fernando Pereira.
 link ../lists/languages.html?filter=2015 2015
 link ../lists/creators.html#Brian_Chin Brian Chin
 link ../lists/creators.html#Daniel_von_Dincklage Daniel von Dincklage
 link ../lists/creators.html#Vuk_Ercegovac Vuk Ercegovac
 link ../lists/creators.html#Peter_Hawkins Peter Hawkins
 link ../lists/creators.html#Mark_S._Miller Mark S. Miller
 link ../lists/creators.html#Franz_Och Franz Och
 link ../lists/creators.html#Chris_Olston Chris Olston
 link ../lists/creators.html#Fernando_Pereira Fernando Pereira
 

kpiTable
 #1343 <span title="TotalRank: 1851 Jobs: 101 Users: 2742 Facts: 797 Links: 953">on PLDB</span>
 7 Years Old
 0 <span title="Books about or leveraging Yedalog">Books</span>
 0 <span title="Academic publications about or leveraging Yedalog">Papers</span>

*  We introduce Yedalog, a declarative programming language that allows programmers to mix data-parallel pipelines and computation seamlessly in a single language. By contrast, most existing tools for data-parallel computation embed a sublanguage of data-parallel pipelines in a general-purpose language, or vice versa. Yedalog extends Datalog, incorporating not only computational features from logic programming, but also features for working with data structured as nested records. Yedalog programs can run both on a single machine, and distributed across a cluster in batch and interactive modes, allowing programmers to mix different modes of execution easily.

- Yedalog first developed in <a href="../lists/originCommunities.html#Google">Google</a>
- See also: (1 related languages)<a href="datalog.html">Datalog</a>
- Read more about Yedalog on the web: <a href="https://research.google/pubs/pub43462/">1</a>
- HTML of this page generated by <a href="https://github.com/breck7/pldb/blob/main/code/LanguagePage.ts">LanguagePage.ts</a>
- <a href="https://build.pldb.com/edit/yedalog">Improve our Yedalog file</a>

html
 <br>

exampleCodeHeader Example from the web:
code
 Documents = Load{path: &quot;document-parse-trees&quot;};
 
 # Code to execute for each document:
 module PerDocument{tokens: T} = {
 # Computes parent-child relationships
 Child{p} = c :- T[c] == {parent: p, .._};
 
 # Computes nodes that transitively descend from &quot;influenced&quot;
 Descendants{t: c} :- T[p] == {text: &quot;influenced&quot;, .._}, c == Child{p};
 Descendants{t: c} :- Descendants{t: p}, c == Child{p};
 
 # Counts nodes in which each entity appears under the verb &quot;influenced&quot;.
 Influence{mid} += 1 :- Descendants{t}, T[t] == {entity: mid, .._};
 };
 
 # Each entity’s influence from each hostname
 Influential{mid, hostname} += count :-
 Documents{tokens, hostname, .._},
 PerDocument{tokens}.Influence{mid} == count;
 
 # Persists Influential as protocol buffer data
 ? Store{data: Influential, path: &quot;influential-entities&quot;};

foldBreak
## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../languages/comment-feature.html
  Supported ✓
  Example
   # A comment
  Token 
 row
  Feature Line Comments
  FeatureLink ../languages/line-comments-feature.html
  Supported ✓
  Example
   # A comment
  Token #
 row
  Feature Semantic Indentation
  FeatureLink ../languages/semantic-indentation-feature.html
  Supported ϴ
  Example
  Token 

keyboardNav struql.html pipelines.html
